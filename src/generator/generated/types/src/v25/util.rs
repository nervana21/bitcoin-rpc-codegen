use bitcoin::{amount::Amount, hex::Hex, time::Time};
use serde::{Deserialize, Serialize};
use serde_json;

/// Response for the createmultisig RPC call.
///
/// Creates a multi-signature address with n signature of m keys required.
/// It returns a json object with the address and redeemScript.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct CreatemultisigResponse {
    /// The value of the new multisig address.
    pub address: String,
    /// The string value of the hex-encoded redemption script.
    pub redeemscript: Hex,
    /// The descriptor for this multisig
    pub descriptor: String,
    /// Any warnings resulting from the creation of this multisig
    pub warnings: Vec<String>,

}

/// Response for the deriveaddresses RPC call.
///
/// Derives one or more addresses corresponding to an output descriptor.
/// Examples of output descriptors are:
/// pkh(<pubkey>)                                     P2PKH outputs for the given pubkey
/// wpkh(<pubkey>)                                    Native segwit P2PKH outputs for the given pubkey
/// sh(multi(<n>,<pubkey>,<pubkey>,...))              P2SH-multisig outputs for the given threshold and pubkeys
/// raw(<hex script>)                                 Outputs whose output script equals the specified hex-encoded bytes
/// tr(<pubkey>,multi_a(<n>,<pubkey>,<pubkey>,...))   P2TR-multisig outputs for the given threshold and pubkeys
/// In the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one
/// or more path elements separated by "/", where "h" represents a hardened child key.
/// For more information on output descriptors, see the documentation in the doc/descriptors.md file.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct DeriveaddressesResponse {
    /// the derived addresses
    pub address: String,

}

/// Response for the estimatesmartfee RPC call.
///
/// Estimates the approximate fee per kilobyte needed for a transaction to begin
/// confirmation within conf_target blocks if possible and return the number of blocks
/// for which the estimate is valid. Uses virtual transaction size as defined
/// in BIP 141 (witness data is discounted).
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct EstimatesmartfeeResponse {
    /// estimate fee rate in BTC/kvB (only present if no errors were encountered)
    pub feerate: f64,
    /// Errors encountered during processing (if there are any)
    pub errors: Vec<String>,
    /// block number where estimate was found
    /// The request target will be clamped between 2 and the highest target
    /// fee estimation is able to return based on how long it has been running.
    /// An error is returned if not enough transactions and blocks
    /// have been observed to make an estimate for any number of blocks.
    pub blocks: f64,

}

/// Response for the getdescriptorinfo RPC call.
///
/// Analyses a descriptor.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetdescriptorinfoResponse {
    /// The descriptor in canonical form, without private keys. For a multipath descriptor, only the first will be returned.
    pub descriptor: String,
    /// All descriptors produced by expanding multipath derivation elements. Only if the provided descriptor specifies multipath derivation elements.
    pub multipath_expansion: Vec<String>,
    /// The checksum for the input descriptor
    pub checksum: String,
    /// Whether the descriptor is ranged
    pub isrange: bool,
    /// Whether the descriptor is solvable
    pub issolvable: bool,
    /// Whether the input descriptor contained at least one private key
    pub hasprivatekeys: bool,

}

/// Response for the getindexinfo RPC call.
///
/// Returns the status of one or all available indices currently running in the node.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetindexinfoResponse {
    /// The name of the index
    pub name: serde_json::Name,

}

/// Response for the signmessagewithprivkey RPC call.
///
/// Sign a message with the private key of an address
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct StringResponse {
    pub result: String,
}

/// Response for the validateaddress RPC call.
///
/// Return information about the given bitcoin address.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct ValidateaddressResponse {
    /// If the address is valid or not
    pub isvalid: bool,
    /// The bitcoin address validated
    pub address: String,
    /// The hex-encoded output script generated by the address
    pub scriptpubkey: Hex,
    /// If the key is a script
    pub isscript: bool,
    /// If the address is a witness address
    pub iswitness: bool,
    /// The version number of the witness program
    pub witness_version: f64,
    /// The hex value of the witness program
    pub witness_program: Hex,
    /// Error message, if any
    pub error: String,
    /// Indices of likely error locations in address, if known (e.g. Bech32 errors)
    pub error_locations: Vec<f64>,

}

/// Response for the verifymessage RPC call.
///
/// Verify a signed message.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct BooleanResponse {
    pub result: bool,
}

