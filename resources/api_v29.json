{
  "commands": {
    "abandontransaction": [
      {
        "arguments": [],
        "description": "abandontransaction \"txid\"\n\nMark in-wallet transaction <txid> as abandoned\nThis will mark this transaction and all its in-wallet descendants as abandoned which will allow\nfor their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.\nIt only works on transactions which are not included in a block and are not currently in the mempool.\nIt has no effect on transactions which are already abandoned.\n",
        "examples": "> bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "abandontransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "abortrescan": [
      {
        "arguments": [],
        "description": "abortrescan\n\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\nNote: Use \"getwalletinfo\" to query the scanning progress.\n",
        "examples": "\nImport a private key\n> bitcoin-cli importprivkey \"mykey\"\n\nAbort the running wallet rescan\n> bitcoin-cli abortrescan \n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"abortrescan\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "abortrescan",
        "results": [
          {
            "description": "true|false     Whether the abort was successful",
            "inner": [],
            "key_name": "",
            "type": "boolean"
          }
        ]
      }
    ],
    "addmultisigaddress": [
      {
        "arguments": [],
        "description": "addmultisigaddress nrequired [\"key\",...] ( \"label\" \"address_type\" )\n\nAdd an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\nEach key is a Bitcoin address or hex-encoded public key.\nThis functionality is only intended for use with non-watchonly addresses.\nSee `importaddress` for watchonly p2sh address support.\nIf 'label' is specified, assign address to that label.\nNote: This command is only compatible with legacy wallets.\n",
        "examples": "\nAdd a multisig address from 2 addresses\n> bitcoin-cli addmultisigaddress 2 \"[\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\",\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\"]\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\",\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\"]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "addmultisigaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "addnode": [
      {
        "arguments": [],
        "description": "addnode \"node\" \"command\" ( v2transport )\n\nAttempts to add or remove a node from the addnode list.\nOr try a connection to a node once.\nNodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\nfull nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\nAddnode connections are limited to 8 at a time and are counted separately from the -maxconnections limit.\n",
        "examples": "> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\" true]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "addnode",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "analyzepsbt": [
      {
        "arguments": [],
        "description": "analyzepsbt \"psbt\"\n\nAnalyzes and provides information about the current status of a PSBT and its inputs\n",
        "examples": "> bitcoin-cli analyzepsbt \"psbt\"",
        "name": "analyzepsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "backupwallet": [
      {
        "arguments": [],
        "description": "backupwallet \"destination\"\n\nSafely copies the current wallet file to the specified destination, which can either be a directory or a path with a filename.\n",
        "examples": "> bitcoin-cli backupwallet \"backup.dat\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "backupwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "bumpfee": [
      {
        "arguments": [],
        "description": "bumpfee \"txid\" ( options )\n\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\nAn opt-in RBF transaction with the given txid must be in the wallet.\nThe command will pay the additional fee by reducing change outputs or adding inputs when necessary.\nIt may add a new change output if one does not already exist.\nAll inputs in the original transaction will be included in the replacement transaction.\nThe command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\nBy default, the new fee will be calculated automatically using the estimatesmartfee RPC.\nThe user can specify a confirmation target for estimatesmartfee.\nAlternatively, the user can specify a fee rate in sat/vB for the new transaction.\nAt a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\nreturned by getnetworkinfo) to enter the node's mempool.\n* WARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB. *\n",
        "examples": "\nBump the fee, get the new transaction's txid\n> bitcoin-cli bumpfee <txid>",
        "name": "bumpfee",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "clearbanned": [
      {
        "arguments": [],
        "description": "clearbanned\n\nClear all banned IPs.\n",
        "examples": "> bitcoin-cli clearbanned \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"clearbanned\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "clearbanned",
        "results": [
          {
            "description": "null",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "combinepsbt": [
      {
        "arguments": [],
        "description": "combinepsbt [\"psbt\",...]\n\nCombine multiple partially signed Bitcoin transactions into one transaction.\nImplements the Combiner role.\n",
        "examples": "> bitcoin-cli combinepsbt '[\"mybase64_1\", \"mybase64_2\", \"mybase64_3\"]'",
        "name": "combinepsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "combinerawtransaction": [
      {
        "arguments": [],
        "description": "combinerawtransaction [\"hexstring\",...]\n\nCombine multiple partially signed transactions into one transaction.\nThe combined transaction may be another partially signed transaction or a \nfully signed transaction.\n",
        "examples": "> bitcoin-cli combinerawtransaction '[\"myhex1\", \"myhex2\", \"myhex3\"]'",
        "name": "combinerawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "converttopsbt": [
      {
        "arguments": [],
        "description": "converttopsbt \"hexstring\" ( permitsigdata iswitness )\n\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\ncreatepsbt and walletcreatefundedpsbt should be used for new applications.\n",
        "examples": "\nCreate a transaction\n> bitcoin-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"\n\nConvert the transaction to a PSBT\n> bitcoin-cli converttopsbt \"rawtransaction\"",
        "name": "converttopsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "createmultisig": [
      {
        "arguments": [],
        "description": "createmultisig nrequired [\"key\",...] ( \"address_type\" )\n\nCreates a multi-signature address with n signature of m keys required.\nIt returns a json object with the address and redeemScript.\n",
        "examples": "\nCreate a multisig address from 2 public keys\n> bitcoin-cli createmultisig 2 \"[\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\",\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\"]\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createmultisig\", \"params\": [2, [\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\",\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "createmultisig",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "createpsbt": [
      {
        "arguments": [],
        "description": "createpsbt [{\"txid\":\"hex\",\"vout\":n,\"sequence\":n},...] [{\"address\":amount,...},{\"data\":\"hex\"},...] ( locktime replaceable )\n\nCreates a transaction in the Partially Signed Transaction format.\nImplements the Creator role.\n",
        "examples": "> bitcoin-cli createpsbt \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"",
        "name": "createpsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "createrawtransaction": [
      {
        "arguments": [],
        "description": "createrawtransaction [{\"txid\":\"hex\",\"vout\":n,\"sequence\":n},...] [{\"address\":amount,...},{\"data\":\"hex\"},...] ( locktime replaceable )\n\nCreate a transaction spending the given inputs and creating new outputs.\nOutputs can be addresses or data.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.\n",
        "examples": "> bitcoin-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"address\\\":0.01}]\"\n> bitcoin-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"[{\\\"address\\\":0.01}]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"[{\\\"data\\\":\\\"00010203\\\"}]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "createrawtransaction",
        "results": [
          {
            "description": "Note that the transaction's inputs are not signed, and",
            "inner": [
              {
                "description": "it is not stored in the wallet or transmitted to the network.",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "createwallet": [
      {
        "arguments": [],
        "description": "createwallet \"wallet_name\" ( disable_private_keys blank \"passphrase\" avoid_reuse descriptors load_on_startup external_signer )\n\nCreates and loads a new wallet.\n",
        "examples": "> bitcoin-cli createwallet \"testwallet\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createwallet\", \"params\": [\"testwallet\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli -named createwallet wallet_name=descriptors avoid_reuse=true descriptors=true load_on_startup=true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createwallet\", \"params\": {\"wallet_name\":\"descriptors\",\"avoid_reuse\":true,\"descriptors\":true,\"load_on_startup\":true}}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "createwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "createwalletdescriptor": [
      {
        "arguments": [],
        "description": "createwalletdescriptor \"type\" ( {\"internal\":bool,\"hdkey\":\"str\",...} )\n\nCreates the wallet's descriptor for the given address type. The address type must be one that the wallet does not already have a descriptor for.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "> bitcoin-cli createwalletdescriptor bech32m\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createwalletdescriptor\", \"params\": [bech32m]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "createwalletdescriptor",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "decodepsbt": [
      {
        "arguments": [],
        "description": "decodepsbt \"psbt\"\n\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\n",
        "examples": "> bitcoin-cli decodepsbt \"psbt\"",
        "name": "decodepsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "decoderawtransaction": [
      {
        "arguments": [],
        "description": "decoderawtransaction \"hexstring\" ( iswitness )\n\nReturn a JSON object representing the serialized, hex-encoded transaction.\n",
        "examples": "> bitcoin-cli decoderawtransaction \"hexstring\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "decoderawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "decodescript": [
      {
        "arguments": [],
        "description": "decodescript \"hexstring\"\n\nDecode a hex-encoded script.\n",
        "examples": "> bitcoin-cli decodescript \"hexstring\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "decodescript",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "deriveaddresses": [
      {
        "arguments": [],
        "description": "deriveaddresses \"descriptor\" ( range )\n\nDerives one or more addresses corresponding to an output descriptor.\nExamples of output descriptors are:\n    pkh(<pubkey>)                                     P2PKH outputs for the given pubkey\n    wpkh(<pubkey>)                                    Native segwit P2PKH outputs for the given pubkey\n    sh(multi(<n>,<pubkey>,<pubkey>,...))              P2SH-multisig outputs for the given threshold and pubkeys\n    raw(<hex script>)                                 Outputs whose output script equals the specified hex-encoded bytes\n    tr(<pubkey>,multi_a(<n>,<pubkey>,<pubkey>,...))   P2TR-multisig outputs for the given threshold and pubkeys\n\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\nor more path elements separated by \"/\", where \"h\" represents a hardened child key.\nFor more information on output descriptors, see the documentation in the doc/descriptors.md file.\n",
        "examples": "First three native segwit receive addresses\n> bitcoin-cli deriveaddresses \"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#cjjspncu\" \"[0,2]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"deriveaddresses\", \"params\": [\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#cjjspncu\", \"[0,2]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "deriveaddresses",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "descriptorprocesspsbt": [
      {
        "arguments": [],
        "description": "descriptorprocesspsbt \"psbt\" [\"\",{\"desc\":\"str\",\"range\":n or [n,n]},...] ( \"sighashtype\" bip32derivs finalize )\n\nUpdate all segwit inputs in a PSBT with information from output descriptors, the UTXO set or the mempool. \nThen, sign the inputs we are able to with information from the output descriptors.\n",
        "examples": "> bitcoin-cli descriptorprocesspsbt \"psbt\" \"[\\\"descriptor1\\\", \\\"descriptor2\\\"]\"\n> bitcoin-cli descriptorprocesspsbt \"psbt\" \"[{\\\"desc\\\":\\\"mydescriptor\\\", \\\"range\\\":21}]\"",
        "name": "descriptorprocesspsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "disconnectnode": [
      {
        "arguments": [],
        "description": "disconnectnode ( \"address\" nodeid )\n\nImmediately disconnects from the specified peer node.\n\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\n\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\n",
        "examples": "> bitcoin-cli disconnectnode \"192.168.0.6:8333\"\n> bitcoin-cli disconnectnode \"\" 1\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"disconnectnode\", \"params\": [\"\", 1]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "disconnectnode",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "dumpprivkey": [
      {
        "arguments": [],
        "description": "dumpprivkey \"address\"\n\nReveals the private key corresponding to 'address'.\nThen the importprivkey can be used with this output\nNote: This command is only compatible with legacy wallets.\n",
        "examples": "> bitcoin-cli dumpprivkey \"myaddress\"\n> bitcoin-cli importprivkey \"mykey\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "dumpprivkey",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "dumptxoutset": [
      {
        "arguments": [],
        "description": "dumptxoutset \"path\" ( \"type\" {\"rollback\":n,...} )\n\nWrite the serialized UTXO set to a file. This can be used in loadtxoutset afterwards if this snapshot height is supported in the chainparams as well.\n\nUnless the \"latest\" type is requested, the node will roll back to the requested height and network activity will be suspended during this process. Because of this it is discouraged to interact with the node in any other way during the execution of this call to avoid inconsistent results and race conditions, particularly RPCs that interact with blockstorage.\n\nThis call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\n",
        "examples": "> bitcoin-cli -rpcclienttimeout=0 dumptxoutset utxo.dat latest\n> bitcoin-cli -rpcclienttimeout=0 dumptxoutset utxo.dat rollback\n> bitcoin-cli -rpcclienttimeout=0 -named dumptxoutset utxo.dat rollback=853456",
        "name": "dumptxoutset",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "dumpwallet": [
      {
        "arguments": [],
        "description": "dumpwallet \"filename\"\n\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\nImported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\nNote that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\nonly backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\nNote: This command is only compatible with legacy wallets.\n",
        "examples": "> bitcoin-cli dumpwallet \"test\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "dumpwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "encryptwallet": [
      {
        "arguments": [],
        "description": "encryptwallet \"passphrase\"\n\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\nAfter this, any calls that interact with private keys such as sending or signing \nwill require the passphrase to be set prior the making these calls.\nUse the walletpassphrase call for this, and then walletlock call.\nIf the wallet is already encrypted, use the walletpassphrasechange call.\n** IMPORTANT **\nFor security reasons, the encryption process will generate a new HD seed, resulting\nin the creation of a fresh set of active descriptors. Therefore, it is crucial to\nsecurely back up the newly generated wallet file using the backupwallet RPC.\n",
        "examples": "\nEncrypt your wallet\n> bitcoin-cli encryptwallet \"my pass phrase\"\n\nNow set the passphrase to use the wallet, such as for signing or sending bitcoin\n> bitcoin-cli walletpassphrase \"my pass phrase\"\n\nNow we can do something like sign\n> bitcoin-cli signmessage \"address\" \"test message\"\n\nNow lock the wallet again by removing the passphrase\n> bitcoin-cli walletlock \n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "encryptwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "enumeratesigners": [
      {
        "arguments": [],
        "description": "enumeratesigners\n\nReturns a list of external signers from -signer.\n",
        "examples": "> bitcoin-cli enumeratesigners \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"enumeratesigners\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "enumeratesigners",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "[                 (json array)",
                "inner": [
                  {
                    "description": "{",
                    "inner": [
                      {
                        "description": "\"hex\",     Master key fingerprint",
                        "inner": [
                          {
                            "description": "\"str\"             Device name",
                            "inner": [],
                            "key_name": "name",
                            "type": "string"
                          }
                        ],
                        "key_name": "fingerprint",
                        "type": "string"
                      },
                      {
                        "description": "},",
                        "inner": [
                          {
                            "description": "...",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "object"
                  },
                  {
                    "description": "]",
                    "inner": [],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "signers",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "estimatesmartfee": [
      {
        "arguments": [],
        "description": "estimatesmartfee conf_target ( \"estimate_mode\" )\n\nEstimates the approximate fee per kilobyte needed for a transaction to begin\nconfirmation within conf_target blocks if possible and return the number of blocks\nfor which the estimate is valid. Uses virtual transaction size as defined\nin BIP 141 (witness data is discounted).\n",
        "examples": "> bitcoin-cli estimatesmartfee 6\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"estimatesmartfee\", \"params\": [6]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "estimatesmartfee",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "finalizepsbt": [
      {
        "arguments": [],
        "description": "finalizepsbt \"psbt\" ( extract )\n\nFinalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\nnetwork serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\ncreated which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\nImplements the Finalizer and Extractor roles.\n",
        "examples": "> bitcoin-cli finalizepsbt \"psbt\"",
        "name": "finalizepsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "fundrawtransaction": [
      {
        "arguments": [],
        "description": "fundrawtransaction \"hexstring\" ( options iswitness )\n\nIf the transaction has no inputs, they will be automatically selected to meet its out value.\nIt will add at most one change output to the outputs.\nNo existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.\nNote that inputs which were signed may need to be resigned after completion since in/outputs have been added.\nThe inputs added will not be signed, use signrawtransactionwithkey\nor signrawtransactionwithwallet for that.\nAll existing inputs must either have their previous output transaction be in the wallet\nor be in the UTXO set. Solving data must be provided for non-wallet inputs.\nNote that all inputs selected must be of standard form and P2SH scripts must be\nin the wallet using importaddress or addmultisigaddress (to calculate fees).\nYou can see whether this is the case by checking the \"solvable\" field in the listunspent output.\nOnly pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\n",
        "examples": "\nCreate a transaction with no inputs\n> bitcoin-cli createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n\nAdd sufficient unsigned inputs to meet the output value\n> bitcoin-cli fundrawtransaction \"rawtransactionhex\"\n\nSign the transaction\n> bitcoin-cli signrawtransactionwithwallet \"fundedtransactionhex\"\n\nSend the transaction\n> bitcoin-cli sendrawtransaction \"signedtransactionhex\"",
        "name": "fundrawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getaddednodeinfo": [
      {
        "arguments": [],
        "description": "getaddednodeinfo ( \"node\" )\n\nReturns information about the given added node, or all added nodes\n(note that onetry addnodes are not listed here)\n",
        "examples": "> bitcoin-cli getaddednodeinfo \"192.168.0.201\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [\"192.168.0.201\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getaddednodeinfo",
        "results": [
          {
            "description": "(note that onetry addnodes are not listed here)",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getaddressesbylabel": [
      {
        "arguments": [],
        "description": "getaddressesbylabel \"label\"\n\nReturns the list of addresses assigned the specified label.\n",
        "examples": "> bitcoin-cli getaddressesbylabel \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getaddressesbylabel\", \"params\": [\"tabby\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getaddressesbylabel",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getaddressinfo": [
      {
        "arguments": [],
        "description": "getaddressinfo \"address\"\n\nReturn information about the given bitcoin address.\nSome of the information will only be present if the address is in the active wallet.\n",
        "examples": "> bitcoin-cli getaddressinfo \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getaddressinfo\", \"params\": [\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getaddressinfo",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getaddrmaninfo": [
      {
        "arguments": [],
        "description": "getaddrmaninfo\n\nProvides information about the node's address manager by returning the number of addresses in the `new` and `tried` tables and their sum for all networks.\n",
        "examples": "> bitcoin-cli getaddrmaninfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getaddrmaninfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getaddrmaninfo",
        "results": [
          {
            "description": "{                    json object with network type as keys",
            "inner": [
              {
                "description": "{      the network (ipv4, ipv6, onion, i2p, cjdns, all_networks)",
                "inner": [
                  {
                    "description": "n,       number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.",
                    "inner": [
                      {
                        "description": "n,     number of addresses in the tried table, which represent peers the node has successfully connected to in the past.",
                        "inner": [
                          {
                            "description": "n      total number of addresses in both new/tried tables",
                            "inner": [],
                            "key_name": "total",
                            "type": "number"
                          }
                        ],
                        "key_name": "tried",
                        "type": "number"
                      }
                    ],
                    "key_name": "new",
                    "type": "number"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "network",
                "type": "object"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getbalance": [
      {
        "arguments": [],
        "description": "getbalance ( \"dummy\" minconf include_watchonly avoid_reuse )\n\nReturns the total available balance.\nThe available balance is what the wallet considers currently spendable, and is\nthus affected by options which limit spendability such as -spendzeroconfchange.\n",
        "examples": "\nThe total amount in the wallet with 0 or more confirmations\n> bitcoin-cli getbalance \n\nThe total amount in the wallet with at least 6 confirmations\n> bitcoin-cli getbalance \"*\" 6\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getbalance",
        "results": [
          {
            "description": "The available balance is what the wallet considers currently spendable, and is",
            "inner": [
              {
                "description": "thus affected by options which limit spendability such as -spendzeroconfchange.",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getbalances": [
      {
        "arguments": [],
        "description": "getbalances\n\nReturns an object with all balances in BTC.\n",
        "examples": "> bitcoin-cli getbalances \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getbalances\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getbalances",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "{                     balances from outputs that the wallet can sign",
                "inner": [
                  {
                    "description": "n,               trusted balance (outputs created by the wallet or confirmed outputs)",
                    "inner": [
                      {
                        "description": "n,     untrusted pending balance (outputs created by others that are in the mempool)",
                        "inner": [
                          {
                            "description": "n,              balance from immature coinbase outputs",
                            "inner": [
                              {
                                "description": "n                  (numeric, optional) (only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)",
                                "inner": [],
                                "key_name": "used",
                                "type": "string"
                              }
                            ],
                            "key_name": "immature",
                            "type": "number"
                          }
                        ],
                        "key_name": "untrusted_pending",
                        "type": "number"
                      }
                    ],
                    "key_name": "trusted",
                    "type": "number"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "{               (json object, optional) watchonly balances (not present if wallet does not watch anything)",
                        "inner": [
                          {
                            "description": "n,               trusted balance (outputs created by the wallet or confirmed outputs)",
                            "inner": [
                              {
                                "description": "n,     untrusted pending balance (outputs created by others that are in the mempool)",
                                "inner": [
                                  {
                                    "description": "n               balance from immature coinbase outputs",
                                    "inner": [],
                                    "key_name": "immature",
                                    "type": "number"
                                  }
                                ],
                                "key_name": "untrusted_pending",
                                "type": "number"
                              }
                            ],
                            "key_name": "trusted",
                            "type": "number"
                          },
                          {
                            "description": "},",
                            "inner": [
                              {
                                "description": "{       hash and height of the block this information was generated on",
                                "inner": [
                                  {
                                    "description": "\"hex\",              hash of the block this information was generated on",
                                    "inner": [
                                      {
                                        "description": "n                 height of the block this information was generated on",
                                        "inner": [],
                                        "key_name": "height",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "hash",
                                    "type": "string"
                                  },
                                  {
                                    "description": "}",
                                    "inner": [],
                                    "key_name": "",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "lastprocessedblock",
                                "type": "object"
                              }
                            ],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "watchonly",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "mine",
                "type": "object"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getbestblockhash": [
      {
        "arguments": [],
        "description": "getbestblockhash\n\nReturns the hash of the best (tip) block in the most-work fully-validated chain.\n",
        "examples": "> bitcoin-cli getbestblockhash \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getbestblockhash\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getbestblockhash",
        "results": [
          {
            "description": "\"hex\"     the block hash, hex-encoded",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getblock": [
      {
        "arguments": [],
        "description": "getblock \"blockhash\" ( verbosity )\n\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\nIf verbosity is 1, returns an Object with information about block <hash>.\nIf verbosity is 2, returns an Object with information about block <hash> and information about each transaction.\nIf verbosity is 3, returns an Object with information about block <hash> and information about each transaction, including prevout information for inputs (only for unpruned blocks in the current best chain).\n",
        "examples": "> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getblock",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getblockchaininfo": [
      {
        "arguments": [],
        "description": "getblockchaininfo\n\nReturns an object containing various state info regarding blockchain processing.\n",
        "examples": "> bitcoin-cli getblockchaininfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockchaininfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getblockchaininfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "\"str\",                         current network name (main, test, testnet4, signet, regtest)",
                "inner": [
                  {
                    "description": "n,                            the height of the most-work fully-validated chain. The genesis block has height 0",
                    "inner": [
                      {
                        "description": "n,                           the current number of headers we have validated",
                        "inner": [
                          {
                            "description": "\"str\",                 the hash of the currently best block",
                            "inner": [
                              {
                                "description": "\"hex\",                          nBits: compact representation of the block difficulty target",
                                "inner": [
                                  {
                                    "description": "\"hex\",                        The difficulty target",
                                    "inner": [
                                      {
                                        "description": "n,                        the current difficulty",
                                        "inner": [
                                          {
                                            "description": "xxx,                            The block time expressed in UNIX epoch time",
                                            "inner": [
                                              {
                                                "description": "xxx,                      The median block time expressed in UNIX epoch time",
                                                "inner": [
                                                  {
                                                    "description": "n,              estimate of verification progress [0..1]",
                                                    "inner": [
                                                      {
                                                        "description": "true|false,     (debug information) estimate of whether this node is in Initial Block Download mode",
                                                        "inner": [
                                                          {
                                                            "description": "\"hex\",                     total amount of work in active chain, in hexadecimal",
                                                            "inner": [
                                                              {
                                                                "description": "n,                      the estimated size of the block and undo files on disk",
                                                                "inner": [
                                                                  {
                                                                    "description": "true|false,                   if the blocks are subject to pruning",
                                                                    "inner": [
                                                                      {
                                                                        "description": "n,                      (numeric, optional) height of the last block pruned, plus one (only present if pruning is enabled)",
                                                                        "inner": [
                                                                          {
                                                                            "description": "true|false,       (boolean, optional) whether automatic pruning is enabled (only present if pruning is enabled)",
                                                                            "inner": [
                                                                              {
                                                                                "description": "n,                (numeric, optional) the target size used by pruning (only present if automatic pruning is enabled)",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "\"hex\",             (string, optional) the block challenge (aka. block script), in hexadecimal (only present if the current network is a signet)",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "[                          (json array) any network and blockchain warnings (run with `-deprecatedrpc=warnings` to return the latest warning as a single string)",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "\"str\",                                 warning",
                                                                                            "inner": [
                                                                                              {
                                                                                                "description": "...",
                                                                                                "inner": [],
                                                                                                "key_name": "",
                                                                                                "type": "string"
                                                                                              }
                                                                                            ],
                                                                                            "key_name": "",
                                                                                            "type": "string"
                                                                                          },
                                                                                          {
                                                                                            "description": "]",
                                                                                            "inner": [],
                                                                                            "key_name": "",
                                                                                            "type": "string"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "warnings",
                                                                                        "type": "string"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "signet_challenge",
                                                                                    "type": "string"
                                                                                  }
                                                                                ],
                                                                                "key_name": "prune_target_size",
                                                                                "type": "string"
                                                                              }
                                                                            ],
                                                                            "key_name": "automatic_pruning",
                                                                            "type": "string"
                                                                          }
                                                                        ],
                                                                        "key_name": "pruneheight",
                                                                        "type": "string"
                                                                      }
                                                                    ],
                                                                    "key_name": "pruned",
                                                                    "type": "boolean"
                                                                  }
                                                                ],
                                                                "key_name": "size_on_disk",
                                                                "type": "number"
                                                              }
                                                            ],
                                                            "key_name": "chainwork",
                                                            "type": "string"
                                                          }
                                                        ],
                                                        "key_name": "initialblockdownload",
                                                        "type": "boolean"
                                                      }
                                                    ],
                                                    "key_name": "verificationprogress",
                                                    "type": "number"
                                                  }
                                                ],
                                                "key_name": "mediantime",
                                                "type": "number"
                                              }
                                            ],
                                            "key_name": "time",
                                            "type": "number"
                                          }
                                        ],
                                        "key_name": "difficulty",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "target",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "bits",
                                "type": "string"
                              }
                            ],
                            "key_name": "bestblockhash",
                            "type": "string"
                          }
                        ],
                        "key_name": "headers",
                        "type": "number"
                      }
                    ],
                    "key_name": "blocks",
                    "type": "number"
                  }
                ],
                "key_name": "chain",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getblockcount": [
      {
        "arguments": [],
        "description": "getblockcount\n\nReturns the height of the most-work fully-validated chain.\nThe genesis block has height 0.\n",
        "examples": "> bitcoin-cli getblockcount \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockcount\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getblockcount",
        "results": [
          {
            "description": "The genesis block has height 0.",
            "inner": [
              {
                "description": "n     The current block count",
                "inner": [],
                "key_name": "",
                "type": "number"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getblockfilter": [
      {
        "arguments": [],
        "description": "getblockfilter \"blockhash\" ( \"filtertype\" )\n\nRetrieve a BIP 157 content filter for a particular block.\n",
        "examples": "> bitcoin-cli getblockfilter \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\" \"basic\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockfilter\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\", \"basic\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getblockfilter",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getblockfrompeer": [
      {
        "arguments": [],
        "description": "getblockfrompeer \"blockhash\" peer_id\n\nAttempt to fetch block from a given peer.\n\nWe must have the header for this block, e.g. using submitheader.\nThe block will not have any undo data which can limit the usage of the block data in a context where the undo data is needed.\nSubsequent calls for the same block may cause the response from the previous peer to be ignored.\nPeers generally ignore requests for a stale block that they never fully verified, or one that is more than a month old.\nWhen a peer does not respond with a block, we will disconnect.\nNote: The block could be re-pruned as soon as it is received.\n\nReturns an empty JSON object if the request was successfully scheduled.\n",
        "examples": "> bitcoin-cli getblockfrompeer \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\" 0\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockfrompeer\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\" 0]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getblockfrompeer",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getblockhash": [
      {
        "arguments": [],
        "description": "getblockhash height\n\nReturns hash of block in best-block-chain at height provided.\n",
        "examples": "> bitcoin-cli getblockhash 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockhash\", \"params\": [1000]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getblockhash",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getblockheader": [
      {
        "arguments": [],
        "description": "getblockheader \"blockhash\" ( verbose )\n\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.\n",
        "examples": "> bitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getblockheader",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getblockstats": [
      {
        "arguments": [],
        "description": "getblockstats hash_or_height ( stats )\n\nCompute per block statistics for a given window. All amounts are in satoshis.\nIt won't work for some heights with pruning.\n",
        "examples": "> bitcoin-cli getblockstats '\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"' '[\"minfeerate\",\"avgfeerate\"]'\n> bitcoin-cli getblockstats 1000 '[\"minfeerate\",\"avgfeerate\"]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockstats\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\", [\"minfeerate\",\"avgfeerate\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockstats\", \"params\": [1000, [\"minfeerate\",\"avgfeerate\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getblockstats",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getblocktemplate": [
      {
        "arguments": [],
        "description": "getblocktemplate {\"mode\":\"str\",\"capabilities\":[\"str\",...],\"rules\":[\"segwit\",\"str\",...],\"longpollid\":\"str\",\"data\":\"hex\"}\n\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\nIt returns data needed to construct a block to work on.\nFor full specification, see BIPs 22, 23, 9, and 145:\n    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\n    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\n    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\n    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\n",
        "examples": "> bitcoin-cli getblocktemplate '{\"rules\": [\"segwit\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblocktemplate\", \"params\": [{\"rules\": [\"segwit\"]}]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getblocktemplate",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getchainstates": [
      {
        "arguments": [],
        "description": "getchainstates\n\nReturn information about chainstates.\n",
        "examples": "> bitcoin-cli getchainstates \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getchainstates\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getchainstates",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "n,                        the number of headers seen so far",
                "inner": [
                  {
                    "description": "[                    (json array) list of the chainstates ordered by work, with the most-work (active) chainstate last",
                    "inner": [
                      {
                        "description": "{",
                        "inner": [
                          {
                            "description": "n,                     number of blocks in this chainstate",
                            "inner": [
                              {
                                "description": "\"hex\",          blockhash of the tip",
                                "inner": [
                                  {
                                    "description": "\"hex\",                   nBits: compact representation of the block difficulty target",
                                    "inner": [
                                      {
                                        "description": "\"hex\",                 The difficulty target",
                                        "inner": [
                                          {
                                            "description": "n,                 difficulty of the tip",
                                            "inner": [
                                              {
                                                "description": "n,       progress towards the network tip",
                                                "inner": [
                                                  {
                                                    "description": "\"hex\",    (string, optional) the base block of the snapshot this chainstate is based on, if any",
                                                    "inner": [
                                                      {
                                                        "description": "n,       size of the coinsdb cache",
                                                        "inner": [
                                                          {
                                                            "description": "n,      size of the coinstip cache",
                                                            "inner": [
                                                              {
                                                                "description": "true|false          whether the chainstate is fully validated. True if all blocks in the chainstate were validated, false if the chain is based on a snapshot and the snapshot has not yet been validated.",
                                                                "inner": [],
                                                                "key_name": "validated",
                                                                "type": "boolean"
                                                              }
                                                            ],
                                                            "key_name": "coins_tip_cache_bytes",
                                                            "type": "number"
                                                          }
                                                        ],
                                                        "key_name": "coins_db_cache_bytes",
                                                        "type": "number"
                                                      }
                                                    ],
                                                    "key_name": "snapshot_blockhash",
                                                    "type": "string"
                                                  }
                                                ],
                                                "key_name": "verificationprogress",
                                                "type": "number"
                                              }
                                            ],
                                            "key_name": "difficulty",
                                            "type": "number"
                                          }
                                        ],
                                        "key_name": "target",
                                        "type": "string"
                                      }
                                    ],
                                    "key_name": "bits",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "bestblockhash",
                                "type": "string"
                              }
                            ],
                            "key_name": "blocks",
                            "type": "number"
                          },
                          {
                            "description": "},",
                            "inner": [
                              {
                                "description": "...",
                                "inner": [],
                                "key_name": "",
                                "type": "string"
                              }
                            ],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "object"
                      },
                      {
                        "description": "]",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "chainstates",
                    "type": "string"
                  }
                ],
                "key_name": "headers",
                "type": "number"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getchaintips": [
      {
        "arguments": [],
        "description": "getchaintips\n\nReturn information about all known tips in the block tree, including the main chain as well as orphaned branches.\n",
        "examples": "> bitcoin-cli getchaintips \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getchaintips\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getchaintips",
        "results": [
          {
            "description": "[                        (json array)",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "n,         height of the chain tip",
                    "inner": [
                      {
                        "description": "\"hex\",       block hash of the tip",
                        "inner": [
                          {
                            "description": "n,      zero for main chain, otherwise length of branch connecting the tip to the main chain",
                            "inner": [
                              {
                                "description": "\"str\"      status of the chain, \"active\" for the main chain",
                                "inner": [
                                  {
                                    "description": "Possible values for status:",
                                    "inner": [],
                                    "key_name": "",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "status",
                                "type": "string"
                              }
                            ],
                            "key_name": "branchlen",
                            "type": "number"
                          }
                        ],
                        "key_name": "hash",
                        "type": "string"
                      }
                    ],
                    "key_name": "height",
                    "type": "number"
                  }
                ],
                "key_name": "",
                "type": "object"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getchaintxstats": [
      {
        "arguments": [],
        "description": "getchaintxstats ( nblocks \"blockhash\" )\n\nCompute statistics about the total number and rate of transactions in the chain.\n",
        "examples": "> bitcoin-cli getchaintxstats \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getchaintxstats",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getconnectioncount": [
      {
        "arguments": [],
        "description": "getconnectioncount\n\nReturns the number of connections to other nodes.\n",
        "examples": "> bitcoin-cli getconnectioncount \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getconnectioncount\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getconnectioncount",
        "results": [
          {
            "description": "n     The connection count",
            "inner": [],
            "key_name": "",
            "type": "number"
          }
        ]
      }
    ],
    "getdeploymentinfo": [
      {
        "arguments": [],
        "description": "getdeploymentinfo ( \"blockhash\" )\n\nReturns an object containing various state info regarding deployments of consensus changes.\n",
        "examples": "> bitcoin-cli getdeploymentinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getdeploymentinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getdeploymentinfo",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getdescriptoractivity": [
      {
        "arguments": [],
        "description": "getdescriptoractivity ( [\"blockhash\",...] [scanobjects,...] include_mempool )\n\nGet spend and receive activity associated with a set of descriptors for a set of blocks. This command pairs well with the `relevant_blocks` output of `scanblocks()`.\nThis call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\n",
        "examples": "> bitcoin-cli getdescriptoractivity '[\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\"]' '[\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\"]'",
        "name": "getdescriptoractivity",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getdescriptorinfo": [
      {
        "arguments": [],
        "description": "getdescriptorinfo \"descriptor\"\n\nAnalyses a descriptor.\n",
        "examples": "Analyse a descriptor\n> bitcoin-cli getdescriptorinfo \"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getdescriptorinfo\", \"params\": [\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getdescriptorinfo",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getdifficulty": [
      {
        "arguments": [],
        "description": "getdifficulty\n\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\n",
        "examples": "> bitcoin-cli getdifficulty \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getdifficulty\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getdifficulty",
        "results": [
          {
            "description": "n     the proof-of-work difficulty as a multiple of the minimum difficulty.",
            "inner": [],
            "key_name": "",
            "type": "number"
          }
        ]
      }
    ],
    "gethdkeys": [
      {
        "arguments": [],
        "description": "gethdkeys ( {\"active_only\":bool,\"private\":bool,...} )\n\nList all BIP 32 HD keys in the wallet and which descriptors use them.\n",
        "examples": "> bitcoin-cli gethdkeys \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gethdkeys\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli -named gethdkeys active_only=true private=true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gethdkeys\", \"params\": {\"active_only\":\"true\",\"private\":\"true\"}}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "gethdkeys",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getindexinfo": [
      {
        "arguments": [],
        "description": "getindexinfo ( \"index_name\" )\n\nReturns the status of one or all available indices currently running in the node.\n",
        "examples": "> bitcoin-cli getindexinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getindexinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli getindexinfo txindex\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getindexinfo\", \"params\": [txindex]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getindexinfo",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getmemoryinfo": [
      {
        "arguments": [],
        "description": "getmemoryinfo ( \"mode\" )\n\nReturns an object containing information about memory usage.\n",
        "examples": "> bitcoin-cli getmemoryinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmemoryinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getmemoryinfo",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getmempoolancestors": [
      {
        "arguments": [],
        "description": "getmempoolancestors \"txid\" ( verbose )\n\nIf txid is in the mempool, returns all in-mempool ancestors.\n",
        "examples": "> bitcoin-cli getmempoolancestors \"mytxid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getmempoolancestors",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getmempooldescendants": [
      {
        "arguments": [],
        "description": "getmempooldescendants \"txid\" ( verbose )\n\nIf txid is in the mempool, returns all in-mempool descendants.\n",
        "examples": "> bitcoin-cli getmempooldescendants \"mytxid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getmempooldescendants",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getmempoolentry": [
      {
        "arguments": [],
        "description": "getmempoolentry \"txid\"\n\nReturns mempool data for given transaction\n",
        "examples": "> bitcoin-cli getmempoolentry \"mytxid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getmempoolentry",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getmempoolinfo": [
      {
        "arguments": [],
        "description": "getmempoolinfo\n\nReturns details on the active state of the TX memory pool.\n",
        "examples": "> bitcoin-cli getmempoolinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getmempoolinfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "true|false,         True if the initial load attempt of the persisted mempool finished",
                "inner": [
                  {
                    "description": "n,                    Current tx count",
                    "inner": [
                      {
                        "description": "n,                   Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted",
                        "inner": [
                          {
                            "description": "n,                   Total memory usage for the mempool",
                            "inner": [
                              {
                                "description": "n,               Total fees for the mempool in BTC, ignoring modified fees through prioritisetransaction",
                                "inner": [
                                  {
                                    "description": "n,              Maximum memory usage for the mempool",
                                    "inner": [
                                      {
                                        "description": "n,           Minimum fee rate in BTC/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee",
                                        "inner": [
                                          {
                                            "description": "n,           Current minimum relay fee for transactions",
                                            "inner": [
                                              {
                                                "description": "n,     minimum fee rate increment for mempool limiting or replacement in BTC/kvB",
                                                "inner": [
                                                  {
                                                    "description": "n,        Current number of transactions that haven't passed initial broadcast yet",
                                                    "inner": [
                                                      {
                                                        "description": "true|false         True if the mempool accepts RBF without replaceability signaling inspection (DEPRECATED)",
                                                        "inner": [],
                                                        "key_name": "fullrbf",
                                                        "type": "boolean"
                                                      }
                                                    ],
                                                    "key_name": "unbroadcastcount",
                                                    "type": "number"
                                                  }
                                                ],
                                                "key_name": "incrementalrelayfee",
                                                "type": "number"
                                              }
                                            ],
                                            "key_name": "minrelaytxfee",
                                            "type": "number"
                                          }
                                        ],
                                        "key_name": "mempoolminfee",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "maxmempool",
                                    "type": "number"
                                  }
                                ],
                                "key_name": "total_fee",
                                "type": "number"
                              }
                            ],
                            "key_name": "usage",
                            "type": "number"
                          }
                        ],
                        "key_name": "bytes",
                        "type": "number"
                      }
                    ],
                    "key_name": "size",
                    "type": "number"
                  }
                ],
                "key_name": "loaded",
                "type": "boolean"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getmininginfo": [
      {
        "arguments": [],
        "description": "getmininginfo\n\nReturns a json object containing mining-related information.\n",
        "examples": "> bitcoin-cli getmininginfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmininginfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getmininginfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "n,                   The current block",
                "inner": [
                  {
                    "description": "n,      (numeric, optional) The block weight (including reserved weight for block header, txs count and coinbase tx) of the last assembled block (only present if a block was ever assembled)",
                    "inner": [
                      {
                        "description": "n,          (numeric, optional) The number of block transactions (excluding coinbase) of the last assembled block (only present if a block was ever assembled)",
                        "inner": [
                          {
                            "description": "\"hex\",                 The current nBits, compact representation of the block difficulty target",
                            "inner": [
                              {
                                "description": "n,               The current difficulty",
                                "inner": [
                                  {
                                    "description": "\"hex\",               The current target",
                                    "inner": [
                                      {
                                        "description": "n,            The network hashes per second",
                                        "inner": [
                                          {
                                            "description": "n,                 The size of the mempool",
                                            "inner": [
                                              {
                                                "description": "\"str\",                current network name (main, test, testnet4, signet, regtest)",
                                                "inner": [
                                                  {
                                                    "description": "\"hex\",    (string, optional) The block challenge (aka. block script), in hexadecimal (only present if the current network is a signet)",
                                                    "inner": [
                                                      {
                                                        "description": "{                      The next block",
                                                        "inner": [
                                                          {
                                                            "description": "n,                 The next height",
                                                            "inner": [
                                                              {
                                                                "description": "\"hex\",               The next target nBits",
                                                                "inner": [
                                                                  {
                                                                    "description": "n,             The next difficulty",
                                                                    "inner": [
                                                                      {
                                                                        "description": "\"hex\"              The next target",
                                                                        "inner": [],
                                                                        "key_name": "target",
                                                                        "type": "string"
                                                                      }
                                                                    ],
                                                                    "key_name": "difficulty",
                                                                    "type": "number"
                                                                  }
                                                                ],
                                                                "key_name": "bits",
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "key_name": "height",
                                                            "type": "number"
                                                          },
                                                          {
                                                            "description": "},",
                                                            "inner": [
                                                              {
                                                                "description": "[                 (json array) any network and blockchain warnings (run with `-deprecatedrpc=warnings` to return the latest warning as a single string)",
                                                                "inner": [
                                                                  {
                                                                    "description": "\"str\",                        warning",
                                                                    "inner": [
                                                                      {
                                                                        "description": "...",
                                                                        "inner": [],
                                                                        "key_name": "",
                                                                        "type": "string"
                                                                      }
                                                                    ],
                                                                    "key_name": "",
                                                                    "type": "string"
                                                                  },
                                                                  {
                                                                    "description": "]",
                                                                    "inner": [],
                                                                    "key_name": "",
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "key_name": "warnings",
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "key_name": "",
                                                            "type": "string"
                                                          }
                                                        ],
                                                        "key_name": "next",
                                                        "type": "object"
                                                      }
                                                    ],
                                                    "key_name": "signet_challenge",
                                                    "type": "string"
                                                  }
                                                ],
                                                "key_name": "chain",
                                                "type": "string"
                                              }
                                            ],
                                            "key_name": "pooledtx",
                                            "type": "number"
                                          }
                                        ],
                                        "key_name": "networkhashps",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "target",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "difficulty",
                                "type": "number"
                              }
                            ],
                            "key_name": "bits",
                            "type": "string"
                          }
                        ],
                        "key_name": "currentblocktx",
                        "type": "string"
                      }
                    ],
                    "key_name": "currentblockweight",
                    "type": "string"
                  }
                ],
                "key_name": "blocks",
                "type": "number"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getnettotals": [
      {
        "arguments": [],
        "description": "getnettotals\n\nReturns information about network traffic, including bytes in, bytes out,\nand current system time.\n",
        "examples": "> bitcoin-cli getnettotals \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnettotals\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getnettotals",
        "results": [
          {
            "description": "and current system time.",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "n,                         Total bytes received",
                    "inner": [
                      {
                        "description": "n,                         Total bytes sent",
                        "inner": [
                          {
                            "description": "xxx,                           Current system UNIX epoch time in milliseconds",
                            "inner": [
                              {
                                "description": "{",
                                "inner": [
                                  {
                                    "description": "n,                            Length of the measuring timeframe in seconds",
                                    "inner": [
                                      {
                                        "description": "n,                               Target in bytes",
                                        "inner": [
                                          {
                                            "description": "true|false,              True if target is reached",
                                            "inner": [
                                              {
                                                "description": "true|false,     True if serving historical blocks",
                                                "inner": [
                                                  {
                                                    "description": "n,                  Bytes left in current time cycle",
                                                    "inner": [
                                                      {
                                                        "description": "n                    Seconds left in current time cycle",
                                                        "inner": [],
                                                        "key_name": "time_left_in_cycle",
                                                        "type": "number"
                                                      }
                                                    ],
                                                    "key_name": "bytes_left_in_cycle",
                                                    "type": "number"
                                                  }
                                                ],
                                                "key_name": "serve_historical_blocks",
                                                "type": "boolean"
                                              }
                                            ],
                                            "key_name": "target_reached",
                                            "type": "boolean"
                                          }
                                        ],
                                        "key_name": "target",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "timeframe",
                                    "type": "number"
                                  },
                                  {
                                    "description": "}",
                                    "inner": [],
                                    "key_name": "",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "uploadtarget",
                                "type": "object"
                              }
                            ],
                            "key_name": "timemillis",
                            "type": "number"
                          }
                        ],
                        "key_name": "totalbytessent",
                        "type": "number"
                      }
                    ],
                    "key_name": "totalbytesrecv",
                    "type": "number"
                  },
                  {
                    "description": "}",
                    "inner": [],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "object"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getnetworkhashps": [
      {
        "arguments": [],
        "description": "getnetworkhashps ( nblocks height )\n\nReturns the estimated network hashes per second based on the last n blocks.\nPass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\nPass in [height] to estimate the network speed at the time when a certain block was found.\n",
        "examples": "> bitcoin-cli getnetworkhashps \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnetworkhashps\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getnetworkhashps",
        "results": [
          {
            "description": "Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.",
            "inner": [
              {
                "description": "Pass in [height] to estimate the network speed at the time when a certain block was found.",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getnetworkinfo": [
      {
        "arguments": [],
        "description": "getnetworkinfo\n\nReturns an object containing various state info regarding P2P networking.\n",
        "examples": "> bitcoin-cli getnetworkinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnetworkinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getnetworkinfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "n,                                      the server version",
                "inner": [
                  {
                    "description": "\"str\",                               the server subversion string",
                    "inner": [
                      {
                        "description": "n,                              the protocol version",
                        "inner": [
                          {
                            "description": "\"hex\",                            the services we offer to the network",
                            "inner": [
                              {
                                "description": "[                           (json array) the services we offer to the network, in human-readable form",
                                "inner": [
                                  {
                                    "description": "\"str\",                                            the service name",
                                    "inner": [
                                      {
                                        "description": "...",
                                        "inner": [],
                                        "key_name": "",
                                        "type": "string"
                                      }
                                    ],
                                    "key_name": "",
                                    "type": "string"
                                  },
                                  {
                                    "description": "],",
                                    "inner": [
                                      {
                                        "description": "true|false,                          true if transaction relay is requested from peers",
                                        "inner": [
                                          {
                                            "description": "n,                                   the time offset",
                                            "inner": [
                                              {
                                                "description": "n,                                  the total number of connections",
                                                "inner": [
                                                  {
                                                    "description": "n,                               the number of inbound connections",
                                                    "inner": [
                                                      {
                                                        "description": "n,                              the number of outbound connections",
                                                        "inner": [
                                                          {
                                                            "description": "true|false,                       whether p2p networking is enabled",
                                                            "inner": [
                                                              {
                                                                "description": "[                                     (json array) information per network",
                                                                "inner": [
                                                                  {
                                                                    "description": "{",
                                                                    "inner": [
                                                                      {
                                                                        "description": "\"str\",                                 network (ipv4, ipv6, onion, i2p, cjdns)",
                                                                        "inner": [
                                                                          {
                                                                            "description": "true|false,                         is the network limited using -onlynet?",
                                                                            "inner": [
                                                                              {
                                                                                "description": "true|false,                       is the network reachable?",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "\"str\",                                (\"host:port\") the proxy that is used for this network, or empty if none",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "true|false      Whether randomized credentials are used",
                                                                                        "inner": [],
                                                                                        "key_name": "proxy_randomize_credentials",
                                                                                        "type": "boolean"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "proxy",
                                                                                    "type": "string"
                                                                                  }
                                                                                ],
                                                                                "key_name": "reachable",
                                                                                "type": "boolean"
                                                                              }
                                                                            ],
                                                                            "key_name": "limited",
                                                                            "type": "boolean"
                                                                          }
                                                                        ],
                                                                        "key_name": "name",
                                                                        "type": "string"
                                                                      },
                                                                      {
                                                                        "description": "},",
                                                                        "inner": [
                                                                          {
                                                                            "description": "...",
                                                                            "inner": [],
                                                                            "key_name": "",
                                                                            "type": "string"
                                                                          }
                                                                        ],
                                                                        "key_name": "",
                                                                        "type": "string"
                                                                      }
                                                                    ],
                                                                    "key_name": "",
                                                                    "type": "object"
                                                                  },
                                                                  {
                                                                    "description": "],",
                                                                    "inner": [
                                                                      {
                                                                        "description": "n,                                     minimum relay fee rate for transactions in BTC/kvB",
                                                                        "inner": [
                                                                          {
                                                                            "description": "n,                               minimum fee rate increment for mempool limiting or replacement in BTC/kvB",
                                                                            "inner": [
                                                                              {
                                                                                "description": "[                               (json array) list of local addresses",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "{",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "\"str\",                              network address",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "n,                                     network port",
                                                                                            "inner": [
                                                                                              {
                                                                                                "description": "n                                     relative score",
                                                                                                "inner": [],
                                                                                                "key_name": "score",
                                                                                                "type": "number"
                                                                                              }
                                                                                            ],
                                                                                            "key_name": "port",
                                                                                            "type": "number"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "address",
                                                                                        "type": "string"
                                                                                      },
                                                                                      {
                                                                                        "description": "},",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "...",
                                                                                            "inner": [],
                                                                                            "key_name": "",
                                                                                            "type": "string"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "",
                                                                                        "type": "string"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "",
                                                                                    "type": "object"
                                                                                  },
                                                                                  {
                                                                                    "description": "],",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "[                                     (json array) any network and blockchain warnings (run with `-deprecatedrpc=warnings` to return the latest warning as a single string)",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "\"str\",                                            warning",
                                                                                            "inner": [
                                                                                              {
                                                                                                "description": "...",
                                                                                                "inner": [],
                                                                                                "key_name": "",
                                                                                                "type": "string"
                                                                                              }
                                                                                            ],
                                                                                            "key_name": "",
                                                                                            "type": "string"
                                                                                          },
                                                                                          {
                                                                                            "description": "]",
                                                                                            "inner": [],
                                                                                            "key_name": "",
                                                                                            "type": "string"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "warnings",
                                                                                        "type": "string"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "",
                                                                                    "type": "string"
                                                                                  }
                                                                                ],
                                                                                "key_name": "localaddresses",
                                                                                "type": "string"
                                                                              }
                                                                            ],
                                                                            "key_name": "incrementalfee",
                                                                            "type": "number"
                                                                          }
                                                                        ],
                                                                        "key_name": "relayfee",
                                                                        "type": "number"
                                                                      }
                                                                    ],
                                                                    "key_name": "",
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "key_name": "networks",
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "key_name": "networkactive",
                                                            "type": "boolean"
                                                          }
                                                        ],
                                                        "key_name": "connections_out",
                                                        "type": "number"
                                                      }
                                                    ],
                                                    "key_name": "connections_in",
                                                    "type": "number"
                                                  }
                                                ],
                                                "key_name": "connections",
                                                "type": "number"
                                              }
                                            ],
                                            "key_name": "timeoffset",
                                            "type": "number"
                                          }
                                        ],
                                        "key_name": "localrelay",
                                        "type": "boolean"
                                      }
                                    ],
                                    "key_name": "",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "localservicesnames",
                                "type": "string"
                              }
                            ],
                            "key_name": "localservices",
                            "type": "string"
                          }
                        ],
                        "key_name": "protocolversion",
                        "type": "number"
                      }
                    ],
                    "key_name": "subversion",
                    "type": "string"
                  }
                ],
                "key_name": "version",
                "type": "number"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getnewaddress": [
      {
        "arguments": [],
        "description": "getnewaddress ( \"label\" \"address_type\" )\n\nReturns a new Bitcoin address for receiving payments.\nIf 'label' is specified, it is added to the address book \nso payments received with the address will be associated with 'label'.\n",
        "examples": "> bitcoin-cli getnewaddress \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnewaddress\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getnewaddress",
        "results": [
          {
            "description": "If 'label' is specified, it is added to the address book",
            "inner": [
              {
                "description": "so payments received with the address will be associated with 'label'.",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getnodeaddresses": [
      {
        "arguments": [],
        "description": "getnodeaddresses ( count \"network\" )\n\nReturn known addresses, after filtering for quality and recency.\nThese can potentially be used to find new peers in the network.\nThe total number of addresses known to the node may be higher.\n",
        "examples": "> bitcoin-cli getnodeaddresses 8\n> bitcoin-cli getnodeaddresses 4 \"i2p\"\n> bitcoin-cli -named getnodeaddresses network=onion count=12\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnodeaddresses\", \"params\": [8]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnodeaddresses\", \"params\": [4, \"i2p\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getnodeaddresses",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getpeerinfo": [
      {
        "arguments": [],
        "description": "getpeerinfo\n\nReturns data about each connected network peer as a json array of objects.\n",
        "examples": "> bitcoin-cli getpeerinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getpeerinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getpeerinfo",
        "results": [
          {
            "description": "[                                         (json array)",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "n,                              Peer index",
                    "inner": [
                      {
                        "description": "\"str\",                        (host:port) The IP address and port of the peer",
                        "inner": [
                          {
                            "description": "\"str\",                   (string, optional) (ip:port) Bind address of the connection to the peer",
                            "inner": [
                              {
                                "description": "\"str\",                  (string, optional) (ip:port) Local address as reported by the peer",
                                "inner": [
                                  {
                                    "description": "\"str\",                     Network (ipv4, ipv6, onion, i2p, cjdns, not_publicly_routable)",
                                    "inner": [
                                      {
                                        "description": "n,                      (numeric, optional) Mapped AS (Autonomous System) number at the end of the BGP route to the peer, used for diversifying",
                                        "inner": [
                                          {
                                            "description": "peer selection (only displayed if the -asmap config option is set)",
                                            "inner": [],
                                            "key_name": "",
                                            "type": "string"
                                          },
                                          {
                                            "description": "\"hex\",                    The services offered",
                                            "inner": [
                                              {
                                                "description": "[                   (json array) the services offered, in human-readable form",
                                                "inner": [
                                                  {
                                                    "description": "\"str\",                               the service name if it is recognised",
                                                    "inner": [
                                                      {
                                                        "description": "...",
                                                        "inner": [],
                                                        "key_name": "",
                                                        "type": "string"
                                                      }
                                                    ],
                                                    "key_name": "",
                                                    "type": "string"
                                                  },
                                                  {
                                                    "description": "],",
                                                    "inner": [
                                                      {
                                                        "description": "true|false,              Whether we relay transactions to this peer",
                                                        "inner": [
                                                          {
                                                            "description": "xxx,                      The UNIX epoch time of the last send",
                                                            "inner": [
                                                              {
                                                                "description": "xxx,                      The UNIX epoch time of the last receive",
                                                                "inner": [
                                                                  {
                                                                    "description": "xxx,              The UNIX epoch time of the last valid transaction received from this peer",
                                                                    "inner": [
                                                                      {
                                                                        "description": "xxx,                    The UNIX epoch time of the last block received from this peer",
                                                                        "inner": [
                                                                          {
                                                                            "description": "n,                       The total bytes sent",
                                                                            "inner": [
                                                                              {
                                                                                "description": "n,                       The total bytes received",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "xxx,                      The UNIX epoch time of the connection",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "n,                      The time offset in seconds",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "n,                       (numeric, optional) The last ping time in milliseconds (ms), if any",
                                                                                            "inner": [
                                                                                              {
                                                                                                "description": "n,                        (numeric, optional) The minimum observed ping time in milliseconds (ms), if any",
                                                                                                "inner": [
                                                                                                  {
                                                                                                    "description": "n,                       (numeric, optional) The duration in milliseconds (ms) of an outstanding ping (if non-zero)",
                                                                                                    "inner": [
                                                                                                      {
                                                                                                        "description": "n,                         The peer version, such as 70001",
                                                                                                        "inner": [
                                                                                                          {
                                                                                                            "description": "\"str\",                      The string version",
                                                                                                            "inner": [
                                                                                                              {
                                                                                                                "description": "true|false,                Inbound (true) or Outbound (false)",
                                                                                                                "inner": [
                                                                                                                  {
                                                                                                                    "description": "true|false,           Whether we selected peer as (compact blocks) high-bandwidth peer",
                                                                                                                    "inner": [
                                                                                                                      {
                                                                                                                        "description": "true|false,         Whether peer selected us as (compact blocks) high-bandwidth peer",
                                                                                                                        "inner": [
                                                                                                                          {
                                                                                                                            "description": "n,                  The starting height (block) of the peer",
                                                                                                                            "inner": [
                                                                                                                              {
                                                                                                                                "description": "n,               The current height of header pre-synchronization with this peer, or -1 if no low-work sync is in progress",
                                                                                                                                "inner": [
                                                                                                                                  {
                                                                                                                                    "description": "n,                  The last header we have in common with this peer",
                                                                                                                                    "inner": [
                                                                                                                                      {
                                                                                                                                        "description": "n,                   The last block we have in common with this peer",
                                                                                                                                        "inner": [
                                                                                                                                          {
                                                                                                                                            "description": "[                        (json array)",
                                                                                                                                            "inner": [
                                                                                                                                              {
                                                                                                                                                "description": "n,                                   The heights of blocks we're currently asking from this peer",
                                                                                                                                                "inner": [
                                                                                                                                                  {
                                                                                                                                                    "description": "...",
                                                                                                                                                    "inner": [],
                                                                                                                                                    "key_name": "",
                                                                                                                                                    "type": "string"
                                                                                                                                                  }
                                                                                                                                                ],
                                                                                                                                                "key_name": "",
                                                                                                                                                "type": "number"
                                                                                                                                              },
                                                                                                                                              {
                                                                                                                                                "description": "],",
                                                                                                                                                "inner": [
                                                                                                                                                  {
                                                                                                                                                    "description": "true|false,     Whether we participate in address relay with this peer",
                                                                                                                                                    "inner": [
                                                                                                                                                      {
                                                                                                                                                        "description": "n,                  The total number of addresses processed, excluding those dropped due to rate limiting",
                                                                                                                                                        "inner": [
                                                                                                                                                          {
                                                                                                                                                            "description": "n,               The total number of addresses dropped due to rate limiting",
                                                                                                                                                            "inner": [
                                                                                                                                                              {
                                                                                                                                                                "description": "[                     (json array) Any special permissions that have been granted to this peer",
                                                                                                                                                                "inner": [
                                                                                                                                                                  {
                                                                                                                                                                    "description": "\"str\",                               bloomfilter (allow requesting BIP37 filtered blocks and transactions),",
                                                                                                                                                                    "inner": [
                                                                                                                                                                      {
                                                                                                                                                                        "description": "noban (do not ban for misbehavior; implies download),",
                                                                                                                                                                        "inner": [
                                                                                                                                                                          {
                                                                                                                                                                            "description": "forcerelay (relay transactions that are already in the mempool; implies relay),",
                                                                                                                                                                            "inner": [
                                                                                                                                                                              {
                                                                                                                                                                                "description": "relay (relay even in -blocksonly mode, and unlimited transaction announcements),",
                                                                                                                                                                                "inner": [
                                                                                                                                                                                  {
                                                                                                                                                                                    "description": "mempool (allow requesting BIP35 mempool contents),",
                                                                                                                                                                                    "inner": [
                                                                                                                                                                                      {
                                                                                                                                                                                        "description": "download (allow getheaders during IBD, no disconnect after maxuploadtarget limit),",
                                                                                                                                                                                        "inner": [
                                                                                                                                                                                          {
                                                                                                                                                                                            "description": "addr (responses to GETADDR avoid hitting the cache and contain random records with the most up-to-date info).",
                                                                                                                                                                                            "inner": [],
                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                          }
                                                                                                                                                                                        ],
                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                      }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                  }
                                                                                                                                                                                ],
                                                                                                                                                                                "key_name": "",
                                                                                                                                                                                "type": "string"
                                                                                                                                                                              }
                                                                                                                                                                            ],
                                                                                                                                                                            "key_name": "",
                                                                                                                                                                            "type": "string"
                                                                                                                                                                          }
                                                                                                                                                                        ],
                                                                                                                                                                        "key_name": "",
                                                                                                                                                                        "type": "string"
                                                                                                                                                                      },
                                                                                                                                                                      {
                                                                                                                                                                        "description": "...",
                                                                                                                                                                        "inner": [],
                                                                                                                                                                        "key_name": "",
                                                                                                                                                                        "type": "string"
                                                                                                                                                                      }
                                                                                                                                                                    ],
                                                                                                                                                                    "key_name": "",
                                                                                                                                                                    "type": "string"
                                                                                                                                                                  },
                                                                                                                                                                  {
                                                                                                                                                                    "description": "],",
                                                                                                                                                                    "inner": [
                                                                                                                                                                      {
                                                                                                                                                                        "description": "n,                    The minimum fee rate for transactions this peer accepts",
                                                                                                                                                                        "inner": [
                                                                                                                                                                          {
                                                                                                                                                                            "description": "{",
                                                                                                                                                                            "inner": [
                                                                                                                                                                              {
                                                                                                                                                                                "description": "n,                           The total bytes sent aggregated by message type",
                                                                                                                                                                                "inner": [
                                                                                                                                                                                  {
                                                                                                                                                                                    "description": "When a message type is not listed in this json object, the bytes sent are 0.",
                                                                                                                                                                                    "inner": [
                                                                                                                                                                                      {
                                                                                                                                                                                        "description": "Only known message types can appear as keys in the object.",
                                                                                                                                                                                        "inner": [],
                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                      }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                  },
                                                                                                                                                                                  {
                                                                                                                                                                                    "description": "...",
                                                                                                                                                                                    "inner": [],
                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                  }
                                                                                                                                                                                ],
                                                                                                                                                                                "key_name": "msg",
                                                                                                                                                                                "type": "number"
                                                                                                                                                                              },
                                                                                                                                                                              {
                                                                                                                                                                                "description": "},",
                                                                                                                                                                                "inner": [
                                                                                                                                                                                  {
                                                                                                                                                                                    "description": "{",
                                                                                                                                                                                    "inner": [
                                                                                                                                                                                      {
                                                                                                                                                                                        "description": "n,                           The total bytes received aggregated by message type",
                                                                                                                                                                                        "inner": [
                                                                                                                                                                                          {
                                                                                                                                                                                            "description": "When a message type is not listed in this json object, the bytes received are 0.",
                                                                                                                                                                                            "inner": [
                                                                                                                                                                                              {
                                                                                                                                                                                                "description": "Only known message types can appear as keys in the object and all bytes received",
                                                                                                                                                                                                "inner": [
                                                                                                                                                                                                  {
                                                                                                                                                                                                    "description": "of unknown message types are listed under '*other*'.",
                                                                                                                                                                                                    "inner": [],
                                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                                  }
                                                                                                                                                                                                ],
                                                                                                                                                                                                "key_name": "",
                                                                                                                                                                                                "type": "string"
                                                                                                                                                                                              }
                                                                                                                                                                                            ],
                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                          },
                                                                                                                                                                                          {
                                                                                                                                                                                            "description": "...",
                                                                                                                                                                                            "inner": [],
                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                          }
                                                                                                                                                                                        ],
                                                                                                                                                                                        "key_name": "msg",
                                                                                                                                                                                        "type": "number"
                                                                                                                                                                                      },
                                                                                                                                                                                      {
                                                                                                                                                                                        "description": "},",
                                                                                                                                                                                        "inner": [
                                                                                                                                                                                          {
                                                                                                                                                                                            "description": "\"str\",             Type of connection:",
                                                                                                                                                                                            "inner": [
                                                                                                                                                                                              {
                                                                                                                                                                                                "description": "outbound-full-relay (default automatic connections),",
                                                                                                                                                                                                "inner": [
                                                                                                                                                                                                  {
                                                                                                                                                                                                    "description": "block-relay-only (does not relay transactions or addresses),",
                                                                                                                                                                                                    "inner": [
                                                                                                                                                                                                      {
                                                                                                                                                                                                        "description": "inbound (initiated by the peer),",
                                                                                                                                                                                                        "inner": [
                                                                                                                                                                                                          {
                                                                                                                                                                                                            "description": "manual (added via addnode RPC or -addnode/-connect configuration options),",
                                                                                                                                                                                                            "inner": [
                                                                                                                                                                                                              {
                                                                                                                                                                                                                "description": "addr-fetch (short-lived automatic connection for soliciting addresses),",
                                                                                                                                                                                                                "inner": [
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    "description": "feeler (short-lived automatic connection for testing addresses).",
                                                                                                                                                                                                                    "inner": [
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        "description": "Please note this output is unlikely to be stable in upcoming releases as we iterate to",
                                                                                                                                                                                                                        "inner": [
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            "description": "best capture connection behaviors.",
                                                                                                                                                                                                                            "inner": [],
                                                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        ],
                                                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                ],
                                                                                                                                                                                                                "key_name": "",
                                                                                                                                                                                                                "type": "string"
                                                                                                                                                                                                              }
                                                                                                                                                                                                            ],
                                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                                          }
                                                                                                                                                                                                        ],
                                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                                      }
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                                  }
                                                                                                                                                                                                ],
                                                                                                                                                                                                "key_name": "",
                                                                                                                                                                                                "type": "string"
                                                                                                                                                                                              },
                                                                                                                                                                                              {
                                                                                                                                                                                                "description": "\"str\",     Type of transport protocol:",
                                                                                                                                                                                                "inner": [
                                                                                                                                                                                                  {
                                                                                                                                                                                                    "description": "detecting (peer could be v1 or v2),",
                                                                                                                                                                                                    "inner": [
                                                                                                                                                                                                      {
                                                                                                                                                                                                        "description": "v1 (plaintext transport protocol),",
                                                                                                                                                                                                        "inner": [
                                                                                                                                                                                                          {
                                                                                                                                                                                                            "description": "v2 (BIP324 encrypted transport protocol).",
                                                                                                                                                                                                            "inner": [],
                                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                                          }
                                                                                                                                                                                                        ],
                                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                                      }
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                                  },
                                                                                                                                                                                                  {
                                                                                                                                                                                                    "description": "\"str\"                   The session ID for this connection, or \"\" if there is none (\"v2\" transport protocol only).",
                                                                                                                                                                                                    "inner": [],
                                                                                                                                                                                                    "key_name": "session_id",
                                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                                  }
                                                                                                                                                                                                ],
                                                                                                                                                                                                "key_name": "transport_protocol_type",
                                                                                                                                                                                                "type": "string"
                                                                                                                                                                                              }
                                                                                                                                                                                            ],
                                                                                                                                                                                            "key_name": "connection_type",
                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                          }
                                                                                                                                                                                        ],
                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                      }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "key_name": "bytesrecv_per_msg",
                                                                                                                                                                                    "type": "object"
                                                                                                                                                                                  }
                                                                                                                                                                                ],
                                                                                                                                                                                "key_name": "",
                                                                                                                                                                                "type": "string"
                                                                                                                                                                              }
                                                                                                                                                                            ],
                                                                                                                                                                            "key_name": "bytessent_per_msg",
                                                                                                                                                                            "type": "object"
                                                                                                                                                                          }
                                                                                                                                                                        ],
                                                                                                                                                                        "key_name": "minfeefilter",
                                                                                                                                                                        "type": "number"
                                                                                                                                                                      }
                                                                                                                                                                    ],
                                                                                                                                                                    "key_name": "",
                                                                                                                                                                    "type": "string"
                                                                                                                                                                  }
                                                                                                                                                                ],
                                                                                                                                                                "key_name": "permissions",
                                                                                                                                                                "type": "string"
                                                                                                                                                              }
                                                                                                                                                            ],
                                                                                                                                                            "key_name": "addr_rate_limited",
                                                                                                                                                            "type": "number"
                                                                                                                                                          }
                                                                                                                                                        ],
                                                                                                                                                        "key_name": "addr_processed",
                                                                                                                                                        "type": "number"
                                                                                                                                                      }
                                                                                                                                                    ],
                                                                                                                                                    "key_name": "addr_relay_enabled",
                                                                                                                                                    "type": "boolean"
                                                                                                                                                  }
                                                                                                                                                ],
                                                                                                                                                "key_name": "",
                                                                                                                                                "type": "string"
                                                                                                                                              }
                                                                                                                                            ],
                                                                                                                                            "key_name": "inflight",
                                                                                                                                            "type": "string"
                                                                                                                                          }
                                                                                                                                        ],
                                                                                                                                        "key_name": "synced_blocks",
                                                                                                                                        "type": "number"
                                                                                                                                      }
                                                                                                                                    ],
                                                                                                                                    "key_name": "synced_headers",
                                                                                                                                    "type": "number"
                                                                                                                                  }
                                                                                                                                ],
                                                                                                                                "key_name": "presynced_headers",
                                                                                                                                "type": "number"
                                                                                                                              }
                                                                                                                            ],
                                                                                                                            "key_name": "startingheight",
                                                                                                                            "type": "number"
                                                                                                                          }
                                                                                                                        ],
                                                                                                                        "key_name": "bip152_hb_from",
                                                                                                                        "type": "boolean"
                                                                                                                      }
                                                                                                                    ],
                                                                                                                    "key_name": "bip152_hb_to",
                                                                                                                    "type": "boolean"
                                                                                                                  }
                                                                                                                ],
                                                                                                                "key_name": "inbound",
                                                                                                                "type": "boolean"
                                                                                                              }
                                                                                                            ],
                                                                                                            "key_name": "subver",
                                                                                                            "type": "string"
                                                                                                          }
                                                                                                        ],
                                                                                                        "key_name": "version",
                                                                                                        "type": "number"
                                                                                                      }
                                                                                                    ],
                                                                                                    "key_name": "pingwait",
                                                                                                    "type": "string"
                                                                                                  }
                                                                                                ],
                                                                                                "key_name": "minping",
                                                                                                "type": "string"
                                                                                              }
                                                                                            ],
                                                                                            "key_name": "pingtime",
                                                                                            "type": "string"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "timeoffset",
                                                                                        "type": "number"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "conntime",
                                                                                    "type": "number"
                                                                                  }
                                                                                ],
                                                                                "key_name": "bytesrecv",
                                                                                "type": "number"
                                                                              }
                                                                            ],
                                                                            "key_name": "bytessent",
                                                                            "type": "number"
                                                                          }
                                                                        ],
                                                                        "key_name": "last_block",
                                                                        "type": "number"
                                                                      }
                                                                    ],
                                                                    "key_name": "last_transaction",
                                                                    "type": "number"
                                                                  }
                                                                ],
                                                                "key_name": "lastrecv",
                                                                "type": "number"
                                                              }
                                                            ],
                                                            "key_name": "lastsend",
                                                            "type": "number"
                                                          }
                                                        ],
                                                        "key_name": "relaytxes",
                                                        "type": "boolean"
                                                      }
                                                    ],
                                                    "key_name": "",
                                                    "type": "string"
                                                  }
                                                ],
                                                "key_name": "servicesnames",
                                                "type": "string"
                                              }
                                            ],
                                            "key_name": "services",
                                            "type": "string"
                                          }
                                        ],
                                        "key_name": "mapped_as",
                                        "type": "string"
                                      }
                                    ],
                                    "key_name": "network",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "addrlocal",
                                "type": "string"
                              }
                            ],
                            "key_name": "addrbind",
                            "type": "string"
                          }
                        ],
                        "key_name": "addr",
                        "type": "string"
                      }
                    ],
                    "key_name": "id",
                    "type": "number"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "object"
              },
              {
                "description": "]",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getprioritisedtransactions": [
      {
        "arguments": [],
        "description": "getprioritisedtransactions\n\nReturns a map of all user-created (see prioritisetransaction) fee deltas by txid, and whether the tx is present in mempool.\n",
        "examples": "> bitcoin-cli getprioritisedtransactions \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getprioritisedtransactions\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getprioritisedtransactions",
        "results": [
          {
            "description": "{                                  prioritisation keyed by txid",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "n,               transaction fee delta in satoshis",
                    "inner": [
                      {
                        "description": "true|false,     whether this transaction is currently in mempool",
                        "inner": [
                          {
                            "description": "n            (numeric, optional) modified fee in satoshis. Only returned if in_mempool=true",
                            "inner": [],
                            "key_name": "modified_fee",
                            "type": "string"
                          }
                        ],
                        "key_name": "in_mempool",
                        "type": "boolean"
                      }
                    ],
                    "key_name": "fee_delta",
                    "type": "number"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "<transactionid>",
                "type": "object"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getrawchangeaddress": [
      {
        "arguments": [],
        "description": "getrawchangeaddress ( \"address_type\" )\n\nReturns a new Bitcoin address, for receiving change.\nThis is for use with raw transactions, NOT normal use.\n",
        "examples": "> bitcoin-cli getrawchangeaddress \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getrawchangeaddress\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getrawchangeaddress",
        "results": [
          {
            "description": "This is for use with raw transactions, NOT normal use.",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getrawmempool": [
      {
        "arguments": [],
        "description": "getrawmempool ( verbose mempool_sequence )\n\nReturns all transaction ids in memory pool as a json array of string transaction ids.\n\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\n",
        "examples": "> bitcoin-cli getrawmempool true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getrawmempool\", \"params\": [true]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getrawmempool",
        "results": [
          {
            "description": "Hint: use getmempoolentry to fetch a specific transaction from the mempool.",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getrawtransaction": [
      {
        "arguments": [],
        "description": "getrawtransaction \"txid\" ( verbosity \"blockhash\" )\n\nBy default, this call only returns a transaction if it is in the mempool. If -txindex is enabled\nand no blockhash argument is passed, it will return the transaction if it is in the mempool or any block.\nIf a blockhash argument is passed, it will return the transaction if\nthe specified block is available and the transaction is in that block.\n\nHint: Use gettransaction for wallet transactions.\n\nIf verbosity is 0 or omitted, returns the serialized transaction as a hex-encoded string.\nIf verbosity is 1, returns a JSON Object with information about the transaction.\nIf verbosity is 2, returns a JSON Object with information about the transaction, including fee and prevout information.\n",
        "examples": "> bitcoin-cli getrawtransaction \"mytxid\"\n> bitcoin-cli getrawtransaction \"mytxid\" 1\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli getrawtransaction \"mytxid\" 0 \"myblockhash\"\n> bitcoin-cli getrawtransaction \"mytxid\" 1 \"myblockhash\"\n> bitcoin-cli getrawtransaction \"mytxid\" 2 \"myblockhash\"",
        "name": "getrawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getreceivedbyaddress": [
      {
        "arguments": [],
        "description": "getreceivedbyaddress \"address\" ( minconf include_immature_coinbase )\n\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\n",
        "examples": "\nThe amount from transactions with at least 1 confirmation\n> bitcoin-cli getreceivedbyaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"\n\nThe amount including unconfirmed transactions, zero confirmations\n> bitcoin-cli getreceivedbyaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 0\n\nThe amount with at least 6 confirmations\n> bitcoin-cli getreceivedbyaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 6\n\nThe amount with at least 6 confirmations including immature coinbase outputs\n> bitcoin-cli getreceivedbyaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 6 true\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\", 6]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getreceivedbyaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getreceivedbylabel": [
      {
        "arguments": [],
        "description": "getreceivedbylabel \"label\" ( minconf include_immature_coinbase )\n\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\n",
        "examples": "\nAmount received by the default label with at least 1 confirmation\n> bitcoin-cli getreceivedbylabel \"\"\n\nAmount received at the tabby label including unconfirmed amounts with zero confirmations\n> bitcoin-cli getreceivedbylabel \"tabby\" 0\n\nThe amount with at least 6 confirmations\n> bitcoin-cli getreceivedbylabel \"tabby\" 6\n\nThe amount with at least 6 confirmations including immature coinbase outputs\n> bitcoin-cli getreceivedbylabel \"tabby\" 6 true\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getreceivedbylabel\", \"params\": [\"tabby\", 6, true]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getreceivedbylabel",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getrpcinfo": [
      {
        "arguments": [],
        "description": "getrpcinfo\n\nReturns details of the RPC server.\n",
        "examples": "> bitcoin-cli getrpcinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getrpcinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getrpcinfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "[    (json array) All active commands",
                "inner": [
                  {
                    "description": "{                       Information about an active command",
                    "inner": [
                      {
                        "description": "\"str\",     The name of the RPC command",
                        "inner": [
                          {
                            "description": "n        The running time in microseconds",
                            "inner": [],
                            "key_name": "duration",
                            "type": "number"
                          }
                        ],
                        "key_name": "method",
                        "type": "string"
                      },
                      {
                        "description": "},",
                        "inner": [
                          {
                            "description": "...",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "object"
                  },
                  {
                    "description": "],",
                    "inner": [
                      {
                        "description": "\"str\"         The complete file path to the debug log",
                        "inner": [],
                        "key_name": "logpath",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "active_commands",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "gettransaction": [
      {
        "arguments": [],
        "description": "gettransaction \"txid\" ( include_watchonly verbose )\n\nGet detailed information about in-wallet transaction <txid>\n",
        "examples": "> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true\n> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" false true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "gettransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "gettxout": [
      {
        "arguments": [],
        "description": "gettxout \"txid\" n ( include_mempool )\n\nReturns details about an unspent transaction output.\n",
        "examples": "\nGet unspent transactions\n> bitcoin-cli listunspent \n\nView the details\n> bitcoin-cli gettxout \"txid\" 1\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "gettxout",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "gettxoutproof": [
      {
        "arguments": [],
        "description": "gettxoutproof [\"txid\",...] ( \"blockhash\" )\n\nReturns a hex-encoded proof that \"txid\" was included in a block.\n\nNOTE: By default this function only works sometimes. This is when there is an\nunspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option or\nspecify the block in which the transaction is included manually (by blockhash).\n",
        "examples": "",
        "name": "gettxoutproof",
        "results": [
          {
            "description": "NOTE: By default this function only works sometimes. This is when there is an",
            "inner": [
              {
                "description": "unspent output in the utxo for this transaction. To make it always work,",
                "inner": [
                  {
                    "description": "you need to maintain a transaction index, using the -txindex command line option or",
                    "inner": [
                      {
                        "description": "specify the block in which the transaction is included manually (by blockhash).",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "gettxoutsetinfo": [
      {
        "arguments": [],
        "description": "gettxoutsetinfo ( \"hash_type\" hash_or_height use_index )\n\nReturns statistics about the unspent transaction output set.\nNote this call may take some time if you are not using coinstatsindex.\n",
        "examples": "> bitcoin-cli gettxoutsetinfo \n> bitcoin-cli gettxoutsetinfo \"none\"\n> bitcoin-cli gettxoutsetinfo \"none\" 1000\n> bitcoin-cli gettxoutsetinfo \"none\" '\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"'\n> bitcoin-cli -named gettxoutsetinfo hash_type='muhash' use_index='false'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [\"none\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [\"none\", 1000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [\"none\", \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "gettxoutsetinfo",
        "results": [
          {
            "description": "Note this call may take some time if you are not using coinstatsindex.",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "gettxspendingprevout": [
      {
        "arguments": [],
        "description": "gettxspendingprevout [{\"txid\":\"hex\",\"vout\":n},...]\n\nScans the mempool to find transactions spending any of the given outputs\n",
        "examples": "> bitcoin-cli gettxspendingprevout \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":3}]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxspendingprevout\", \"params\": [\"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":3}]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "gettxspendingprevout",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getunconfirmedbalance": [
      {
        "arguments": [],
        "description": "getunconfirmedbalance\n\nDEPRECATED\nIdentical to getbalances().mine.untrusted_pending\n",
        "examples": "",
        "name": "getunconfirmedbalance",
        "results": [
          {
            "description": "n     The balance",
            "inner": [],
            "key_name": "",
            "type": "number"
          }
        ]
      }
    ],
    "getwalletinfo": [
      {
        "arguments": [],
        "description": "getwalletinfo\n\nReturns an object containing various wallet state info.\n",
        "examples": "> bitcoin-cli getwalletinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getwalletinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getwalletinfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "\"str\",                    the wallet name",
                "inner": [
                  {
                    "description": "n,                     the wallet version",
                    "inner": [
                      {
                        "description": "\"str\",                        the database format (bdb or sqlite)",
                        "inner": [
                          {
                            "description": "n,                           DEPRECATED. Identical to getbalances().mine.trusted",
                            "inner": [
                              {
                                "description": "n,               DEPRECATED. Identical to getbalances().mine.untrusted_pending",
                                "inner": [
                                  {
                                    "description": "n,                  DEPRECATED. Identical to getbalances().mine.immature",
                                    "inner": [
                                      {
                                        "description": "n,                           the total number of transactions in the wallet",
                                        "inner": [
                                          {
                                            "description": "xxx,                  (numeric, optional) the UNIX epoch time of the oldest pre-generated key in the key pool. Legacy wallets only.",
                                            "inner": [
                                              {
                                                "description": "n,                       how many new keys are pre-generated (only counts external keys)",
                                                "inner": [
                                                  {
                                                    "description": "n,          (numeric, optional) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)",
                                                    "inner": [
                                                      {
                                                        "description": "xxx,                 (numeric, optional) the UNIX epoch time until which the wallet is unlocked for transfers, or 0 if the wallet is locked (only present for passphrase-encrypted wallets)",
                                                        "inner": [
                                                          {
                                                            "description": "n,                          the transaction fee configuration, set in BTC/kvB",
                                                            "inner": [
                                                              {
                                                                "description": "\"hex\",                     (string, optional) the Hash160 of the HD seed (only present when HD is enabled)",
                                                                "inner": [
                                                                  {
                                                                    "description": "true|false,     false if privatekeys are disabled for this wallet (enforced watch-only wallet)",
                                                                    "inner": [
                                                                      {
                                                                        "description": "true|false,              whether this wallet tracks clean/dirty coins in terms of reuse",
                                                                        "inner": [
                                                                          {
                                                                            "description": "{                           current scanning details, or false if no scan is in progress",
                                                                            "inner": [
                                                                              {
                                                                                "description": "n,                        elapsed seconds since scan start",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "n                         scanning progress percentage [0.0, 1.0]",
                                                                                    "inner": [],
                                                                                    "key_name": "progress",
                                                                                    "type": "number"
                                                                                  }
                                                                                ],
                                                                                "key_name": "duration",
                                                                                "type": "number"
                                                                              },
                                                                              {
                                                                                "description": "},",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "true|false,              whether this wallet uses descriptors for output script management",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "true|false,          whether this wallet is configured to use an external signer such as a hardware wallet",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "true|false,                    Whether this wallet intentionally does not contain any keys, scripts, or descriptors",
                                                                                            "inner": [
                                                                                              {
                                                                                                "description": "xxx,                      (numeric, optional) The start time for blocks scanning. It could be modified by (re)importing any descriptor with an earlier timestamp.",
                                                                                                "inner": [
                                                                                                  {
                                                                                                    "description": "{                 hash and height of the block this information was generated on",
                                                                                                    "inner": [
                                                                                                      {
                                                                                                        "description": "\"hex\",                        hash of the block this information was generated on",
                                                                                                        "inner": [
                                                                                                          {
                                                                                                            "description": "n                           height of the block this information was generated on",
                                                                                                            "inner": [],
                                                                                                            "key_name": "height",
                                                                                                            "type": "number"
                                                                                                          }
                                                                                                        ],
                                                                                                        "key_name": "hash",
                                                                                                        "type": "string"
                                                                                                      },
                                                                                                      {
                                                                                                        "description": "}",
                                                                                                        "inner": [],
                                                                                                        "key_name": "",
                                                                                                        "type": "string"
                                                                                                      }
                                                                                                    ],
                                                                                                    "key_name": "lastprocessedblock",
                                                                                                    "type": "object"
                                                                                                  }
                                                                                                ],
                                                                                                "key_name": "birthtime",
                                                                                                "type": "string"
                                                                                              }
                                                                                            ],
                                                                                            "key_name": "blank",
                                                                                            "type": "boolean"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "external_signer",
                                                                                        "type": "boolean"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "descriptors",
                                                                                    "type": "boolean"
                                                                                  }
                                                                                ],
                                                                                "key_name": "",
                                                                                "type": "string"
                                                                              }
                                                                            ],
                                                                            "key_name": "scanning",
                                                                            "type": "object"
                                                                          }
                                                                        ],
                                                                        "key_name": "avoid_reuse",
                                                                        "type": "boolean"
                                                                      }
                                                                    ],
                                                                    "key_name": "private_keys_enabled",
                                                                    "type": "boolean"
                                                                  }
                                                                ],
                                                                "key_name": "hdseedid",
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "key_name": "paytxfee",
                                                            "type": "number"
                                                          }
                                                        ],
                                                        "key_name": "unlocked_until",
                                                        "type": "string"
                                                      }
                                                    ],
                                                    "key_name": "keypoolsize_hd_internal",
                                                    "type": "string"
                                                  }
                                                ],
                                                "key_name": "keypoolsize",
                                                "type": "number"
                                              }
                                            ],
                                            "key_name": "keypoololdest",
                                            "type": "string"
                                          }
                                        ],
                                        "key_name": "txcount",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "immature_balance",
                                    "type": "number"
                                  }
                                ],
                                "key_name": "unconfirmed_balance",
                                "type": "number"
                              }
                            ],
                            "key_name": "balance",
                            "type": "number"
                          }
                        ],
                        "key_name": "format",
                        "type": "string"
                      }
                    ],
                    "key_name": "walletversion",
                    "type": "number"
                  }
                ],
                "key_name": "walletname",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getzmqnotifications": [
      {
        "arguments": [],
        "description": "getzmqnotifications\n\nReturns information about the active ZeroMQ notifications.\n",
        "examples": "> bitcoin-cli getzmqnotifications \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getzmqnotifications\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "getzmqnotifications",
        "results": [
          {
            "description": "[                         (json array)",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "\"str\",        Type of notification",
                    "inner": [
                      {
                        "description": "\"str\",     Address of the publisher",
                        "inner": [
                          {
                            "description": "n              Outbound message high water mark",
                            "inner": [],
                            "key_name": "hwm",
                            "type": "number"
                          }
                        ],
                        "key_name": "address",
                        "type": "string"
                      }
                    ],
                    "key_name": "type",
                    "type": "string"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "object"
              },
              {
                "description": "]",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "help": [
      {
        "arguments": [],
        "description": "help ( \"command\" )\n\nList all commands, or get help for a specified command.\n",
        "examples": "",
        "name": "help",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "importaddress": [
      {
        "arguments": [],
        "description": "importaddress \"address\" ( \"label\" rescan p2sh )\n\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\n\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\nmay report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\nThe rescan parameter can be set to false if the key was never used to create transactions. If it is set to false,\nbut the key was used to create transactions, rescanblockchain needs to be called with the appropriate block range.\nIf you have the full public key, you should call importpubkey instead of this.\nHint: use importmulti to import more than one address.\n\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\nas change, and not show up in many RPCs.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nNote: This command is only compatible with legacy wallets. Use \"importdescriptors\" for descriptor wallets.\n",
        "examples": "\nImport an address with rescan\n> bitcoin-cli importaddress \"myaddress\"\n\nImport using a label without rescan\n> bitcoin-cli importaddress \"myaddress\" \"testing\" false\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "importaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "importdescriptors": [
      {
        "arguments": [],
        "description": "importdescriptors requests\n\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\nWhen importing descriptors with multipath key expressions, if the multipath specifier contains exactly two elements, the descriptor produced from the second elements will be imported as an internal descriptor.\n\nNote: This call can take over an hour to complete if using an early timestamp; during that time, other rpc calls\nmay report that the imported keys, addresses or scripts exist but related transactions are still missing.\nThe rescan is significantly faster if block filters are available (using startup option \"-blockfilterindex=1\").\n",
        "examples": "> bitcoin-cli importdescriptors '[{ \"desc\": \"<my descriptor>\", \"timestamp\":1455191478, \"internal\": true }, { \"desc\": \"<my descriptor 2>\", \"label\": \"example 2\", \"timestamp\": 1455191480 }]'\n> bitcoin-cli importdescriptors '[{ \"desc\": \"<my descriptor>\", \"timestamp\":1455191478, \"active\": true, \"range\": [0,100], \"label\": \"<my bech32 wallet>\" }]'",
        "name": "importdescriptors",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "importmempool": [
      {
        "arguments": [],
        "description": "importmempool \"filepath\" ( options )\n\nImport a mempool.dat file and attempt to add its contents to the mempool.\nWarning: Importing untrusted files is dangerous, especially if metadata from the file is taken over.\n",
        "examples": "> bitcoin-cli importmempool /path/to/mempool.dat\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"importmempool\", \"params\": [/path/to/mempool.dat]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "importmempool",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "importmulti": [
      {
        "arguments": [],
        "description": "importmulti requests ( options )\n\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), optionally rescanning the blockchain from the earliest creation time of the imported scripts. Requires a new wallet backup.\nIf an address/script is imported without all of the private keys required to spend from that address, it will be watchonly. The 'watchonly' option must be set to true in this case or a warning will be returned.\nConversely, if all the private keys are provided and the address/script is spendable, the watchonly option must be set to false, or a warning will be returned.\n\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\nmay report that the imported keys, addresses or scripts exist but related transactions are still missing.\nThe rescan parameter can be set to false if the key was never used to create transactions. If it is set to false,\nbut the key was used to create transactions, rescanblockchain needs to be called with the appropriate block range.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nNote: This command is only compatible with legacy wallets. Use \"importdescriptors\" for descriptor wallets.\n",
        "examples": "> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"<my 2nd address>\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]'\n> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }]' '{ \"rescan\": false}'",
        "name": "importmulti",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "importprivkey": [
      {
        "arguments": [],
        "description": "importprivkey \"privkey\" ( \"label\" rescan )\n\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\nHint: use importmulti to import more than one private key.\n\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\nmay report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\nThe rescan parameter can be set to false if the key was never used to create transactions. If it is set to false,\nbut the key was used to create transactions, rescanblockchain needs to be called with the appropriate block range.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nNote: This command is only compatible with legacy wallets. Use \"importdescriptors\" with \"combo(X)\" for descriptor wallets.\n",
        "examples": "\nDump a private key\n> bitcoin-cli dumpprivkey \"myaddress\"\n\nImport the private key with rescan\n> bitcoin-cli importprivkey \"mykey\"\n\nImport using a label and without rescan\n> bitcoin-cli importprivkey \"mykey\" \"testing\" false\n\nImport using default blank label and without rescan\n> bitcoin-cli importprivkey \"mykey\" \"\" false\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "importprivkey",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "importprunedfunds": [
      {
        "arguments": [],
        "description": "importprunedfunds \"rawtransaction\" \"txoutproof\"\n\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\n",
        "examples": "",
        "name": "importprunedfunds",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "importpubkey": [
      {
        "arguments": [],
        "description": "importpubkey \"pubkey\" ( \"label\" rescan )\n\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\nHint: use importmulti to import more than one public key.\n\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\nmay report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\nThe rescan parameter can be set to false if the key was never used to create transactions. If it is set to false,\nbut the key was used to create transactions, rescanblockchain needs to be called with the appropriate block range.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nNote: This command is only compatible with legacy wallets. Use \"importdescriptors\" with \"combo(X)\" for descriptor wallets.\n",
        "examples": "\nImport a public key with rescan\n> bitcoin-cli importpubkey \"mypubkey\"\n\nImport using a label without rescan\n> bitcoin-cli importpubkey \"mypubkey\" \"testing\" false\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "importpubkey",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "importwallet": [
      {
        "arguments": [],
        "description": "importwallet \"filename\"\n\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\nNote: Blockchain and Mempool will be rescanned after a successful import. Use \"getwalletinfo\" to query the scanning progress.\nNote: This command is only compatible with legacy wallets.\n",
        "examples": "\nDump the wallet\n> bitcoin-cli dumpwallet \"test\"\n\nImport the wallet\n> bitcoin-cli importwallet \"test\"\n\nImport using the json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "importwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "joinpsbts": [
      {
        "arguments": [],
        "description": "joinpsbts [\"psbt\",...]\n\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\nNo input in any of the PSBTs can be in more than one of the PSBTs.\n",
        "examples": "> bitcoin-cli joinpsbts \"psbt\"",
        "name": "joinpsbts",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "keypoolrefill": [
      {
        "arguments": [],
        "description": "keypoolrefill ( newsize )\n\nFills the keypool.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "> bitcoin-cli keypoolrefill \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"keypoolrefill\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "keypoolrefill",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listaddressgroupings": [
      {
        "arguments": [],
        "description": "listaddressgroupings\n\nLists groups of addresses which have had their common ownership\nmade public by common use as inputs or as the resulting change\nin past transactions\n",
        "examples": "> bitcoin-cli listaddressgroupings \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listaddressgroupings\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listaddressgroupings",
        "results": [
          {
            "description": "[               (json array)",
            "inner": [
              {
                "description": "[             (json array)",
                "inner": [
                  {
                    "description": "[           (json array)",
                    "inner": [
                      {
                        "description": "\"str\",     The bitcoin address",
                        "inner": [
                          {
                            "description": "n,         The amount in BTC",
                            "inner": [
                              {
                                "description": "\"str\"     (string, optional) The label",
                                "inner": [],
                                "key_name": "",
                                "type": "string"
                              }
                            ],
                            "key_name": "",
                            "type": "number"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      },
                      {
                        "description": "],",
                        "inner": [
                          {
                            "description": "...",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  },
                  {
                    "description": "],",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              },
              {
                "description": "]",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listbanned": [
      {
        "arguments": [],
        "description": "listbanned\n\nList all manually banned IPs/Subnets.\n",
        "examples": "> bitcoin-cli listbanned \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listbanned\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listbanned",
        "results": [
          {
            "description": "[                              (json array)",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "\"str\",          The IP/Subnet of the banned node",
                    "inner": [
                      {
                        "description": "xxx,        The UNIX epoch time the ban was created",
                        "inner": [
                          {
                            "description": "xxx,       The UNIX epoch time the ban expires",
                            "inner": [
                              {
                                "description": "xxx,       The ban duration, in seconds",
                                "inner": [
                                  {
                                    "description": "xxx      The time remaining until the ban expires, in seconds",
                                    "inner": [],
                                    "key_name": "time_remaining",
                                    "type": "number"
                                  }
                                ],
                                "key_name": "ban_duration",
                                "type": "number"
                              }
                            ],
                            "key_name": "banned_until",
                            "type": "number"
                          }
                        ],
                        "key_name": "ban_created",
                        "type": "number"
                      }
                    ],
                    "key_name": "address",
                    "type": "string"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "object"
              },
              {
                "description": "]",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listdescriptors": [
      {
        "arguments": [],
        "description": "listdescriptors ( private )\n\nList descriptors imported into a descriptor-enabled wallet.\n",
        "examples": "> bitcoin-cli listdescriptors \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listdescriptors\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli listdescriptors true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listdescriptors\", \"params\": [true]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listdescriptors",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listlabels": [
      {
        "arguments": [],
        "description": "listlabels ( \"purpose\" )\n\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\n",
        "examples": "\nList all labels\n> bitcoin-cli listlabels \n\nList labels that have receiving addresses\n> bitcoin-cli listlabels receive\n\nList labels that have sending addresses\n> bitcoin-cli listlabels send\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listlabels\", \"params\": [receive]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listlabels",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listlockunspent": [
      {
        "arguments": [],
        "description": "listlockunspent\n\nReturns list of temporarily unspendable outputs.\nSee the lockunspent call to lock and unlock transactions for spending.\n",
        "examples": "\nList the unspent transactions\n> bitcoin-cli listunspent \n\nLock an unspent transaction\n> bitcoin-cli lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nList the locked transactions\n> bitcoin-cli listlockunspent \n\nUnlock the transaction again\n> bitcoin-cli lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listlockunspent\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listlockunspent",
        "results": [
          {
            "description": "See the lockunspent call to lock and unlock transactions for spending.",
            "inner": [
              {
                "description": "[                      (json array)",
                "inner": [
                  {
                    "description": "{",
                    "inner": [
                      {
                        "description": "\"hex\",     The transaction id locked",
                        "inner": [
                          {
                            "description": "n          The vout value",
                            "inner": [],
                            "key_name": "vout",
                            "type": "number"
                          }
                        ],
                        "key_name": "txid",
                        "type": "string"
                      },
                      {
                        "description": "},",
                        "inner": [
                          {
                            "description": "...",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "object"
                  },
                  {
                    "description": "]",
                    "inner": [],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listreceivedbyaddress": [
      {
        "arguments": [],
        "description": "listreceivedbyaddress ( minconf include_empty include_watchonly \"address_filter\" include_immature_coinbase )\n\nList balances by receiving address.\n",
        "examples": "> bitcoin-cli listreceivedbyaddress \n> bitcoin-cli listreceivedbyaddress 6 true\n> bitcoin-cli listreceivedbyaddress 6 true true \"\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true, \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\", true]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listreceivedbyaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listreceivedbylabel": [
      {
        "arguments": [],
        "description": "listreceivedbylabel ( minconf include_empty include_watchonly include_immature_coinbase )\n\nList received transactions by label.\n",
        "examples": "> bitcoin-cli listreceivedbylabel \n> bitcoin-cli listreceivedbylabel 6 true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listreceivedbylabel\", \"params\": [6, true, true, true]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listreceivedbylabel",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listsinceblock": [
      {
        "arguments": [],
        "description": "listsinceblock ( \"blockhash\" target_confirmations include_watchonly include_removed include_change \"label\" )\n\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\nIf \"blockhash\" is no longer a part of the main chain, transactions from the fork point onward are included.\nAdditionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \"removed\" array.\n",
        "examples": "> bitcoin-cli listsinceblock \n> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listsinceblock",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listtransactions": [
      {
        "arguments": [],
        "description": "listtransactions ( \"label\" count skip include_watchonly )\n\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\n\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\n",
        "examples": "\nList the most recent 10 transactions in the systems\n> bitcoin-cli listtransactions \n\nList transactions 100 to 120\n> bitcoin-cli listtransactions \"*\" 20 100\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listtransactions",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listunspent": [
      {
        "arguments": [],
        "description": "listunspent ( minconf maxconf [\"address\",...] include_unsafe query_options )\n\nReturns array of unspent transaction outputs\nwith between minconf and maxconf (inclusive) confirmations.\nOptionally filter to only include txouts paid to specified addresses.\n",
        "examples": "> bitcoin-cli listunspent \n> bitcoin-cli listunspent 6 9999999 \"[\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\",\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\",\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\"]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli listunspent 6 9999999 '[]' true '{ \"minimumAmount\": 0.005 }'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999, [] , true, { \"minimumAmount\": 0.005 } ]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listunspent",
        "results": [
          {
            "description": "with between minconf and maxconf (inclusive) confirmations.",
            "inner": [
              {
                "description": "Optionally filter to only include txouts paid to specified addresses.",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listwalletdir": [
      {
        "arguments": [],
        "description": "listwalletdir\n\nReturns a list of wallets in the wallet directory.\n",
        "examples": "> bitcoin-cli listwalletdir \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listwalletdir\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listwalletdir",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "[          (json array)",
                "inner": [
                  {
                    "description": "{",
                    "inner": [
                      {
                        "description": "\"str\"      The wallet name",
                        "inner": [],
                        "key_name": "name",
                        "type": "string"
                      },
                      {
                        "description": "},",
                        "inner": [
                          {
                            "description": "...",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "object"
                  },
                  {
                    "description": "]",
                    "inner": [],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "wallets",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "listwallets": [
      {
        "arguments": [],
        "description": "listwallets\n\nReturns a list of currently loaded wallets.\nFor full information on the wallet, use \"getwalletinfo\"\n",
        "examples": "> bitcoin-cli listwallets \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listwallets\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "listwallets",
        "results": [
          {
            "description": "For full information on the wallet, use \"getwalletinfo\"",
            "inner": [
              {
                "description": "[           (json array)",
                "inner": [
                  {
                    "description": "\"str\",     the wallet name",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  },
                  {
                    "description": "]",
                    "inner": [],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "loadtxoutset": [
      {
        "arguments": [],
        "description": "loadtxoutset \"path\"\n\nLoad the serialized UTXO set from a file.\nOnce this snapshot is loaded, its contents will be deserialized into a second chainstate data structure, which is then used to sync to the network's tip. Meanwhile, the original chainstate will complete the initial block download process in the background, eventually validating up to the block that the snapshot is based upon.\n\nThe result is a usable bitcoind instance that is current with the network tip in a matter of minutes rather than hours. UTXO snapshot are typically obtained from third-party sources (HTTP, torrent, etc.) which is reasonable since their contents are always checked by hash.\n\nYou can find more information on this process in the `assumeutxo` design document (<https://github.com/bitcoin/bitcoin/blob/master/doc/design/assumeutxo.md>).\n",
        "examples": "> bitcoin-cli -rpcclienttimeout=0 loadtxoutset utxo.dat",
        "name": "loadtxoutset",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "loadwallet": [
      {
        "arguments": [],
        "description": "loadwallet \"filename\" ( load_on_startup )\n\nLoads a wallet from a wallet file or directory.\nNote that all wallet command-line options used when starting bitcoind will be\napplied to the new wallet.\n",
        "examples": "\nLoad wallet from the wallet dir:\n> bitcoin-cli loadwallet \"walletname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"loadwallet\", \"params\": [\"walletname\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n\nLoad wallet using absolute path (Unix):\n> bitcoin-cli loadwallet \"/path/to/walletname/\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"loadwallet\", \"params\": [\"/path/to/walletname/\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n\nLoad wallet using absolute path (Windows):\n> bitcoin-cli loadwallet \"DriveLetter:\\path\\to\\walletname\\\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"loadwallet\", \"params\": [\"DriveLetter:\\path\\to\\walletname\\\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "loadwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "lockunspent": [
      {
        "arguments": [],
        "description": "lockunspent unlock ( [{\"txid\":\"hex\",\"vout\":n},...] persistent )\n\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nIf no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\nA locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\nManually selected coins are automatically unlocked.\nLocks are stored in memory only, unless persistent=true, in which case they will be written to the\nwallet database and loaded on node start. Unwritten (persistent=false) locks are always cleared\n(by virtue of process exit) when a node stops or fails. Unlocking will clear both persistent and not.\nAlso see the listunspent call\n",
        "examples": "\nList the unspent transactions\n> bitcoin-cli listunspent \n\nLock an unspent transaction\n> bitcoin-cli lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nList the locked transactions\n> bitcoin-cli listlockunspent \n\nUnlock the transaction again\n> bitcoin-cli lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nLock the transaction persistently in the wallet database\n> bitcoin-cli lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\" true\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "lockunspent",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "logging": [
      {
        "arguments": [],
        "description": "logging ( [\"include_category\",...] [\"exclude_category\",...] )\n\nGets and sets the logging configuration.\nWhen called without an argument, returns the list of categories with status that are currently being debug logged or not.\nWhen called with arguments, adds or removes categories from debug logging and return the lists above.\nThe arguments are evaluated in order \"include\", \"exclude\".\nIf an item is both included and excluded, it will thus end up being excluded.\nThe valid logging categories are: addrman, bench, blockstorage, cmpctblock, coindb, estimatefee, http, i2p, ipc, leveldb, libevent, mempool, mempoolrej, net, proxy, prune, qt, rand, reindex, rpc, scan, selectcoins, tor, txpackages, txreconciliation, validation, walletdb, zmq\nIn addition, the following are available as category names with special meanings:\n  - \"all\",  \"1\" : represent all logging categories.\n",
        "examples": "> bitcoin-cli logging \"[\\\"all\\\"]\" \"[\\\"http\\\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"logging\", \"params\": [[\"all\"], [\"libevent\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "logging",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "migratewallet": [
      {
        "arguments": [],
        "description": "migratewallet ( \"wallet_name\" \"passphrase\" )\n\nMigrate the wallet to a descriptor wallet.\nA new wallet backup will need to be made.\n\nThe migration process will create a backup of the wallet before migrating. This backup\nfile will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\nfor this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\nEncrypted wallets must have the passphrase provided as an argument to this call.\n\nThis RPC may take a long time to complete. Increasing the RPC client timeout is recommended.\n",
        "examples": "> bitcoin-cli migratewallet \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"migratewallet\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "migratewallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "newkeypool": [
      {
        "arguments": [],
        "description": "newkeypool\n\nEntirely clears and refills the keypool.\nWARNING: On non-HD wallets, this will require a new backup immediately, to include the new keys.\nWhen restoring a backup of an HD wallet created before the newkeypool command is run, funds received to\nnew addresses may not appear automatically. They have not been lost, but the wallet may not find them.\nThis can be fixed by running the newkeypool command on the backup and then rescanning, so the wallet\nre-generates the required keys.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "> bitcoin-cli newkeypool \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"newkeypool\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "newkeypool",
        "results": [
          {
            "description": "null",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "ping": [
      {
        "arguments": [],
        "description": "ping\n\nRequests that a ping be sent to all other nodes, to measure ping time.\nResults provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\nPing command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\n",
        "examples": "> bitcoin-cli ping \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"ping\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "ping",
        "results": [
          {
            "description": "Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.",
            "inner": [
              {
                "description": "null",
                "inner": [],
                "key_name": "",
                "type": "none"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "preciousblock": [
      {
        "arguments": [],
        "description": "preciousblock \"blockhash\"\n\nTreats a block as if it were received before others with the same work.\n\nA later preciousblock call can override the effect of an earlier one.\n\nThe effects of preciousblock are not retained across restarts.\n",
        "examples": "> bitcoin-cli preciousblock \"blockhash\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "preciousblock",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "prioritisetransaction": [
      {
        "arguments": [],
        "description": "prioritisetransaction \"txid\" ( dummy ) fee_delta\n\nAccepts the transaction into mined blocks at a higher (or lower) priority\n",
        "examples": "> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "prioritisetransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "pruneblockchain": [
      {
        "arguments": [],
        "description": "pruneblockchain height\n\n\n",
        "examples": "> bitcoin-cli pruneblockchain 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "pruneblockchain",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "psbtbumpfee": [
      {
        "arguments": [],
        "description": "psbtbumpfee \"txid\" ( options )\n\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\nReturns a PSBT instead of creating and signing a new transaction.\nAn opt-in RBF transaction with the given txid must be in the wallet.\nThe command will pay the additional fee by reducing change outputs or adding inputs when necessary.\nIt may add a new change output if one does not already exist.\nAll inputs in the original transaction will be included in the replacement transaction.\nThe command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\nBy default, the new fee will be calculated automatically using the estimatesmartfee RPC.\nThe user can specify a confirmation target for estimatesmartfee.\nAlternatively, the user can specify a fee rate in sat/vB for the new transaction.\nAt a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\nreturned by getnetworkinfo) to enter the node's mempool.\n* WARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB. *\n",
        "examples": "\nBump the fee, get the new transaction's psbt\n> bitcoin-cli psbtbumpfee <txid>",
        "name": "psbtbumpfee",
        "results": [
          {
            "description": "An opt-in RBF transaction with the given txid must be in the wallet.",
            "inner": [
              {
                "description": "The command will pay the additional fee by reducing change outputs or adding inputs when necessary.",
                "inner": [
                  {
                    "description": "It may add a new change output if one does not already exist.",
                    "inner": [
                      {
                        "description": "All inputs in the original transaction will be included in the replacement transaction.",
                        "inner": [
                          {
                            "description": "The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.",
                            "inner": [
                              {
                                "description": "By default, the new fee will be calculated automatically using the estimatesmartfee RPC.",
                                "inner": [
                                  {
                                    "description": "The user can specify a confirmation target for estimatesmartfee.",
                                    "inner": [
                                      {
                                        "description": "Alternatively, the user can specify a fee rate in sat/vB for the new transaction.",
                                        "inner": [
                                          {
                                            "description": "At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee",
                                            "inner": [
                                              {
                                                "description": "returned by getnetworkinfo) to enter the node's mempool.",
                                                "inner": [
                                                  {
                                                    "description": "* WARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB. *",
                                                    "inner": [],
                                                    "key_name": "",
                                                    "type": "string"
                                                  }
                                                ],
                                                "key_name": "",
                                                "type": "string"
                                              }
                                            ],
                                            "key_name": "",
                                            "type": "string"
                                          }
                                        ],
                                        "key_name": "",
                                        "type": "string"
                                      }
                                    ],
                                    "key_name": "",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "",
                                "type": "string"
                              }
                            ],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "removeprunedfunds": [
      {
        "arguments": [],
        "description": "removeprunedfunds \"txid\"\n\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\n",
        "examples": "> bitcoin-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"removeprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "removeprunedfunds",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "rescanblockchain": [
      {
        "arguments": [],
        "description": "rescanblockchain ( start_height stop_height )\n\nRescan the local blockchain for wallet related transactions.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nThe rescan is significantly faster when used on a descriptor wallet\nand block filters are available (using startup option \"-blockfilterindex=1\").\n",
        "examples": "> bitcoin-cli rescanblockchain 100000 120000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"rescanblockchain\", \"params\": [100000, 120000]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "rescanblockchain",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "restorewallet": [
      {
        "arguments": [],
        "description": "restorewallet \"wallet_name\" \"backup_file\" ( load_on_startup )\n\nRestores and loads a wallet from backup.\n\nThe rescan is significantly faster if a descriptor wallet is restored\nand block filters are available (using startup option \"-blockfilterindex=1\").\n",
        "examples": "> bitcoin-cli restorewallet \"testwallet\" \"home\\backups\\backup-file.bak\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"restorewallet\", \"params\": [\"testwallet\" \"home\\backups\\backup-file.bak\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli -named restorewallet wallet_name=testwallet backup_file='home\\backups\\backup-file.bak\"' load_on_startup=true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"restorewallet\", \"params\": {\"wallet_name\":\"testwallet\",\"backup_file\":\"home\\\\backups\\\\backup-file.bak\\\"\",\"load_on_startup\":true}}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "restorewallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "savemempool": [
      {
        "arguments": [],
        "description": "savemempool\n\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\n",
        "examples": "> bitcoin-cli savemempool \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"savemempool\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "savemempool",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "\"str\"      the directory and file where the mempool was saved",
                "inner": [],
                "key_name": "filename",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "scanblocks": [
      {
        "arguments": [],
        "description": "scanblocks \"action\" ( [scanobjects,...] start_height stop_height \"filtertype\" options )\n\nReturn relevant blockhashes for given descriptors (requires blockfilterindex).\nThis call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\n",
        "examples": "> bitcoin-cli scanblocks start '[\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\"]' 300000\n> bitcoin-cli scanblocks start '[\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\"]' 100 150 basic\n> bitcoin-cli scanblocks status\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scanblocks\", \"params\": [\"start\", [\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\"], 300000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scanblocks\", \"params\": [\"start\", [\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\"], 100, 150, \"basic\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scanblocks\", \"params\": [\"status\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "scanblocks",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "scantxoutset": [
      {
        "arguments": [],
        "description": "scantxoutset \"action\" ( [scanobjects,...] )\n\nScans the unspent transaction output set for entries that match certain output descriptors.\nExamples of output descriptors are:\n    addr(<address>)                      Outputs whose output script corresponds to the specified address (does not include P2PK)\n    raw(<hex script>)                    Outputs whose output script equals the specified hex-encoded bytes\n    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\n    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\n    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\n    tr(<pubkey>)                         P2TR\n    tr(<pubkey>,{pk(<pubkey>)})          P2TR with single fallback pubkey in tapscript\n    rawtr(<pubkey>)                      P2TR with the specified key as output key rather than inner\n    wsh(and_v(v:pk(<pubkey>),after(2)))  P2WSH miniscript with mandatory pubkey and a timelock\n\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\nor more path elements separated by \"/\", and optionally ending in \"/*\" (unhardened), or \"/*'\" or \"/*h\" (hardened) to specify all\nunhardened or hardened child keys.\nIn the latter case, a range needs to be specified by below if different from 1000.\nFor more information on output descriptors, see the documentation in the doc/descriptors.md file.\n",
        "examples": "> bitcoin-cli scantxoutset start '[\"raw(76a91411b366edfc0a8b66feebae5c2e25a7b6a5d1cf3188ac)#fm24fxxy\"]'\n> bitcoin-cli scantxoutset status\n> bitcoin-cli scantxoutset abort\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scantxoutset\", \"params\": [\"start\", [\"raw(76a91411b366edfc0a8b66feebae5c2e25a7b6a5d1cf3188ac)#fm24fxxy\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scantxoutset\", \"params\": [\"status\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scantxoutset\", \"params\": [\"abort\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "scantxoutset",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "send": [
      {
        "arguments": [],
        "description": "send [{\"address\":amount,...},{\"data\":\"hex\"},...] ( conf_target \"estimate_mode\" fee_rate options )\n\nEXPERIMENTAL warning: this call may be changed in future releases.\n\nSend a transaction.\n",
        "examples": "\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode\n> bitcoin-cli send '{\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\": 0.1}' 6 economical\n\nSend 0.2 BTC with a fee rate of 1.1 sat/vB using positional arguments\n> bitcoin-cli send '{\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\": 0.2}' null \"unset\" 1.1\n\nSend 0.2 BTC with a fee rate of 1 sat/vB using the options argument\n> bitcoin-cli send '{\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\": 0.2}' null \"unset\" null '{\"fee_rate\": 1}'\n\nSend 0.3 BTC with a fee rate of 25 sat/vB using named arguments\n> bitcoin-cli -named send outputs='{\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\": 0.3}' fee_rate=25\n\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\n> bitcoin-cli send '{\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\": 0.1}' 1 economical '{\"add_to_wallet\": false, \"inputs\": [{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\", \"vout\":1}]}'",
        "name": "send",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "sendall": [
      {
        "arguments": [],
        "description": "sendall [\"address\",{\"address\":amount,...},...] ( conf_target \"estimate_mode\" fee_rate options )\n\nEXPERIMENTAL warning: this call may be changed in future releases.\n\nSpend the value of all (or specific) confirmed UTXOs and unconfirmed change in the wallet to one or more recipients.\nUnconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\nIf your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\n",
        "examples": "\nSpend all UTXOs from the wallet with a fee rate of 1 sat/vB using named arguments\n> bitcoin-cli -named sendall recipients='[\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]' fee_rate=1\n\nSpend all UTXOs with a fee rate of 1.1 sat/vB using positional arguments\n> bitcoin-cli sendall '[\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]' null \"unset\" 1.1\n\nSpend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 sat/vB using the options argument\n> bitcoin-cli sendall '[\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\", \"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\"]' null \"unset\" null '{\"fee_rate\": 1.5}'\n\nLeave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 sat/vB using the options argument\n> bitcoin-cli sendall '[\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]' null \"unset\" null '{\"fee_rate\": 10, \"send_max\": true}'\n\nSpend all UTXOs with a fee rate of 1.3 sat/vB using named arguments and sending a 0.25 BTC to another recipient\n> bitcoin-cli -named sendall recipients='[{\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\": 0.25}, \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]' fee_rate=1.3\n",
        "name": "sendall",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "sendmany": [
      {
        "arguments": [],
        "description": "sendmany ( \"\" ) {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] replaceable conf_target \"estimate_mode\" fee_rate verbose )\n\nSend multiple times. Amounts are double-precision floating point numbers.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "\nSend two amounts to two different addresses:\n> bitcoin-cli sendmany \"\" \"{\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\":0.01,\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\":0.02}\"\n\nSend two amounts to two different addresses setting the confirmation and comment:\n> bitcoin-cli sendmany \"\" \"{\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\":0.01,\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\":0.02}\" 6 \"testing\"\n\nSend two amounts to two different addresses, subtract fee from amount:\n> bitcoin-cli sendmany \"\" \"{\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\":0.01,\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\":0.02}\" 1 \"\" \"[\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\",\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\"]\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"sendmany\", \"params\": [\"\", {\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\":0.01,\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\":0.02}, 6, \"testing\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "sendmany",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "sendrawtransaction": [
      {
        "arguments": [],
        "description": "sendrawtransaction \"hexstring\" ( maxfeerate maxburnamount )\n\nSubmit a raw transaction (serialized, hex-encoded) to local node and network.\n\nThe transaction will be sent unconditionally to all peers, so using sendrawtransaction\nfor manual rebroadcast may degrade privacy by leaking the transaction's origin, as\nnodes will normally not rebroadcast non-wallet transactions already in their mempool.\n\nA specific exception, RPC_TRANSACTION_ALREADY_IN_UTXO_SET, may throw if the transaction cannot be added to the mempool.\n\nRelated RPCs: createrawtransaction, signrawtransactionwithkey\n",
        "examples": "\nCreate a transaction\n> bitcoin-cli createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\"\nSign the transaction, and get back the hex\n> bitcoin-cli signrawtransactionwithwallet \"myhex\"\n\nSend the transaction (signed hex)\n> bitcoin-cli sendrawtransaction \"signedhex\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "sendrawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "sendtoaddress": [
      {
        "arguments": [],
        "description": "sendtoaddress \"address\" amount ( \"comment\" \"comment_to\" subtractfeefromamount replaceable conf_target \"estimate_mode\" avoid_reuse fee_rate verbose )\n\nSend an amount to a given address.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "\nSend 0.1 BTC\n> bitcoin-cli sendtoaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 0.1\n\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode using positional arguments\n> bitcoin-cli sendtoaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 0.1 \"donation\" \"sean's outpost\" false true 6 economical\n\nSend 0.1 BTC with a fee rate of 1.1 sat/vB, subtract fee from amount, BIP125-replaceable, using positional arguments\n> bitcoin-cli sendtoaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 0.1 \"drinks\" \"room77\" true true null \"unset\" null 1.1\n\nSend 0.2 BTC with a confirmation target of 6 blocks in economical fee estimate mode using named arguments\n> bitcoin-cli -named sendtoaddress address=\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" amount=0.2 conf_target=6 estimate_mode=\"economical\"\n\nSend 0.5 BTC with a fee rate of 25 sat/vB using named arguments\n> bitcoin-cli -named sendtoaddress address=\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" amount=0.5 fee_rate=25\n> bitcoin-cli -named sendtoaddress address=\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" amount=0.5 fee_rate=25 subtractfeefromamount=false replaceable=true avoid_reuse=true comment=\"2 pizzas\" comment_to=\"jeremy\" verbose=true",
        "name": "sendtoaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "setban": [
      {
        "arguments": [],
        "description": "setban \"subnet\" \"command\" ( bantime absolute )\n\nAttempts to add or remove an IP/Subnet from the banned list.\n",
        "examples": "> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400\n> bitcoin-cli setban \"192.168.0.0/24\" \"add\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "setban",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "sethdseed": [
      {
        "arguments": [],
        "description": "sethdseed ( newkeypool \"seed\" )\n\nSet or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\nHD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\n\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\nNote: This command is only compatible with legacy wallets.\n",
        "examples": "> bitcoin-cli sethdseed \n> bitcoin-cli sethdseed false\n> bitcoin-cli sethdseed true \"wifkey\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"sethdseed\", \"params\": [true, \"wifkey\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "sethdseed",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "setlabel": [
      {
        "arguments": [],
        "description": "setlabel \"address\" \"label\"\n\nSets the label associated with the given address.\n",
        "examples": "> bitcoin-cli setlabel \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"setlabel\", \"params\": [\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\", \"tabby\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "setlabel",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "setnetworkactive": [
      {
        "arguments": [],
        "description": "setnetworkactive state\n\nDisable/enable all p2p network activity.\n",
        "examples": "",
        "name": "setnetworkactive",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "settxfee": [
      {
        "arguments": [],
        "description": "settxfee amount\n\nSet the transaction fee rate in BTC/kvB for this wallet. Overrides the global -paytxfee command line parameter.\nCan be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\n",
        "examples": "> bitcoin-cli settxfee 0.00001\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"settxfee\", \"params\": [0.00001]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "settxfee",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "setwalletflag": [
      {
        "arguments": [],
        "description": "setwalletflag \"flag\" ( value )\n\nChange the state of the given wallet flag for a wallet.\n",
        "examples": "> bitcoin-cli setwalletflag avoid_reuse\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"setwalletflag\", \"params\": [\"avoid_reuse\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "setwalletflag",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "signmessage": [
      {
        "arguments": [],
        "description": "signmessage \"address\" \"message\"\n\nSign a message with the private key of an address\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "\nUnlock the wallet for 30 seconds\n> bitcoin-cli walletpassphrase \"mypassphrase\" 30\n\nCreate the signature\n> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"\n\nVerify the signature\n> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"my message\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "signmessage",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "signmessagewithprivkey": [
      {
        "arguments": [],
        "description": "signmessagewithprivkey \"privkey\" \"message\"\n\nSign a message with the private key of an address\n",
        "examples": "\nCreate the signature\n> bitcoin-cli signmessagewithprivkey \"privkey\" \"my message\"\n\nVerify the signature\n> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "signmessagewithprivkey",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "signrawtransactionwithkey": [
      {
        "arguments": [],
        "description": "signrawtransactionwithkey \"hexstring\" [\"privatekey\",...] ( [{\"txid\":\"hex\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\",\"witnessScript\":\"hex\",\"amount\":amount},...] \"sighashtype\" )\n\nSign inputs for raw transaction (serialized, hex-encoded).\nThe second argument is an array of base58-encoded private\nkeys that will be the only keys used to sign the transaction.\nThe third optional argument (may be null) is an array of previous transaction outputs that\nthis transaction depends on but may not yet be in the block chain.\n",
        "examples": "> bitcoin-cli signrawtransactionwithkey \"myhex\" \"[\\\"key1\\\",\\\"key2\\\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"signrawtransactionwithkey\", \"params\": [\"myhex\", \"[\\\"key1\\\",\\\"key2\\\"]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "signrawtransactionwithkey",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "signrawtransactionwithwallet": [
      {
        "arguments": [],
        "description": "signrawtransactionwithwallet \"hexstring\" ( [{\"txid\":\"hex\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\",\"witnessScript\":\"hex\",\"amount\":amount},...] \"sighashtype\" )\n\nSign inputs for raw transaction (serialized, hex-encoded).\nThe second optional argument (may be null) is an array of previous transaction outputs that\nthis transaction depends on but may not yet be in the block chain.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "> bitcoin-cli signrawtransactionwithwallet \"myhex\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"signrawtransactionwithwallet\", \"params\": [\"myhex\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "signrawtransactionwithwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "simulaterawtransaction": [
      {
        "arguments": [],
        "description": "simulaterawtransaction ( [\"rawtx\",...] {\"include_watchonly\":bool,...} )\n\nCalculate the balance change resulting in the signing and broadcasting of the given transaction(s).\n",
        "examples": "> bitcoin-cli simulaterawtransaction [\"myhex\"]\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"simulaterawtransaction\", \"params\": [[\"myhex\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "simulaterawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "stop": [
      {
        "arguments": [],
        "description": "stop\n\nRequest a graceful shutdown of Bitcoin Core.\n",
        "examples": "",
        "name": "stop",
        "results": [
          {
            "description": "\"str\"     A string with the content 'Bitcoin Core stopping'",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "submitblock": [
      {
        "arguments": [],
        "description": "submitblock \"hexdata\" ( \"dummy\" )\n\nAttempts to submit new block to network.\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.\n",
        "examples": "> bitcoin-cli submitblock \"mydata\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "submitblock",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "submitheader": [
      {
        "arguments": [],
        "description": "submitheader \"hexdata\"\n\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\nThrows when the header is invalid.\n",
        "examples": "> bitcoin-cli submitheader \"aabbcc\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"submitheader\", \"params\": [\"aabbcc\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "submitheader",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "submitpackage": [
      {
        "arguments": [],
        "description": "submitpackage [\"rawtx\",...] ( maxfeerate maxburnamount )\n\nSubmit a package of raw transactions (serialized, hex-encoded) to local node.\nThe package will be validated according to consensus and mempool policy rules. If any transaction passes, it will be accepted to mempool.\nThis RPC is experimental and the interface may be unstable. Refer to doc/policy/packages.md for documentation on package policies.\nWarning: successful submission does not mean the transactions will propagate throughout the network.\n",
        "examples": "> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"submitpackage\", \"params\": [[\"raw-parent-tx-1\", \"raw-parent-tx-2\", \"raw-child-tx\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli submitpackage '[\"raw-tx-without-unconfirmed-parents\"]'",
        "name": "submitpackage",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "testmempoolaccept": [
      {
        "arguments": [],
        "description": "testmempoolaccept [\"rawtx\",...] ( maxfeerate )\n\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\n\nIf multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.\n\nIf one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).\n\nThe maximum number of transactions allowed is 25.\n\nThis checks if transactions violate the consensus or policy rules.\n\nSee sendrawtransaction call.\n",
        "examples": "\nCreate a transaction\n> bitcoin-cli createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\"\nSign the transaction, and get back the hex\n> bitcoin-cli signrawtransactionwithwallet \"myhex\"\n\nTest acceptance of the transaction (signed hex)\n> bitcoin-cli testmempoolaccept '[\"signedhex\"]'\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"testmempoolaccept\", \"params\": [[\"signedhex\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "testmempoolaccept",
        "results": [
          {
            "description": "If multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.",
            "inner": [
              {
                "description": "If one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).",
                "inner": [
                  {
                    "description": "The maximum number of transactions allowed is 25.",
                    "inner": [
                      {
                        "description": "This checks if transactions violate the consensus or policy rules.",
                        "inner": [
                          {
                            "description": "See sendrawtransaction call.",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "unloadwallet": [
      {
        "arguments": [],
        "description": "unloadwallet ( \"wallet_name\" load_on_startup )\n\nUnloads the wallet referenced by the request endpoint, otherwise unloads the wallet specified in the argument.\nSpecifying the wallet name on a wallet endpoint is invalid.\n",
        "examples": "> bitcoin-cli unloadwallet wallet_name\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"unloadwallet\", \"params\": [wallet_name]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "unloadwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "upgradewallet": [
      {
        "arguments": [],
        "description": "upgradewallet ( version )\n\nUpgrade the wallet. Upgrades to the latest version if no version number is specified.\nNew keys may be generated and a new wallet backup will need to be made.\n",
        "examples": "> bitcoin-cli upgradewallet 169900\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"upgradewallet\", \"params\": [169900]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "upgradewallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "uptime": [
      {
        "arguments": [],
        "description": "uptime\n\nReturns the total uptime of the server.\n",
        "examples": "> bitcoin-cli uptime \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"uptime\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "uptime",
        "results": [
          {
            "description": "n     The number of seconds that the server has been running",
            "inner": [],
            "key_name": "",
            "type": "number"
          }
        ]
      }
    ],
    "utxoupdatepsbt": [
      {
        "arguments": [],
        "description": "utxoupdatepsbt \"psbt\" ( [\"\",{\"desc\":\"str\",\"range\":n or [n,n]},...] )\n\nUpdates all segwit inputs and outputs in a PSBT with data from output descriptors, the UTXO set, txindex, or the mempool.\n",
        "examples": "> bitcoin-cli utxoupdatepsbt \"psbt\"",
        "name": "utxoupdatepsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "validateaddress": [
      {
        "arguments": [],
        "description": "validateaddress \"address\"\n\nReturn information about the given bitcoin address.\n",
        "examples": "> bitcoin-cli validateaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"validateaddress\", \"params\": [\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "validateaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "verifychain": [
      {
        "arguments": [],
        "description": "verifychain ( checklevel nblocks )\n\nVerifies blockchain database.\n",
        "examples": "> bitcoin-cli verifychain \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"verifychain\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "verifychain",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "verifymessage": [
      {
        "arguments": [],
        "description": "verifymessage \"address\" \"signature\" \"message\"\n\nVerify a signed message.\n",
        "examples": "\nUnlock the wallet for 30 seconds\n> bitcoin-cli walletpassphrase \"mypassphrase\" 30\n\nCreate the signature\n> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"\n\nVerify the signature\n> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "verifymessage",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "verifytxoutproof": [
      {
        "arguments": [],
        "description": "verifytxoutproof \"proof\"\n\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\nand throwing an RPC error if the block is not in our best chain\n",
        "examples": "",
        "name": "verifytxoutproof",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "walletcreatefundedpsbt": [
      {
        "arguments": [],
        "description": "walletcreatefundedpsbt ( [{\"txid\":\"hex\",\"vout\":n,\"sequence\":n,\"weight\":n},...] ) [{\"address\":amount,...},{\"data\":\"hex\"},...] ( locktime options bip32derivs )\n\nCreates and funds a transaction in the Partially Signed Transaction format.\nImplements the Creator and Updater roles.\nAll existing inputs must either have their previous output transaction be in the wallet\nor be in the UTXO set. Solving data must be provided for non-wallet inputs.\n",
        "examples": "\nCreate a transaction with no inputs\n> bitcoin-cli walletcreatefundedpsbt \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"",
        "name": "walletcreatefundedpsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "walletdisplayaddress": [
      {
        "arguments": [],
        "description": "walletdisplayaddress \"address\"\n\nDisplay address on an external signer for verification.\n",
        "examples": "",
        "name": "walletdisplayaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "walletlock": [
      {
        "arguments": [],
        "description": "walletlock\n\nRemoves the wallet encryption key from memory, locking the wallet.\nAfter calling this method, you will need to call walletpassphrase again\nbefore being able to call any methods which require the wallet to be unlocked.\n",
        "examples": "\nSet the passphrase for 2 minutes to perform a transaction\n> bitcoin-cli walletpassphrase \"my pass phrase\" 120\n\nPerform a send (requires passphrase set)\n> bitcoin-cli sendtoaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 1.0\n\nClear the passphrase since we are done before 2 minutes is up\n> bitcoin-cli walletlock \n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"walletlock\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "walletlock",
        "results": [
          {
            "description": "null",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "walletpassphrase": [
      {
        "arguments": [],
        "description": "walletpassphrase \"passphrase\" timeout\n\nStores the wallet decryption key in memory for 'timeout' seconds.\nThis is needed prior to performing transactions related to private keys such as sending bitcoins\n\nNote:\nIssuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\ntime that overrides the old one.\n",
        "examples": "\nUnlock the wallet for 60 seconds\n> bitcoin-cli walletpassphrase \"my pass phrase\" 60\n\nLock the wallet again (before 60 seconds)\n> bitcoin-cli walletlock \n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"walletpassphrase\", \"params\": [\"my pass phrase\", 60]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "walletpassphrase",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "walletpassphrasechange": [
      {
        "arguments": [],
        "description": "walletpassphrasechange \"oldpassphrase\" \"newpassphrase\"\n\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\n",
        "examples": "> bitcoin-cli walletpassphrasechange \"old one\" \"new one\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"walletpassphrasechange\", \"params\": [\"old one\", \"new one\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/",
        "name": "walletpassphrasechange",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "walletprocesspsbt": [
      {
        "arguments": [],
        "description": "walletprocesspsbt \"psbt\" ( sign \"sighashtype\" bip32derivs finalize )\n\nUpdate a PSBT with input information from our wallet and then sign inputs\nthat we can sign for.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "> bitcoin-cli walletprocesspsbt \"psbt\"",
        "name": "walletprocesspsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ]
  }
}
