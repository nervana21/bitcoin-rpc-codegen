{
  "commands": {
    "abandontransaction": [
      {
        "arguments": [
          {
            "description": "The transaction id",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Mark in-wallet transaction <txid> as abandoned\nThis will mark this transaction and all its in-wallet descendants as abandoned which will allow\nfor their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.\nIt only works on transactions which are not included in a block and are not currently in the mempool.\nIt has no effect on transactions which are already abandoned.\n",
        "name": "abandontransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "abortrescan": [
      {
        "arguments": [],
        "description": "Stops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\nNote: Use \"getwalletinfo\" to query the scanning progress.\n",
        "name": "abortrescan",
        "results": [
          {
            "description": "true|false     Whether the abort was successful",
            "inner": [],
            "key_name": "",
            "type": "boolean"
          }
        ]
      }
    ],
    "addmultisigaddress": [
      {
        "arguments": [
          {
            "description": "The number of required signatures out of the n keys or addresses.",
            "names": [
              "nrequired"
            ],
            "optional": false,
            "type": "numeric, required"
          },
          {
            "description": "The bitcoin addresses or hex-encoded public keys",
            "names": [
              "keys"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "A label to assign the addresses to.",
            "names": [
              "label"
            ],
            "optional": true,
            "type": "string, optional"
          },
          {
            "description": "The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\".",
            "names": [
              "address_type"
            ],
            "optional": true,
            "type": "string, optional, default=set by -addresstype"
          }
        ],
        "description": "Add an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\nEach key is a Bitcoin address or hex-encoded public key.\nThis functionality is only intended for use with non-watchonly addresses.\nSee `importaddress` for watchonly p2sh address support.\nIf 'label' is specified, assign address to that label.\nNote: This command is only compatible with legacy wallets.\n",
        "name": "addmultisigaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "addnode": [
      {
        "arguments": [
          {
            "description": "The address of the peer to connect to",
            "names": [
              "node"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once",
            "names": [
              "command"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Attempt to connect using BIP324 v2 transport protocol (ignored for 'remove' command)",
            "names": [
              "v2transport"
            ],
            "optional": true,
            "type": "boolean, optional, default=set by -v2transport"
          }
        ],
        "description": "Attempts to add or remove a node from the addnode list.\nOr try a connection to a node once.\nNodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\nfull nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\nAddnode connections are limited to 8 at a time and are counted separately from the -maxconnections limit.\n",
        "name": "addnode",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "analyzepsbt": [
      {
        "arguments": [
          {
            "description": "A base64 string of a PSBT",
            "names": [
              "psbt"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Analyzes and provides information about the current status of a PSBT and its inputs\n",
        "name": "analyzepsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "backupwallet": [
      {
        "arguments": [
          {
            "description": "The destination directory or file",
            "names": [
              "destination"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Safely copies the current wallet file to the specified destination, which can either be a directory or a path with a filename.\n",
        "name": "backupwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "bumpfee": [
      {
        "arguments": [
          {
            "description": "The txid to be bumped",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\nAn opt-in RBF transaction with the given txid must be in the wallet.\nThe command will pay the additional fee by reducing change outputs or adding inputs when necessary.\nIt may add a new change output if one does not already exist.\nAll inputs in the original transaction will be included in the replacement transaction.\nThe command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\nBy default, the new fee will be calculated automatically using the estimatesmartfee RPC.\nThe user can specify a confirmation target for estimatesmartfee.\nAlternatively, the user can specify a fee rate in sat/vB for the new transaction.\nAt a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\nreturned by getnetworkinfo) to enter the node's mempool.\n* WARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB. *\n",
        "name": "bumpfee",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "clearbanned": [
      {
        "arguments": [],
        "description": "Clear all banned IPs.\n",
        "name": "clearbanned",
        "results": [
          {
            "description": "null",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "combinepsbt": [
      {
        "arguments": [
          {
            "description": "The base64 strings of partially signed transactions",
            "names": [
              "txs"
            ],
            "optional": false,
            "type": "json array, required"
          }
        ],
        "description": "Combine multiple partially signed Bitcoin transactions into one transaction.\nImplements the Combiner role.\n",
        "name": "combinepsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "combinerawtransaction": [
      {
        "arguments": [
          {
            "description": "The hex strings of partially signed transactions",
            "names": [
              "txs"
            ],
            "optional": false,
            "type": "json array, required"
          }
        ],
        "description": "Combine multiple partially signed transactions into one transaction.\nThe combined transaction may be another partially signed transaction or a \nfully signed transaction.\n",
        "name": "combinerawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "converttopsbt": [
      {
        "arguments": [
          {
            "description": "The hex string of a raw transaction",
            "names": [
              "hexstring"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "If true, any signatures in the input will be discarded and conversion",
            "names": [
              "permitsigdata"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          },
          {
            "description": "Whether the transaction hex is a serialized witness transaction.",
            "names": [
              "iswitness"
            ],
            "optional": true,
            "type": "boolean, optional, default=depends on heuristic tests"
          }
        ],
        "description": "Converts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\ncreatepsbt and walletcreatefundedpsbt should be used for new applications.\n",
        "name": "converttopsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "createmultisig": [
      {
        "arguments": [
          {
            "description": "The number of required signatures out of the n keys.",
            "names": [
              "nrequired"
            ],
            "optional": false,
            "type": "numeric, required"
          },
          {
            "description": "The hex-encoded public keys.",
            "names": [
              "keys"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\".",
            "names": [
              "address_type"
            ],
            "optional": true,
            "type": "string, optional, default=\"legacy\""
          }
        ],
        "description": "Creates a multi-signature address with n signature of m keys required.\nIt returns a json object with the address and redeemScript.\n",
        "name": "createmultisig",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "createpsbt": [
      {
        "arguments": [
          {
            "description": "The inputs",
            "names": [
              "inputs"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "The outputs specified as key-value pairs.",
            "names": [
              "outputs"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "Raw locktime. Non-0 value also locktime-activates inputs",
            "names": [
              "locktime"
            ],
            "optional": true,
            "type": "numeric, optional, default=0"
          },
          {
            "description": "Marks this transaction as BIP125-replaceable.",
            "names": [
              "replaceable"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Creates a transaction in the Partially Signed Transaction format.\nImplements the Creator role.\n",
        "name": "createpsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "createrawtransaction": [
      {
        "arguments": [
          {
            "description": "The inputs",
            "names": [
              "inputs"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "The outputs specified as key-value pairs.",
            "names": [
              "outputs"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "Raw locktime. Non-0 value also locktime-activates inputs",
            "names": [
              "locktime"
            ],
            "optional": true,
            "type": "numeric, optional, default=0"
          },
          {
            "description": "Marks this transaction as BIP125-replaceable.",
            "names": [
              "replaceable"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Create a transaction spending the given inputs and creating new outputs.\nOutputs can be addresses or data.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.\n",
        "name": "createrawtransaction",
        "results": [
          {
            "description": "Note that the transaction's inputs are not signed, and",
            "inner": [
              {
                "description": "it is not stored in the wallet or transmitted to the network.",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "createwallet": [
      {
        "arguments": [
          {
            "description": "The name for the new wallet. If this is a path, the wallet will be created at the path location.",
            "names": [
              "wallet_name"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Disable the possibility of private keys (only watchonlys are possible in this mode).",
            "names": [
              "disable_private_keys"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          },
          {
            "description": "Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.",
            "names": [
              "blank"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          },
          {
            "description": "Encrypt the wallet with this passphrase.",
            "names": [
              "passphrase"
            ],
            "optional": true,
            "type": "string, optional"
          },
          {
            "description": "Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.",
            "names": [
              "avoid_reuse"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          },
          {
            "description": "Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation. Setting to \"false\" will create a legacy wallet; This is only possible with the -deprecatedrpc=create_bdb setting because, the legacy wallet type is being deprecated and support for creating and opening legacy wallets will be removed in the future.",
            "names": [
              "descriptors"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          },
          {
            "description": "Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.",
            "names": [
              "load_on_startup"
            ],
            "optional": true,
            "type": "boolean, optional"
          },
          {
            "description": "Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.",
            "names": [
              "external_signer"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "Creates and loads a new wallet.\n",
        "name": "createwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "createwalletdescriptor": [
      {
        "arguments": [
          {
            "description": "The address type the descriptor will produce. Options are \"legacy\", \"p2sh-segwit\", \"bech32\", and \"bech32m\".",
            "names": [
              "type"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "Creates the wallet's descriptor for the given address type. The address type must be one that the wallet does not already have a descriptor for.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "name": "createwalletdescriptor",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "decodepsbt": [
      {
        "arguments": [
          {
            "description": "The PSBT base64 string",
            "names": [
              "psbt"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Return a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\n",
        "name": "decodepsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "decoderawtransaction": [
      {
        "arguments": [
          {
            "description": "The transaction hex string",
            "names": [
              "hexstring"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Whether the transaction hex is a serialized witness transaction.",
            "names": [
              "iswitness"
            ],
            "optional": true,
            "type": "boolean, optional, default=depends on heuristic tests"
          }
        ],
        "description": "Return a JSON object representing the serialized, hex-encoded transaction.\n",
        "name": "decoderawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "decodescript": [
      {
        "arguments": [
          {
            "description": "the hex-encoded script",
            "names": [
              "hexstring"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Decode a hex-encoded script.\n",
        "name": "decodescript",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "deriveaddresses": [
      {
        "arguments": [
          {
            "description": "The descriptor.",
            "names": [
              "descriptor"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.",
            "names": [
              "range"
            ],
            "optional": true,
            "type": "numeric or array, optional"
          }
        ],
        "description": "Derives one or more addresses corresponding to an output descriptor.\nExamples of output descriptors are:\n    pkh(<pubkey>)                                     P2PKH outputs for the given pubkey\n    wpkh(<pubkey>)                                    Native segwit P2PKH outputs for the given pubkey\n    sh(multi(<n>,<pubkey>,<pubkey>,...))              P2SH-multisig outputs for the given threshold and pubkeys\n    raw(<hex script>)                                 Outputs whose output script equals the specified hex-encoded bytes\n    tr(<pubkey>,multi_a(<n>,<pubkey>,<pubkey>,...))   P2TR-multisig outputs for the given threshold and pubkeys\n\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\nor more path elements separated by \"/\", where \"h\" represents a hardened child key.\nFor more information on output descriptors, see the documentation in the doc/descriptors.md file.\n",
        "name": "deriveaddresses",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "descriptorprocesspsbt": [
      {
        "arguments": [
          {
            "description": "The transaction base64 string",
            "names": [
              "psbt"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "An array of either strings or objects",
            "names": [
              "descriptors"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "The signature hash type to sign with if not specified by the PSBT. Must be one of",
            "names": [
              "sighashtype"
            ],
            "optional": true,
            "type": "string, optional, default=\"default for taproot, all otherwise\""
          },
          {
            "description": "Include BIP 32 derivation paths for public keys if we know them",
            "names": [
              "bip32derivs"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          },
          {
            "description": "Also finalize inputs if possible",
            "names": [
              "finalize"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Update all segwit inputs in a PSBT with information from output descriptors, the UTXO set or the mempool. \nThen, sign the inputs we are able to with information from the output descriptors.\n",
        "name": "descriptorprocesspsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "disconnectnode": [
      {
        "arguments": [
          {
            "description": "The IP address/port of the node",
            "names": [
              "address"
            ],
            "optional": true,
            "type": "string, optional, default=fallback to nodeid"
          },
          {
            "description": "The node ID (see getpeerinfo for node IDs)",
            "names": [
              "nodeid"
            ],
            "optional": true,
            "type": "numeric, optional, default=fallback to address"
          }
        ],
        "description": "Immediately disconnects from the specified peer node.\n\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\n\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\n",
        "name": "disconnectnode",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "dumpprivkey": [
      {
        "arguments": [
          {
            "description": "The bitcoin address for the private key",
            "names": [
              "address"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Reveals the private key corresponding to 'address'.\nThen the importprivkey can be used with this output\nNote: This command is only compatible with legacy wallets.\n",
        "name": "dumpprivkey",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "dumptxoutset": [
      {
        "arguments": [
          {
            "description": "Path to the output file. If relative, will be prefixed by datadir.",
            "names": [
              "path"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The type of snapshot to create. Can be \"latest\" to create a snapshot of the current UTXO set or \"rollback\" to temporarily roll back the state of the node to a historical block before creating the snapshot of a historical UTXO set. This parameter can be omitted if a separate \"rollback\" named parameter is specified indicating the height or hash of a specific historical block. If \"rollback\" is specified and separate \"rollback\" named parameter is not specified, this will roll back to the latest valid snapshot block that can currently be loaded with loadtxoutset.",
            "names": [
              "type"
            ],
            "optional": true,
            "type": "string, optional, default=\"\""
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "Write the serialized UTXO set to a file. This can be used in loadtxoutset afterwards if this snapshot height is supported in the chainparams as well.\n\nUnless the \"latest\" type is requested, the node will roll back to the requested height and network activity will be suspended during this process. Because of this it is discouraged to interact with the node in any other way during the execution of this call to avoid inconsistent results and race conditions, particularly RPCs that interact with blockstorage.\n\nThis call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\n",
        "name": "dumptxoutset",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "dumpwallet": [
      {
        "arguments": [
          {
            "description": "The filename with path (absolute path recommended)",
            "names": [
              "filename"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Dumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\nImported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\nNote that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\nonly backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\nNote: This command is only compatible with legacy wallets.\n",
        "name": "dumpwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "encryptwallet": [
      {
        "arguments": [
          {
            "description": "The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.",
            "names": [
              "passphrase"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Encrypts the wallet with 'passphrase'. This is for first time encryption.\nAfter this, any calls that interact with private keys such as sending or signing \nwill require the passphrase to be set prior the making these calls.\nUse the walletpassphrase call for this, and then walletlock call.\nIf the wallet is already encrypted, use the walletpassphrasechange call.\n** IMPORTANT **\nFor security reasons, the encryption process will generate a new HD seed, resulting\nin the creation of a fresh set of active descriptors. Therefore, it is crucial to\nsecurely back up the newly generated wallet file using the backupwallet RPC.\n",
        "name": "encryptwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "enumeratesigners": [
      {
        "arguments": [],
        "description": "Returns a list of external signers from -signer.\n",
        "name": "enumeratesigners",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "[                 (json array)",
                "inner": [
                  {
                    "description": "{",
                    "inner": [
                      {
                        "description": "\"hex\",     Master key fingerprint",
                        "inner": [
                          {
                            "description": "\"str\"             Device name",
                            "inner": [],
                            "key_name": "name",
                            "type": "string"
                          }
                        ],
                        "key_name": "fingerprint",
                        "type": "string"
                      },
                      {
                        "description": "},",
                        "inner": [
                          {
                            "description": "...",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "object"
                  },
                  {
                    "description": "]",
                    "inner": [],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "signers",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "estimatesmartfee": [
      {
        "arguments": [
          {
            "description": "Confirmation target in blocks (1 - 1008)",
            "names": [
              "conf_target"
            ],
            "optional": false,
            "type": "numeric, required"
          },
          {
            "description": "The fee estimate mode.",
            "names": [
              "estimate_mode"
            ],
            "optional": true,
            "type": "string, optional, default=\"economical\""
          }
        ],
        "description": "Estimates the approximate fee per kilobyte needed for a transaction to begin\nconfirmation within conf_target blocks if possible and return the number of blocks\nfor which the estimate is valid. Uses virtual transaction size as defined\nin BIP 141 (witness data is discounted).\n",
        "name": "estimatesmartfee",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "finalizepsbt": [
      {
        "arguments": [
          {
            "description": "A base64 string of a PSBT",
            "names": [
              "psbt"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "If true and the transaction is complete,",
            "names": [
              "extract"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\nnetwork serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\ncreated which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\nImplements the Finalizer and Extractor roles.\n",
        "name": "finalizepsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "fundrawtransaction": [
      {
        "arguments": [
          {
            "description": "The hex string of the raw transaction",
            "names": [
              "hexstring"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below. For backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          },
          {
            "description": "Whether the transaction hex is a serialized witness transaction.",
            "names": [
              "iswitness"
            ],
            "optional": true,
            "type": "boolean, optional, default=depends on heuristic tests"
          }
        ],
        "description": "If the transaction has no inputs, they will be automatically selected to meet its out value.\nIt will add at most one change output to the outputs.\nNo existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.\nNote that inputs which were signed may need to be resigned after completion since in/outputs have been added.\nThe inputs added will not be signed, use signrawtransactionwithkey\nor signrawtransactionwithwallet for that.\nAll existing inputs must either have their previous output transaction be in the wallet\nor be in the UTXO set. Solving data must be provided for non-wallet inputs.\nNote that all inputs selected must be of standard form and P2SH scripts must be\nin the wallet using importaddress or addmultisigaddress (to calculate fees).\nYou can see whether this is the case by checking the \"solvable\" field in the listunspent output.\nOnly pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\n",
        "name": "fundrawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getaddednodeinfo": [
      {
        "arguments": [
          {
            "description": "If provided, return information about this specific node, otherwise all nodes are returned.",
            "names": [
              "node"
            ],
            "optional": true,
            "type": "string, optional, default=all nodes"
          }
        ],
        "description": "Returns information about the given added node, or all added nodes\n(note that onetry addnodes are not listed here)\n",
        "name": "getaddednodeinfo",
        "results": [
          {
            "description": "(note that onetry addnodes are not listed here)",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getaddressesbylabel": [
      {
        "arguments": [
          {
            "description": "The label.",
            "names": [
              "label"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Returns the list of addresses assigned the specified label.\n",
        "name": "getaddressesbylabel",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getaddressinfo": [
      {
        "arguments": [
          {
            "description": "The bitcoin address for which to get information.",
            "names": [
              "address"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Return information about the given bitcoin address.\nSome of the information will only be present if the address is in the active wallet.\n",
        "name": "getaddressinfo",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getaddrmaninfo": [
      {
        "arguments": [],
        "description": "Provides information about the node's address manager by returning the number of addresses in the `new` and `tried` tables and their sum for all networks.\n",
        "name": "getaddrmaninfo",
        "results": [
          {
            "description": "{                    json object with network type as keys",
            "inner": [
              {
                "description": "{      the network (ipv4, ipv6, onion, i2p, cjdns, all_networks)",
                "inner": [
                  {
                    "description": "n,       number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.",
                    "inner": [
                      {
                        "description": "n,     number of addresses in the tried table, which represent peers the node has successfully connected to in the past.",
                        "inner": [
                          {
                            "description": "n      total number of addresses in both new/tried tables",
                            "inner": [],
                            "key_name": "total",
                            "type": "number"
                          }
                        ],
                        "key_name": "tried",
                        "type": "number"
                      }
                    ],
                    "key_name": "new",
                    "type": "number"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "network",
                "type": "object"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getbalance": [
      {
        "arguments": [
          {
            "description": "Remains for backward compatibility. Must be excluded or set to \"*\".",
            "names": [
              "dummy"
            ],
            "optional": true,
            "type": "string, optional"
          },
          {
            "description": "Only include transactions confirmed at least this many times.",
            "names": [
              "minconf"
            ],
            "optional": true,
            "type": "numeric, optional, default=0"
          },
          {
            "description": "Also include balance in watch-only addresses (see 'importaddress')",
            "names": [
              "include_watchonly"
            ],
            "optional": true,
            "type": "boolean, optional, default=true for watch-only wallets, otherwise false"
          },
          {
            "description": "(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.",
            "names": [
              "avoid_reuse"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Returns the total available balance.\nThe available balance is what the wallet considers currently spendable, and is\nthus affected by options which limit spendability such as -spendzeroconfchange.\n",
        "name": "getbalance",
        "results": [
          {
            "description": "The available balance is what the wallet considers currently spendable, and is",
            "inner": [
              {
                "description": "thus affected by options which limit spendability such as -spendzeroconfchange.",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getbalances": [
      {
        "arguments": [],
        "description": "Returns an object with all balances in BTC.\n",
        "name": "getbalances",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "{                     balances from outputs that the wallet can sign",
                "inner": [
                  {
                    "description": "n,               trusted balance (outputs created by the wallet or confirmed outputs)",
                    "inner": [
                      {
                        "description": "n,     untrusted pending balance (outputs created by others that are in the mempool)",
                        "inner": [
                          {
                            "description": "n,              balance from immature coinbase outputs",
                            "inner": [
                              {
                                "description": "n                  (numeric, optional) (only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)",
                                "inner": [],
                                "key_name": "used",
                                "type": "string"
                              }
                            ],
                            "key_name": "immature",
                            "type": "number"
                          }
                        ],
                        "key_name": "untrusted_pending",
                        "type": "number"
                      }
                    ],
                    "key_name": "trusted",
                    "type": "number"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "{               (json object, optional) watchonly balances (not present if wallet does not watch anything)",
                        "inner": [
                          {
                            "description": "n,               trusted balance (outputs created by the wallet or confirmed outputs)",
                            "inner": [
                              {
                                "description": "n,     untrusted pending balance (outputs created by others that are in the mempool)",
                                "inner": [
                                  {
                                    "description": "n               balance from immature coinbase outputs",
                                    "inner": [],
                                    "key_name": "immature",
                                    "type": "number"
                                  }
                                ],
                                "key_name": "untrusted_pending",
                                "type": "number"
                              }
                            ],
                            "key_name": "trusted",
                            "type": "number"
                          },
                          {
                            "description": "},",
                            "inner": [
                              {
                                "description": "{       hash and height of the block this information was generated on",
                                "inner": [
                                  {
                                    "description": "\"hex\",              hash of the block this information was generated on",
                                    "inner": [
                                      {
                                        "description": "n                 height of the block this information was generated on",
                                        "inner": [],
                                        "key_name": "height",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "hash",
                                    "type": "string"
                                  },
                                  {
                                    "description": "}",
                                    "inner": [],
                                    "key_name": "",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "lastprocessedblock",
                                "type": "object"
                              }
                            ],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "watchonly",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "mine",
                "type": "object"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getbestblockhash": [
      {
        "arguments": [],
        "description": "Returns the hash of the best (tip) block in the most-work fully-validated chain.\n",
        "name": "getbestblockhash",
        "results": [
          {
            "description": "\"hex\"     the block hash, hex-encoded",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getblock": [
      {
        "arguments": [
          {
            "description": "The block hash",
            "names": [
              "blockhash"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "0 for hex-encoded data, 1 for a JSON object, 2 for JSON object with transaction data, and 3 for JSON object with transaction data including prevout information for inputs",
            "names": [
              "verbosity"
            ],
            "optional": true,
            "type": "numeric, optional, default=1"
          }
        ],
        "description": "If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\nIf verbosity is 1, returns an Object with information about block <hash>.\nIf verbosity is 2, returns an Object with information about block <hash> and information about each transaction.\nIf verbosity is 3, returns an Object with information about block <hash> and information about each transaction, including prevout information for inputs (only for unpruned blocks in the current best chain).\n",
        "name": "getblock",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getblockchaininfo": [
      {
        "arguments": [],
        "description": "Returns an object containing various state info regarding blockchain processing.\n",
        "name": "getblockchaininfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "\"str\",                         current network name (main, test, testnet4, signet, regtest)",
                "inner": [
                  {
                    "description": "n,                            the height of the most-work fully-validated chain. The genesis block has height 0",
                    "inner": [
                      {
                        "description": "n,                           the current number of headers we have validated",
                        "inner": [
                          {
                            "description": "\"str\",                 the hash of the currently best block",
                            "inner": [
                              {
                                "description": "\"hex\",                          nBits: compact representation of the block difficulty target",
                                "inner": [
                                  {
                                    "description": "\"hex\",                        The difficulty target",
                                    "inner": [
                                      {
                                        "description": "n,                        the current difficulty",
                                        "inner": [
                                          {
                                            "description": "xxx,                            The block time expressed in UNIX epoch time",
                                            "inner": [
                                              {
                                                "description": "xxx,                      The median block time expressed in UNIX epoch time",
                                                "inner": [
                                                  {
                                                    "description": "n,              estimate of verification progress [0..1]",
                                                    "inner": [
                                                      {
                                                        "description": "true|false,     (debug information) estimate of whether this node is in Initial Block Download mode",
                                                        "inner": [
                                                          {
                                                            "description": "\"hex\",                     total amount of work in active chain, in hexadecimal",
                                                            "inner": [
                                                              {
                                                                "description": "n,                      the estimated size of the block and undo files on disk",
                                                                "inner": [
                                                                  {
                                                                    "description": "true|false,                   if the blocks are subject to pruning",
                                                                    "inner": [
                                                                      {
                                                                        "description": "n,                      (numeric, optional) height of the last block pruned, plus one (only present if pruning is enabled)",
                                                                        "inner": [
                                                                          {
                                                                            "description": "true|false,       (boolean, optional) whether automatic pruning is enabled (only present if pruning is enabled)",
                                                                            "inner": [
                                                                              {
                                                                                "description": "n,                (numeric, optional) the target size used by pruning (only present if automatic pruning is enabled)",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "\"hex\",             (string, optional) the block challenge (aka. block script), in hexadecimal (only present if the current network is a signet)",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "[                          (json array) any network and blockchain warnings (run with `-deprecatedrpc=warnings` to return the latest warning as a single string)",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "\"str\",                                 warning",
                                                                                            "inner": [
                                                                                              {
                                                                                                "description": "...",
                                                                                                "inner": [],
                                                                                                "key_name": "",
                                                                                                "type": "string"
                                                                                              }
                                                                                            ],
                                                                                            "key_name": "",
                                                                                            "type": "string"
                                                                                          },
                                                                                          {
                                                                                            "description": "]",
                                                                                            "inner": [],
                                                                                            "key_name": "",
                                                                                            "type": "string"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "warnings",
                                                                                        "type": "string"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "signet_challenge",
                                                                                    "type": "string"
                                                                                  }
                                                                                ],
                                                                                "key_name": "prune_target_size",
                                                                                "type": "string"
                                                                              }
                                                                            ],
                                                                            "key_name": "automatic_pruning",
                                                                            "type": "string"
                                                                          }
                                                                        ],
                                                                        "key_name": "pruneheight",
                                                                        "type": "string"
                                                                      }
                                                                    ],
                                                                    "key_name": "pruned",
                                                                    "type": "boolean"
                                                                  }
                                                                ],
                                                                "key_name": "size_on_disk",
                                                                "type": "number"
                                                              }
                                                            ],
                                                            "key_name": "chainwork",
                                                            "type": "string"
                                                          }
                                                        ],
                                                        "key_name": "initialblockdownload",
                                                        "type": "boolean"
                                                      }
                                                    ],
                                                    "key_name": "verificationprogress",
                                                    "type": "number"
                                                  }
                                                ],
                                                "key_name": "mediantime",
                                                "type": "number"
                                              }
                                            ],
                                            "key_name": "time",
                                            "type": "number"
                                          }
                                        ],
                                        "key_name": "difficulty",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "target",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "bits",
                                "type": "string"
                              }
                            ],
                            "key_name": "bestblockhash",
                            "type": "string"
                          }
                        ],
                        "key_name": "headers",
                        "type": "number"
                      }
                    ],
                    "key_name": "blocks",
                    "type": "number"
                  }
                ],
                "key_name": "chain",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getblockcount": [
      {
        "arguments": [],
        "description": "Returns the height of the most-work fully-validated chain.\nThe genesis block has height 0.\n",
        "name": "getblockcount",
        "results": [
          {
            "description": "The genesis block has height 0.",
            "inner": [
              {
                "description": "n     The current block count",
                "inner": [],
                "key_name": "",
                "type": "number"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getblockfilter": [
      {
        "arguments": [
          {
            "description": "The hash of the block",
            "names": [
              "blockhash"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The type name of the filter",
            "names": [
              "filtertype"
            ],
            "optional": true,
            "type": "string, optional, default=\"basic\""
          }
        ],
        "description": "Retrieve a BIP 157 content filter for a particular block.\n",
        "name": "getblockfilter",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getblockfrompeer": [
      {
        "arguments": [
          {
            "description": "The block hash to try to fetch",
            "names": [
              "blockhash"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The peer to fetch it from (see getpeerinfo for peer IDs)",
            "names": [
              "peer_id"
            ],
            "optional": false,
            "type": "numeric, required"
          }
        ],
        "description": "Attempt to fetch block from a given peer.\n\nWe must have the header for this block, e.g. using submitheader.\nThe block will not have any undo data which can limit the usage of the block data in a context where the undo data is needed.\nSubsequent calls for the same block may cause the response from the previous peer to be ignored.\nPeers generally ignore requests for a stale block that they never fully verified, or one that is more than a month old.\nWhen a peer does not respond with a block, we will disconnect.\nNote: The block could be re-pruned as soon as it is received.\n\nReturns an empty JSON object if the request was successfully scheduled.\n",
        "name": "getblockfrompeer",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getblockhash": [
      {
        "arguments": [
          {
            "description": "The height index",
            "names": [
              "height"
            ],
            "optional": false,
            "type": "numeric, required"
          }
        ],
        "description": "Returns hash of block in best-block-chain at height provided.\n",
        "name": "getblockhash",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getblockheader": [
      {
        "arguments": [
          {
            "description": "The block hash",
            "names": [
              "blockhash"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "true for a json object, false for the hex-encoded data",
            "names": [
              "verbose"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.\n",
        "name": "getblockheader",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getblockstats": [
      {
        "arguments": [
          {
            "description": "The block hash or height of the target block",
            "names": [
              "hash_or_height"
            ],
            "optional": false,
            "type": "string or numeric, required"
          },
          {
            "description": "Values to plot (see result below)",
            "names": [
              "stats"
            ],
            "optional": true,
            "type": "json array, optional, default=all values"
          }
        ],
        "description": "Compute per block statistics for a given window. All amounts are in satoshis.\nIt won't work for some heights with pruning.\n",
        "name": "getblockstats",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getblocktemplate": [
      {
        "arguments": [
          {
            "description": "Format of the template",
            "names": [
              "template_request"
            ],
            "optional": false,
            "type": "json object, required"
          }
        ],
        "description": "If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\nIt returns data needed to construct a block to work on.\nFor full specification, see BIPs 22, 23, 9, and 145:\n    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\n    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\n    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\n    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\n",
        "name": "getblocktemplate",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getchainstates": [
      {
        "arguments": [],
        "description": "Return information about chainstates.\n",
        "name": "getchainstates",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "n,                        the number of headers seen so far",
                "inner": [
                  {
                    "description": "[                    (json array) list of the chainstates ordered by work, with the most-work (active) chainstate last",
                    "inner": [
                      {
                        "description": "{",
                        "inner": [
                          {
                            "description": "n,                     number of blocks in this chainstate",
                            "inner": [
                              {
                                "description": "\"hex\",          blockhash of the tip",
                                "inner": [
                                  {
                                    "description": "\"hex\",                   nBits: compact representation of the block difficulty target",
                                    "inner": [
                                      {
                                        "description": "\"hex\",                 The difficulty target",
                                        "inner": [
                                          {
                                            "description": "n,                 difficulty of the tip",
                                            "inner": [
                                              {
                                                "description": "n,       progress towards the network tip",
                                                "inner": [
                                                  {
                                                    "description": "\"hex\",    (string, optional) the base block of the snapshot this chainstate is based on, if any",
                                                    "inner": [
                                                      {
                                                        "description": "n,       size of the coinsdb cache",
                                                        "inner": [
                                                          {
                                                            "description": "n,      size of the coinstip cache",
                                                            "inner": [
                                                              {
                                                                "description": "true|false          whether the chainstate is fully validated. True if all blocks in the chainstate were validated, false if the chain is based on a snapshot and the snapshot has not yet been validated.",
                                                                "inner": [],
                                                                "key_name": "validated",
                                                                "type": "boolean"
                                                              }
                                                            ],
                                                            "key_name": "coins_tip_cache_bytes",
                                                            "type": "number"
                                                          }
                                                        ],
                                                        "key_name": "coins_db_cache_bytes",
                                                        "type": "number"
                                                      }
                                                    ],
                                                    "key_name": "snapshot_blockhash",
                                                    "type": "string"
                                                  }
                                                ],
                                                "key_name": "verificationprogress",
                                                "type": "number"
                                              }
                                            ],
                                            "key_name": "difficulty",
                                            "type": "number"
                                          }
                                        ],
                                        "key_name": "target",
                                        "type": "string"
                                      }
                                    ],
                                    "key_name": "bits",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "bestblockhash",
                                "type": "string"
                              }
                            ],
                            "key_name": "blocks",
                            "type": "number"
                          },
                          {
                            "description": "},",
                            "inner": [
                              {
                                "description": "...",
                                "inner": [],
                                "key_name": "",
                                "type": "string"
                              }
                            ],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "object"
                      },
                      {
                        "description": "]",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "chainstates",
                    "type": "string"
                  }
                ],
                "key_name": "headers",
                "type": "number"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getchaintips": [
      {
        "arguments": [],
        "description": "Return information about all known tips in the block tree, including the main chain as well as orphaned branches.\n",
        "name": "getchaintips",
        "results": [
          {
            "description": "[                        (json array)",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "n,         height of the chain tip",
                    "inner": [
                      {
                        "description": "\"hex\",       block hash of the tip",
                        "inner": [
                          {
                            "description": "n,      zero for main chain, otherwise length of branch connecting the tip to the main chain",
                            "inner": [
                              {
                                "description": "\"str\"      status of the chain, \"active\" for the main chain",
                                "inner": [
                                  {
                                    "description": "Possible values for status:",
                                    "inner": [],
                                    "key_name": "",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "status",
                                "type": "string"
                              }
                            ],
                            "key_name": "branchlen",
                            "type": "number"
                          }
                        ],
                        "key_name": "hash",
                        "type": "string"
                      }
                    ],
                    "key_name": "height",
                    "type": "number"
                  }
                ],
                "key_name": "",
                "type": "object"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getchaintxstats": [
      {
        "arguments": [
          {
            "description": "Size of the window in number of blocks",
            "names": [
              "nblocks"
            ],
            "optional": true,
            "type": "numeric, optional, default=one month"
          },
          {
            "description": "The hash of the block that ends the window.",
            "names": [
              "blockhash"
            ],
            "optional": true,
            "type": "string, optional, default=chain tip"
          }
        ],
        "description": "Compute statistics about the total number and rate of transactions in the chain.\n",
        "name": "getchaintxstats",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getconnectioncount": [
      {
        "arguments": [],
        "description": "Returns the number of connections to other nodes.\n",
        "name": "getconnectioncount",
        "results": [
          {
            "description": "n     The connection count",
            "inner": [],
            "key_name": "",
            "type": "number"
          }
        ]
      }
    ],
    "getdeploymentinfo": [
      {
        "arguments": [
          {
            "description": "The block hash at which to query deployment state",
            "names": [
              "blockhash"
            ],
            "optional": true,
            "type": "string, optional, default=\"hash of current chain tip\""
          }
        ],
        "description": "Returns an object containing various state info regarding deployments of consensus changes.\n",
        "name": "getdeploymentinfo",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getdescriptoractivity": [
      {
        "arguments": [
          {
            "description": "The list of blockhashes to examine for activity. Order doesn't matter. Must be along main chain or an error is thrown.",
            "names": [
              "blockhashes"
            ],
            "optional": true,
            "type": "json array, optional"
          },
          {
            "description": "Array of scan objects. Required for \"start\" action",
            "names": [
              "scanobjects"
            ],
            "optional": true,
            "type": "json array, optional"
          },
          {
            "description": "Whether to include unconfirmed activity",
            "names": [
              "include_mempool"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Get spend and receive activity associated with a set of descriptors for a set of blocks. This command pairs well with the `relevant_blocks` output of `scanblocks()`.\nThis call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\n",
        "name": "getdescriptoractivity",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getdescriptorinfo": [
      {
        "arguments": [
          {
            "description": "The descriptor.",
            "names": [
              "descriptor"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Analyses a descriptor.\n",
        "name": "getdescriptorinfo",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getdifficulty": [
      {
        "arguments": [],
        "description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.\n",
        "name": "getdifficulty",
        "results": [
          {
            "description": "n     the proof-of-work difficulty as a multiple of the minimum difficulty.",
            "inner": [],
            "key_name": "",
            "type": "number"
          }
        ]
      }
    ],
    "gethdkeys": [
      {
        "arguments": [
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "List all BIP 32 HD keys in the wallet and which descriptors use them.\n",
        "name": "gethdkeys",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getindexinfo": [
      {
        "arguments": [
          {
            "description": "Filter results for an index with a specific name.",
            "names": [
              "index_name"
            ],
            "optional": true,
            "type": "string, optional"
          }
        ],
        "description": "Returns the status of one or all available indices currently running in the node.\n",
        "name": "getindexinfo",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getmemoryinfo": [
      {
        "arguments": [
          {
            "description": "determines what kind of information is returned.",
            "names": [
              "mode"
            ],
            "optional": true,
            "type": "string, optional, default=\"stats\""
          }
        ],
        "description": "Returns an object containing information about memory usage.\n",
        "name": "getmemoryinfo",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getmempoolancestors": [
      {
        "arguments": [
          {
            "description": "The transaction id (must be in mempool)",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "True for a json object, false for array of transaction ids",
            "names": [
              "verbose"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "If txid is in the mempool, returns all in-mempool ancestors.\n",
        "name": "getmempoolancestors",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getmempooldescendants": [
      {
        "arguments": [
          {
            "description": "The transaction id (must be in mempool)",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "True for a json object, false for array of transaction ids",
            "names": [
              "verbose"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "If txid is in the mempool, returns all in-mempool descendants.\n",
        "name": "getmempooldescendants",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getmempoolentry": [
      {
        "arguments": [
          {
            "description": "The transaction id (must be in mempool)",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Returns mempool data for given transaction\n",
        "name": "getmempoolentry",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getmempoolinfo": [
      {
        "arguments": [],
        "description": "Returns details on the active state of the TX memory pool.\n",
        "name": "getmempoolinfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "true|false,         True if the initial load attempt of the persisted mempool finished",
                "inner": [
                  {
                    "description": "n,                    Current tx count",
                    "inner": [
                      {
                        "description": "n,                   Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted",
                        "inner": [
                          {
                            "description": "n,                   Total memory usage for the mempool",
                            "inner": [
                              {
                                "description": "n,               Total fees for the mempool in BTC, ignoring modified fees through prioritisetransaction",
                                "inner": [
                                  {
                                    "description": "n,              Maximum memory usage for the mempool",
                                    "inner": [
                                      {
                                        "description": "n,           Minimum fee rate in BTC/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee",
                                        "inner": [
                                          {
                                            "description": "n,           Current minimum relay fee for transactions",
                                            "inner": [
                                              {
                                                "description": "n,     minimum fee rate increment for mempool limiting or replacement in BTC/kvB",
                                                "inner": [
                                                  {
                                                    "description": "n,        Current number of transactions that haven't passed initial broadcast yet",
                                                    "inner": [
                                                      {
                                                        "description": "true|false         True if the mempool accepts RBF without replaceability signaling inspection (DEPRECATED)",
                                                        "inner": [],
                                                        "key_name": "fullrbf",
                                                        "type": "boolean"
                                                      }
                                                    ],
                                                    "key_name": "unbroadcastcount",
                                                    "type": "number"
                                                  }
                                                ],
                                                "key_name": "incrementalrelayfee",
                                                "type": "number"
                                              }
                                            ],
                                            "key_name": "minrelaytxfee",
                                            "type": "number"
                                          }
                                        ],
                                        "key_name": "mempoolminfee",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "maxmempool",
                                    "type": "number"
                                  }
                                ],
                                "key_name": "total_fee",
                                "type": "number"
                              }
                            ],
                            "key_name": "usage",
                            "type": "number"
                          }
                        ],
                        "key_name": "bytes",
                        "type": "number"
                      }
                    ],
                    "key_name": "size",
                    "type": "number"
                  }
                ],
                "key_name": "loaded",
                "type": "boolean"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getmininginfo": [
      {
        "arguments": [],
        "description": "Returns a json object containing mining-related information.\n",
        "name": "getmininginfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "n,                   The current block",
                "inner": [
                  {
                    "description": "n,      (numeric, optional) The block weight (including reserved weight for block header, txs count and coinbase tx) of the last assembled block (only present if a block was ever assembled)",
                    "inner": [
                      {
                        "description": "n,          (numeric, optional) The number of block transactions (excluding coinbase) of the last assembled block (only present if a block was ever assembled)",
                        "inner": [
                          {
                            "description": "\"hex\",                 The current nBits, compact representation of the block difficulty target",
                            "inner": [
                              {
                                "description": "n,               The current difficulty",
                                "inner": [
                                  {
                                    "description": "\"hex\",               The current target",
                                    "inner": [
                                      {
                                        "description": "n,            The network hashes per second",
                                        "inner": [
                                          {
                                            "description": "n,                 The size of the mempool",
                                            "inner": [
                                              {
                                                "description": "\"str\",                current network name (main, test, testnet4, signet, regtest)",
                                                "inner": [
                                                  {
                                                    "description": "\"hex\",    (string, optional) The block challenge (aka. block script), in hexadecimal (only present if the current network is a signet)",
                                                    "inner": [
                                                      {
                                                        "description": "{                      The next block",
                                                        "inner": [
                                                          {
                                                            "description": "n,                 The next height",
                                                            "inner": [
                                                              {
                                                                "description": "\"hex\",               The next target nBits",
                                                                "inner": [
                                                                  {
                                                                    "description": "n,             The next difficulty",
                                                                    "inner": [
                                                                      {
                                                                        "description": "\"hex\"              The next target",
                                                                        "inner": [],
                                                                        "key_name": "target",
                                                                        "type": "string"
                                                                      }
                                                                    ],
                                                                    "key_name": "difficulty",
                                                                    "type": "number"
                                                                  }
                                                                ],
                                                                "key_name": "bits",
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "key_name": "height",
                                                            "type": "number"
                                                          },
                                                          {
                                                            "description": "},",
                                                            "inner": [
                                                              {
                                                                "description": "[                 (json array) any network and blockchain warnings (run with `-deprecatedrpc=warnings` to return the latest warning as a single string)",
                                                                "inner": [
                                                                  {
                                                                    "description": "\"str\",                        warning",
                                                                    "inner": [
                                                                      {
                                                                        "description": "...",
                                                                        "inner": [],
                                                                        "key_name": "",
                                                                        "type": "string"
                                                                      }
                                                                    ],
                                                                    "key_name": "",
                                                                    "type": "string"
                                                                  },
                                                                  {
                                                                    "description": "]",
                                                                    "inner": [],
                                                                    "key_name": "",
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "key_name": "warnings",
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "key_name": "",
                                                            "type": "string"
                                                          }
                                                        ],
                                                        "key_name": "next",
                                                        "type": "object"
                                                      }
                                                    ],
                                                    "key_name": "signet_challenge",
                                                    "type": "string"
                                                  }
                                                ],
                                                "key_name": "chain",
                                                "type": "string"
                                              }
                                            ],
                                            "key_name": "pooledtx",
                                            "type": "number"
                                          }
                                        ],
                                        "key_name": "networkhashps",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "target",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "difficulty",
                                "type": "number"
                              }
                            ],
                            "key_name": "bits",
                            "type": "string"
                          }
                        ],
                        "key_name": "currentblocktx",
                        "type": "string"
                      }
                    ],
                    "key_name": "currentblockweight",
                    "type": "string"
                  }
                ],
                "key_name": "blocks",
                "type": "number"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getnettotals": [
      {
        "arguments": [],
        "description": "Returns information about network traffic, including bytes in, bytes out,\nand current system time.\n",
        "name": "getnettotals",
        "results": [
          {
            "description": "and current system time.",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "n,                         Total bytes received",
                    "inner": [
                      {
                        "description": "n,                         Total bytes sent",
                        "inner": [
                          {
                            "description": "xxx,                           Current system UNIX epoch time in milliseconds",
                            "inner": [
                              {
                                "description": "{",
                                "inner": [
                                  {
                                    "description": "n,                            Length of the measuring timeframe in seconds",
                                    "inner": [
                                      {
                                        "description": "n,                               Target in bytes",
                                        "inner": [
                                          {
                                            "description": "true|false,              True if target is reached",
                                            "inner": [
                                              {
                                                "description": "true|false,     True if serving historical blocks",
                                                "inner": [
                                                  {
                                                    "description": "n,                  Bytes left in current time cycle",
                                                    "inner": [
                                                      {
                                                        "description": "n                    Seconds left in current time cycle",
                                                        "inner": [],
                                                        "key_name": "time_left_in_cycle",
                                                        "type": "number"
                                                      }
                                                    ],
                                                    "key_name": "bytes_left_in_cycle",
                                                    "type": "number"
                                                  }
                                                ],
                                                "key_name": "serve_historical_blocks",
                                                "type": "boolean"
                                              }
                                            ],
                                            "key_name": "target_reached",
                                            "type": "boolean"
                                          }
                                        ],
                                        "key_name": "target",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "timeframe",
                                    "type": "number"
                                  },
                                  {
                                    "description": "}",
                                    "inner": [],
                                    "key_name": "",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "uploadtarget",
                                "type": "object"
                              }
                            ],
                            "key_name": "timemillis",
                            "type": "number"
                          }
                        ],
                        "key_name": "totalbytessent",
                        "type": "number"
                      }
                    ],
                    "key_name": "totalbytesrecv",
                    "type": "number"
                  },
                  {
                    "description": "}",
                    "inner": [],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "object"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getnetworkhashps": [
      {
        "arguments": [
          {
            "description": "The number of previous blocks to calculate estimate from, or -1 for blocks since last difficulty change.",
            "names": [
              "nblocks"
            ],
            "optional": true,
            "type": "numeric, optional, default=120"
          },
          {
            "description": "To estimate at the time of the given height.",
            "names": [
              "height"
            ],
            "optional": true,
            "type": "numeric, optional, default=-1"
          }
        ],
        "description": "Returns the estimated network hashes per second based on the last n blocks.\nPass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\nPass in [height] to estimate the network speed at the time when a certain block was found.\n",
        "name": "getnetworkhashps",
        "results": [
          {
            "description": "Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.",
            "inner": [
              {
                "description": "Pass in [height] to estimate the network speed at the time when a certain block was found.",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getnetworkinfo": [
      {
        "arguments": [],
        "description": "Returns an object containing various state info regarding P2P networking.\n",
        "name": "getnetworkinfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "n,                                      the server version",
                "inner": [
                  {
                    "description": "\"str\",                               the server subversion string",
                    "inner": [
                      {
                        "description": "n,                              the protocol version",
                        "inner": [
                          {
                            "description": "\"hex\",                            the services we offer to the network",
                            "inner": [
                              {
                                "description": "[                           (json array) the services we offer to the network, in human-readable form",
                                "inner": [
                                  {
                                    "description": "\"str\",                                            the service name",
                                    "inner": [
                                      {
                                        "description": "...",
                                        "inner": [],
                                        "key_name": "",
                                        "type": "string"
                                      }
                                    ],
                                    "key_name": "",
                                    "type": "string"
                                  },
                                  {
                                    "description": "],",
                                    "inner": [
                                      {
                                        "description": "true|false,                          true if transaction relay is requested from peers",
                                        "inner": [
                                          {
                                            "description": "n,                                   the time offset",
                                            "inner": [
                                              {
                                                "description": "n,                                  the total number of connections",
                                                "inner": [
                                                  {
                                                    "description": "n,                               the number of inbound connections",
                                                    "inner": [
                                                      {
                                                        "description": "n,                              the number of outbound connections",
                                                        "inner": [
                                                          {
                                                            "description": "true|false,                       whether p2p networking is enabled",
                                                            "inner": [
                                                              {
                                                                "description": "[                                     (json array) information per network",
                                                                "inner": [
                                                                  {
                                                                    "description": "{",
                                                                    "inner": [
                                                                      {
                                                                        "description": "\"str\",                                 network (ipv4, ipv6, onion, i2p, cjdns)",
                                                                        "inner": [
                                                                          {
                                                                            "description": "true|false,                         is the network limited using -onlynet?",
                                                                            "inner": [
                                                                              {
                                                                                "description": "true|false,                       is the network reachable?",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "\"str\",                                (\"host:port\") the proxy that is used for this network, or empty if none",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "true|false      Whether randomized credentials are used",
                                                                                        "inner": [],
                                                                                        "key_name": "proxy_randomize_credentials",
                                                                                        "type": "boolean"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "proxy",
                                                                                    "type": "string"
                                                                                  }
                                                                                ],
                                                                                "key_name": "reachable",
                                                                                "type": "boolean"
                                                                              }
                                                                            ],
                                                                            "key_name": "limited",
                                                                            "type": "boolean"
                                                                          }
                                                                        ],
                                                                        "key_name": "name",
                                                                        "type": "string"
                                                                      },
                                                                      {
                                                                        "description": "},",
                                                                        "inner": [
                                                                          {
                                                                            "description": "...",
                                                                            "inner": [],
                                                                            "key_name": "",
                                                                            "type": "string"
                                                                          }
                                                                        ],
                                                                        "key_name": "",
                                                                        "type": "string"
                                                                      }
                                                                    ],
                                                                    "key_name": "",
                                                                    "type": "object"
                                                                  },
                                                                  {
                                                                    "description": "],",
                                                                    "inner": [
                                                                      {
                                                                        "description": "n,                                     minimum relay fee rate for transactions in BTC/kvB",
                                                                        "inner": [
                                                                          {
                                                                            "description": "n,                               minimum fee rate increment for mempool limiting or replacement in BTC/kvB",
                                                                            "inner": [
                                                                              {
                                                                                "description": "[                               (json array) list of local addresses",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "{",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "\"str\",                              network address",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "n,                                     network port",
                                                                                            "inner": [
                                                                                              {
                                                                                                "description": "n                                     relative score",
                                                                                                "inner": [],
                                                                                                "key_name": "score",
                                                                                                "type": "number"
                                                                                              }
                                                                                            ],
                                                                                            "key_name": "port",
                                                                                            "type": "number"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "address",
                                                                                        "type": "string"
                                                                                      },
                                                                                      {
                                                                                        "description": "},",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "...",
                                                                                            "inner": [],
                                                                                            "key_name": "",
                                                                                            "type": "string"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "",
                                                                                        "type": "string"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "",
                                                                                    "type": "object"
                                                                                  },
                                                                                  {
                                                                                    "description": "],",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "[                                     (json array) any network and blockchain warnings (run with `-deprecatedrpc=warnings` to return the latest warning as a single string)",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "\"str\",                                            warning",
                                                                                            "inner": [
                                                                                              {
                                                                                                "description": "...",
                                                                                                "inner": [],
                                                                                                "key_name": "",
                                                                                                "type": "string"
                                                                                              }
                                                                                            ],
                                                                                            "key_name": "",
                                                                                            "type": "string"
                                                                                          },
                                                                                          {
                                                                                            "description": "]",
                                                                                            "inner": [],
                                                                                            "key_name": "",
                                                                                            "type": "string"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "warnings",
                                                                                        "type": "string"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "",
                                                                                    "type": "string"
                                                                                  }
                                                                                ],
                                                                                "key_name": "localaddresses",
                                                                                "type": "string"
                                                                              }
                                                                            ],
                                                                            "key_name": "incrementalfee",
                                                                            "type": "number"
                                                                          }
                                                                        ],
                                                                        "key_name": "relayfee",
                                                                        "type": "number"
                                                                      }
                                                                    ],
                                                                    "key_name": "",
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "key_name": "networks",
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "key_name": "networkactive",
                                                            "type": "boolean"
                                                          }
                                                        ],
                                                        "key_name": "connections_out",
                                                        "type": "number"
                                                      }
                                                    ],
                                                    "key_name": "connections_in",
                                                    "type": "number"
                                                  }
                                                ],
                                                "key_name": "connections",
                                                "type": "number"
                                              }
                                            ],
                                            "key_name": "timeoffset",
                                            "type": "number"
                                          }
                                        ],
                                        "key_name": "localrelay",
                                        "type": "boolean"
                                      }
                                    ],
                                    "key_name": "",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "localservicesnames",
                                "type": "string"
                              }
                            ],
                            "key_name": "localservices",
                            "type": "string"
                          }
                        ],
                        "key_name": "protocolversion",
                        "type": "number"
                      }
                    ],
                    "key_name": "subversion",
                    "type": "string"
                  }
                ],
                "key_name": "version",
                "type": "number"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getnewaddress": [
      {
        "arguments": [
          {
            "description": "The label name for the address to be linked to. It can also be set to the empty string \"\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.",
            "names": [
              "label"
            ],
            "optional": true,
            "type": "string, optional, default=\"\""
          },
          {
            "description": "The address type to use. Options are \"legacy\", \"p2sh-segwit\", \"bech32\", and \"bech32m\".",
            "names": [
              "address_type"
            ],
            "optional": true,
            "type": "string, optional, default=set by -addresstype"
          }
        ],
        "description": "Returns a new Bitcoin address for receiving payments.\nIf 'label' is specified, it is added to the address book \nso payments received with the address will be associated with 'label'.\n",
        "name": "getnewaddress",
        "results": [
          {
            "description": "If 'label' is specified, it is added to the address book",
            "inner": [
              {
                "description": "so payments received with the address will be associated with 'label'.",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getnodeaddresses": [
      {
        "arguments": [
          {
            "description": "The maximum number of addresses to return. Specify 0 to return all known addresses.",
            "names": [
              "count"
            ],
            "optional": true,
            "type": "numeric, optional, default=1"
          },
          {
            "description": "Return only addresses of the specified network. Can be one of: ipv4, ipv6, onion, i2p, cjdns.",
            "names": [
              "network"
            ],
            "optional": true,
            "type": "string, optional, default=all networks"
          }
        ],
        "description": "Return known addresses, after filtering for quality and recency.\nThese can potentially be used to find new peers in the network.\nThe total number of addresses known to the node may be higher.\n",
        "name": "getnodeaddresses",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getpeerinfo": [
      {
        "arguments": [],
        "description": "Returns data about each connected network peer as a json array of objects.\n",
        "name": "getpeerinfo",
        "results": [
          {
            "description": "[                                         (json array)",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "n,                              Peer index",
                    "inner": [
                      {
                        "description": "\"str\",                        (host:port) The IP address and port of the peer",
                        "inner": [
                          {
                            "description": "\"str\",                   (string, optional) (ip:port) Bind address of the connection to the peer",
                            "inner": [
                              {
                                "description": "\"str\",                  (string, optional) (ip:port) Local address as reported by the peer",
                                "inner": [
                                  {
                                    "description": "\"str\",                     Network (ipv4, ipv6, onion, i2p, cjdns, not_publicly_routable)",
                                    "inner": [
                                      {
                                        "description": "n,                      (numeric, optional) Mapped AS (Autonomous System) number at the end of the BGP route to the peer, used for diversifying",
                                        "inner": [
                                          {
                                            "description": "peer selection (only displayed if the -asmap config option is set)",
                                            "inner": [],
                                            "key_name": "",
                                            "type": "string"
                                          },
                                          {
                                            "description": "\"hex\",                    The services offered",
                                            "inner": [
                                              {
                                                "description": "[                   (json array) the services offered, in human-readable form",
                                                "inner": [
                                                  {
                                                    "description": "\"str\",                               the service name if it is recognised",
                                                    "inner": [
                                                      {
                                                        "description": "...",
                                                        "inner": [],
                                                        "key_name": "",
                                                        "type": "string"
                                                      }
                                                    ],
                                                    "key_name": "",
                                                    "type": "string"
                                                  },
                                                  {
                                                    "description": "],",
                                                    "inner": [
                                                      {
                                                        "description": "true|false,              Whether we relay transactions to this peer",
                                                        "inner": [
                                                          {
                                                            "description": "xxx,                      The UNIX epoch time of the last send",
                                                            "inner": [
                                                              {
                                                                "description": "xxx,                      The UNIX epoch time of the last receive",
                                                                "inner": [
                                                                  {
                                                                    "description": "xxx,              The UNIX epoch time of the last valid transaction received from this peer",
                                                                    "inner": [
                                                                      {
                                                                        "description": "xxx,                    The UNIX epoch time of the last block received from this peer",
                                                                        "inner": [
                                                                          {
                                                                            "description": "n,                       The total bytes sent",
                                                                            "inner": [
                                                                              {
                                                                                "description": "n,                       The total bytes received",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "xxx,                      The UNIX epoch time of the connection",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "n,                      The time offset in seconds",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "n,                       (numeric, optional) The last ping time in milliseconds (ms), if any",
                                                                                            "inner": [
                                                                                              {
                                                                                                "description": "n,                        (numeric, optional) The minimum observed ping time in milliseconds (ms), if any",
                                                                                                "inner": [
                                                                                                  {
                                                                                                    "description": "n,                       (numeric, optional) The duration in milliseconds (ms) of an outstanding ping (if non-zero)",
                                                                                                    "inner": [
                                                                                                      {
                                                                                                        "description": "n,                         The peer version, such as 70001",
                                                                                                        "inner": [
                                                                                                          {
                                                                                                            "description": "\"str\",                      The string version",
                                                                                                            "inner": [
                                                                                                              {
                                                                                                                "description": "true|false,                Inbound (true) or Outbound (false)",
                                                                                                                "inner": [
                                                                                                                  {
                                                                                                                    "description": "true|false,           Whether we selected peer as (compact blocks) high-bandwidth peer",
                                                                                                                    "inner": [
                                                                                                                      {
                                                                                                                        "description": "true|false,         Whether peer selected us as (compact blocks) high-bandwidth peer",
                                                                                                                        "inner": [
                                                                                                                          {
                                                                                                                            "description": "n,                  The starting height (block) of the peer",
                                                                                                                            "inner": [
                                                                                                                              {
                                                                                                                                "description": "n,               The current height of header pre-synchronization with this peer, or -1 if no low-work sync is in progress",
                                                                                                                                "inner": [
                                                                                                                                  {
                                                                                                                                    "description": "n,                  The last header we have in common with this peer",
                                                                                                                                    "inner": [
                                                                                                                                      {
                                                                                                                                        "description": "n,                   The last block we have in common with this peer",
                                                                                                                                        "inner": [
                                                                                                                                          {
                                                                                                                                            "description": "[                        (json array)",
                                                                                                                                            "inner": [
                                                                                                                                              {
                                                                                                                                                "description": "n,                                   The heights of blocks we're currently asking from this peer",
                                                                                                                                                "inner": [
                                                                                                                                                  {
                                                                                                                                                    "description": "...",
                                                                                                                                                    "inner": [],
                                                                                                                                                    "key_name": "",
                                                                                                                                                    "type": "string"
                                                                                                                                                  }
                                                                                                                                                ],
                                                                                                                                                "key_name": "",
                                                                                                                                                "type": "number"
                                                                                                                                              },
                                                                                                                                              {
                                                                                                                                                "description": "],",
                                                                                                                                                "inner": [
                                                                                                                                                  {
                                                                                                                                                    "description": "true|false,     Whether we participate in address relay with this peer",
                                                                                                                                                    "inner": [
                                                                                                                                                      {
                                                                                                                                                        "description": "n,                  The total number of addresses processed, excluding those dropped due to rate limiting",
                                                                                                                                                        "inner": [
                                                                                                                                                          {
                                                                                                                                                            "description": "n,               The total number of addresses dropped due to rate limiting",
                                                                                                                                                            "inner": [
                                                                                                                                                              {
                                                                                                                                                                "description": "[                     (json array) Any special permissions that have been granted to this peer",
                                                                                                                                                                "inner": [
                                                                                                                                                                  {
                                                                                                                                                                    "description": "\"str\",                               bloomfilter (allow requesting BIP37 filtered blocks and transactions),",
                                                                                                                                                                    "inner": [
                                                                                                                                                                      {
                                                                                                                                                                        "description": "noban (do not ban for misbehavior; implies download),",
                                                                                                                                                                        "inner": [
                                                                                                                                                                          {
                                                                                                                                                                            "description": "forcerelay (relay transactions that are already in the mempool; implies relay),",
                                                                                                                                                                            "inner": [
                                                                                                                                                                              {
                                                                                                                                                                                "description": "relay (relay even in -blocksonly mode, and unlimited transaction announcements),",
                                                                                                                                                                                "inner": [
                                                                                                                                                                                  {
                                                                                                                                                                                    "description": "mempool (allow requesting BIP35 mempool contents),",
                                                                                                                                                                                    "inner": [
                                                                                                                                                                                      {
                                                                                                                                                                                        "description": "download (allow getheaders during IBD, no disconnect after maxuploadtarget limit),",
                                                                                                                                                                                        "inner": [
                                                                                                                                                                                          {
                                                                                                                                                                                            "description": "addr (responses to GETADDR avoid hitting the cache and contain random records with the most up-to-date info).",
                                                                                                                                                                                            "inner": [],
                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                          }
                                                                                                                                                                                        ],
                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                      }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                  }
                                                                                                                                                                                ],
                                                                                                                                                                                "key_name": "",
                                                                                                                                                                                "type": "string"
                                                                                                                                                                              }
                                                                                                                                                                            ],
                                                                                                                                                                            "key_name": "",
                                                                                                                                                                            "type": "string"
                                                                                                                                                                          }
                                                                                                                                                                        ],
                                                                                                                                                                        "key_name": "",
                                                                                                                                                                        "type": "string"
                                                                                                                                                                      },
                                                                                                                                                                      {
                                                                                                                                                                        "description": "...",
                                                                                                                                                                        "inner": [],
                                                                                                                                                                        "key_name": "",
                                                                                                                                                                        "type": "string"
                                                                                                                                                                      }
                                                                                                                                                                    ],
                                                                                                                                                                    "key_name": "",
                                                                                                                                                                    "type": "string"
                                                                                                                                                                  },
                                                                                                                                                                  {
                                                                                                                                                                    "description": "],",
                                                                                                                                                                    "inner": [
                                                                                                                                                                      {
                                                                                                                                                                        "description": "n,                    The minimum fee rate for transactions this peer accepts",
                                                                                                                                                                        "inner": [
                                                                                                                                                                          {
                                                                                                                                                                            "description": "{",
                                                                                                                                                                            "inner": [
                                                                                                                                                                              {
                                                                                                                                                                                "description": "n,                           The total bytes sent aggregated by message type",
                                                                                                                                                                                "inner": [
                                                                                                                                                                                  {
                                                                                                                                                                                    "description": "When a message type is not listed in this json object, the bytes sent are 0.",
                                                                                                                                                                                    "inner": [
                                                                                                                                                                                      {
                                                                                                                                                                                        "description": "Only known message types can appear as keys in the object.",
                                                                                                                                                                                        "inner": [],
                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                      }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                  },
                                                                                                                                                                                  {
                                                                                                                                                                                    "description": "...",
                                                                                                                                                                                    "inner": [],
                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                  }
                                                                                                                                                                                ],
                                                                                                                                                                                "key_name": "msg",
                                                                                                                                                                                "type": "number"
                                                                                                                                                                              },
                                                                                                                                                                              {
                                                                                                                                                                                "description": "},",
                                                                                                                                                                                "inner": [
                                                                                                                                                                                  {
                                                                                                                                                                                    "description": "{",
                                                                                                                                                                                    "inner": [
                                                                                                                                                                                      {
                                                                                                                                                                                        "description": "n,                           The total bytes received aggregated by message type",
                                                                                                                                                                                        "inner": [
                                                                                                                                                                                          {
                                                                                                                                                                                            "description": "When a message type is not listed in this json object, the bytes received are 0.",
                                                                                                                                                                                            "inner": [
                                                                                                                                                                                              {
                                                                                                                                                                                                "description": "Only known message types can appear as keys in the object and all bytes received",
                                                                                                                                                                                                "inner": [
                                                                                                                                                                                                  {
                                                                                                                                                                                                    "description": "of unknown message types are listed under '*other*'.",
                                                                                                                                                                                                    "inner": [],
                                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                                  }
                                                                                                                                                                                                ],
                                                                                                                                                                                                "key_name": "",
                                                                                                                                                                                                "type": "string"
                                                                                                                                                                                              }
                                                                                                                                                                                            ],
                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                          },
                                                                                                                                                                                          {
                                                                                                                                                                                            "description": "...",
                                                                                                                                                                                            "inner": [],
                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                          }
                                                                                                                                                                                        ],
                                                                                                                                                                                        "key_name": "msg",
                                                                                                                                                                                        "type": "number"
                                                                                                                                                                                      },
                                                                                                                                                                                      {
                                                                                                                                                                                        "description": "},",
                                                                                                                                                                                        "inner": [
                                                                                                                                                                                          {
                                                                                                                                                                                            "description": "\"str\",             Type of connection:",
                                                                                                                                                                                            "inner": [
                                                                                                                                                                                              {
                                                                                                                                                                                                "description": "outbound-full-relay (default automatic connections),",
                                                                                                                                                                                                "inner": [
                                                                                                                                                                                                  {
                                                                                                                                                                                                    "description": "block-relay-only (does not relay transactions or addresses),",
                                                                                                                                                                                                    "inner": [
                                                                                                                                                                                                      {
                                                                                                                                                                                                        "description": "inbound (initiated by the peer),",
                                                                                                                                                                                                        "inner": [
                                                                                                                                                                                                          {
                                                                                                                                                                                                            "description": "manual (added via addnode RPC or -addnode/-connect configuration options),",
                                                                                                                                                                                                            "inner": [
                                                                                                                                                                                                              {
                                                                                                                                                                                                                "description": "addr-fetch (short-lived automatic connection for soliciting addresses),",
                                                                                                                                                                                                                "inner": [
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    "description": "feeler (short-lived automatic connection for testing addresses).",
                                                                                                                                                                                                                    "inner": [
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        "description": "Please note this output is unlikely to be stable in upcoming releases as we iterate to",
                                                                                                                                                                                                                        "inner": [
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            "description": "best capture connection behaviors.",
                                                                                                                                                                                                                            "inner": [],
                                                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        ],
                                                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                ],
                                                                                                                                                                                                                "key_name": "",
                                                                                                                                                                                                                "type": "string"
                                                                                                                                                                                                              }
                                                                                                                                                                                                            ],
                                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                                          }
                                                                                                                                                                                                        ],
                                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                                      }
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                                  }
                                                                                                                                                                                                ],
                                                                                                                                                                                                "key_name": "",
                                                                                                                                                                                                "type": "string"
                                                                                                                                                                                              },
                                                                                                                                                                                              {
                                                                                                                                                                                                "description": "\"str\",     Type of transport protocol:",
                                                                                                                                                                                                "inner": [
                                                                                                                                                                                                  {
                                                                                                                                                                                                    "description": "detecting (peer could be v1 or v2),",
                                                                                                                                                                                                    "inner": [
                                                                                                                                                                                                      {
                                                                                                                                                                                                        "description": "v1 (plaintext transport protocol),",
                                                                                                                                                                                                        "inner": [
                                                                                                                                                                                                          {
                                                                                                                                                                                                            "description": "v2 (BIP324 encrypted transport protocol).",
                                                                                                                                                                                                            "inner": [],
                                                                                                                                                                                                            "key_name": "",
                                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                                          }
                                                                                                                                                                                                        ],
                                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                                      }
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    "key_name": "",
                                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                                  },
                                                                                                                                                                                                  {
                                                                                                                                                                                                    "description": "\"str\"                   The session ID for this connection, or \"\" if there is none (\"v2\" transport protocol only).",
                                                                                                                                                                                                    "inner": [],
                                                                                                                                                                                                    "key_name": "session_id",
                                                                                                                                                                                                    "type": "string"
                                                                                                                                                                                                  }
                                                                                                                                                                                                ],
                                                                                                                                                                                                "key_name": "transport_protocol_type",
                                                                                                                                                                                                "type": "string"
                                                                                                                                                                                              }
                                                                                                                                                                                            ],
                                                                                                                                                                                            "key_name": "connection_type",
                                                                                                                                                                                            "type": "string"
                                                                                                                                                                                          }
                                                                                                                                                                                        ],
                                                                                                                                                                                        "key_name": "",
                                                                                                                                                                                        "type": "string"
                                                                                                                                                                                      }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "key_name": "bytesrecv_per_msg",
                                                                                                                                                                                    "type": "object"
                                                                                                                                                                                  }
                                                                                                                                                                                ],
                                                                                                                                                                                "key_name": "",
                                                                                                                                                                                "type": "string"
                                                                                                                                                                              }
                                                                                                                                                                            ],
                                                                                                                                                                            "key_name": "bytessent_per_msg",
                                                                                                                                                                            "type": "object"
                                                                                                                                                                          }
                                                                                                                                                                        ],
                                                                                                                                                                        "key_name": "minfeefilter",
                                                                                                                                                                        "type": "number"
                                                                                                                                                                      }
                                                                                                                                                                    ],
                                                                                                                                                                    "key_name": "",
                                                                                                                                                                    "type": "string"
                                                                                                                                                                  }
                                                                                                                                                                ],
                                                                                                                                                                "key_name": "permissions",
                                                                                                                                                                "type": "string"
                                                                                                                                                              }
                                                                                                                                                            ],
                                                                                                                                                            "key_name": "addr_rate_limited",
                                                                                                                                                            "type": "number"
                                                                                                                                                          }
                                                                                                                                                        ],
                                                                                                                                                        "key_name": "addr_processed",
                                                                                                                                                        "type": "number"
                                                                                                                                                      }
                                                                                                                                                    ],
                                                                                                                                                    "key_name": "addr_relay_enabled",
                                                                                                                                                    "type": "boolean"
                                                                                                                                                  }
                                                                                                                                                ],
                                                                                                                                                "key_name": "",
                                                                                                                                                "type": "string"
                                                                                                                                              }
                                                                                                                                            ],
                                                                                                                                            "key_name": "inflight",
                                                                                                                                            "type": "string"
                                                                                                                                          }
                                                                                                                                        ],
                                                                                                                                        "key_name": "synced_blocks",
                                                                                                                                        "type": "number"
                                                                                                                                      }
                                                                                                                                    ],
                                                                                                                                    "key_name": "synced_headers",
                                                                                                                                    "type": "number"
                                                                                                                                  }
                                                                                                                                ],
                                                                                                                                "key_name": "presynced_headers",
                                                                                                                                "type": "number"
                                                                                                                              }
                                                                                                                            ],
                                                                                                                            "key_name": "startingheight",
                                                                                                                            "type": "number"
                                                                                                                          }
                                                                                                                        ],
                                                                                                                        "key_name": "bip152_hb_from",
                                                                                                                        "type": "boolean"
                                                                                                                      }
                                                                                                                    ],
                                                                                                                    "key_name": "bip152_hb_to",
                                                                                                                    "type": "boolean"
                                                                                                                  }
                                                                                                                ],
                                                                                                                "key_name": "inbound",
                                                                                                                "type": "boolean"
                                                                                                              }
                                                                                                            ],
                                                                                                            "key_name": "subver",
                                                                                                            "type": "string"
                                                                                                          }
                                                                                                        ],
                                                                                                        "key_name": "version",
                                                                                                        "type": "number"
                                                                                                      }
                                                                                                    ],
                                                                                                    "key_name": "pingwait",
                                                                                                    "type": "string"
                                                                                                  }
                                                                                                ],
                                                                                                "key_name": "minping",
                                                                                                "type": "string"
                                                                                              }
                                                                                            ],
                                                                                            "key_name": "pingtime",
                                                                                            "type": "string"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "timeoffset",
                                                                                        "type": "number"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "conntime",
                                                                                    "type": "number"
                                                                                  }
                                                                                ],
                                                                                "key_name": "bytesrecv",
                                                                                "type": "number"
                                                                              }
                                                                            ],
                                                                            "key_name": "bytessent",
                                                                            "type": "number"
                                                                          }
                                                                        ],
                                                                        "key_name": "last_block",
                                                                        "type": "number"
                                                                      }
                                                                    ],
                                                                    "key_name": "last_transaction",
                                                                    "type": "number"
                                                                  }
                                                                ],
                                                                "key_name": "lastrecv",
                                                                "type": "number"
                                                              }
                                                            ],
                                                            "key_name": "lastsend",
                                                            "type": "number"
                                                          }
                                                        ],
                                                        "key_name": "relaytxes",
                                                        "type": "boolean"
                                                      }
                                                    ],
                                                    "key_name": "",
                                                    "type": "string"
                                                  }
                                                ],
                                                "key_name": "servicesnames",
                                                "type": "string"
                                              }
                                            ],
                                            "key_name": "services",
                                            "type": "string"
                                          }
                                        ],
                                        "key_name": "mapped_as",
                                        "type": "string"
                                      }
                                    ],
                                    "key_name": "network",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "addrlocal",
                                "type": "string"
                              }
                            ],
                            "key_name": "addrbind",
                            "type": "string"
                          }
                        ],
                        "key_name": "addr",
                        "type": "string"
                      }
                    ],
                    "key_name": "id",
                    "type": "number"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "object"
              },
              {
                "description": "]",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getprioritisedtransactions": [
      {
        "arguments": [],
        "description": "Returns a map of all user-created (see prioritisetransaction) fee deltas by txid, and whether the tx is present in mempool.\n",
        "name": "getprioritisedtransactions",
        "results": [
          {
            "description": "{                                  prioritisation keyed by txid",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "n,               transaction fee delta in satoshis",
                    "inner": [
                      {
                        "description": "true|false,     whether this transaction is currently in mempool",
                        "inner": [
                          {
                            "description": "n            (numeric, optional) modified fee in satoshis. Only returned if in_mempool=true",
                            "inner": [],
                            "key_name": "modified_fee",
                            "type": "string"
                          }
                        ],
                        "key_name": "in_mempool",
                        "type": "boolean"
                      }
                    ],
                    "key_name": "fee_delta",
                    "type": "number"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "<transactionid>",
                "type": "object"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getrawchangeaddress": [
      {
        "arguments": [
          {
            "description": "The address type to use. Options are \"legacy\", \"p2sh-segwit\", \"bech32\", and \"bech32m\".",
            "names": [
              "address_type"
            ],
            "optional": true,
            "type": "string, optional, default=set by -changetype"
          }
        ],
        "description": "Returns a new Bitcoin address, for receiving change.\nThis is for use with raw transactions, NOT normal use.\n",
        "name": "getrawchangeaddress",
        "results": [
          {
            "description": "This is for use with raw transactions, NOT normal use.",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getrawmempool": [
      {
        "arguments": [
          {
            "description": "True for a json object, false for array of transaction ids",
            "names": [
              "verbose"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          },
          {
            "description": "If verbose=false, returns a json object with transaction list and mempool sequence number attached.",
            "names": [
              "mempool_sequence"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "Returns all transaction ids in memory pool as a json array of string transaction ids.\n\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\n",
        "name": "getrawmempool",
        "results": [
          {
            "description": "Hint: use getmempoolentry to fetch a specific transaction from the mempool.",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "getrawtransaction": [
      {
        "arguments": [
          {
            "description": "The transaction id",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "0 for hex-encoded data, 1 for a JSON object, and 2 for JSON object with fee and prevout",
            "names": [
              "verbosity"
            ],
            "optional": true,
            "type": "numeric, optional, default=0"
          },
          {
            "description": "The block in which to look for the transaction",
            "names": [
              "blockhash"
            ],
            "optional": true,
            "type": "string, optional"
          }
        ],
        "description": "By default, this call only returns a transaction if it is in the mempool. If -txindex is enabled\nand no blockhash argument is passed, it will return the transaction if it is in the mempool or any block.\nIf a blockhash argument is passed, it will return the transaction if\nthe specified block is available and the transaction is in that block.\n\nHint: Use gettransaction for wallet transactions.\n\nIf verbosity is 0 or omitted, returns the serialized transaction as a hex-encoded string.\nIf verbosity is 1, returns a JSON Object with information about the transaction.\nIf verbosity is 2, returns a JSON Object with information about the transaction, including fee and prevout information.\n",
        "name": "getrawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getreceivedbyaddress": [
      {
        "arguments": [
          {
            "description": "The bitcoin address for transactions.",
            "names": [
              "address"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Only include transactions confirmed at least this many times.",
            "names": [
              "minconf"
            ],
            "optional": true,
            "type": "numeric, optional, default=1"
          },
          {
            "description": "Include immature coinbase transactions.",
            "names": [
              "include_immature_coinbase"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "Returns the total amount received by the given address in transactions with at least minconf confirmations.\n",
        "name": "getreceivedbyaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getreceivedbylabel": [
      {
        "arguments": [
          {
            "description": "The selected label, may be the default label using \"\".",
            "names": [
              "label"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Only include transactions confirmed at least this many times.",
            "names": [
              "minconf"
            ],
            "optional": true,
            "type": "numeric, optional, default=1"
          },
          {
            "description": "Include immature coinbase transactions.",
            "names": [
              "include_immature_coinbase"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "Returns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\n",
        "name": "getreceivedbylabel",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getrpcinfo": [
      {
        "arguments": [],
        "description": "Returns details of the RPC server.\n",
        "name": "getrpcinfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "[    (json array) All active commands",
                "inner": [
                  {
                    "description": "{                       Information about an active command",
                    "inner": [
                      {
                        "description": "\"str\",     The name of the RPC command",
                        "inner": [
                          {
                            "description": "n        The running time in microseconds",
                            "inner": [],
                            "key_name": "duration",
                            "type": "number"
                          }
                        ],
                        "key_name": "method",
                        "type": "string"
                      },
                      {
                        "description": "},",
                        "inner": [
                          {
                            "description": "...",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "object"
                  },
                  {
                    "description": "],",
                    "inner": [
                      {
                        "description": "\"str\"         The complete file path to the debug log",
                        "inner": [],
                        "key_name": "logpath",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "active_commands",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "gettransaction": [
      {
        "arguments": [
          {
            "description": "The transaction id",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Whether to include watch-only addresses in balance calculation and details[]",
            "names": [
              "include_watchonly"
            ],
            "optional": true,
            "type": "boolean, optional, default=true for watch-only wallets, otherwise false"
          },
          {
            "description": "Whether to include a `decoded` field containing the decoded transaction (equivalent to RPC decoderawtransaction)",
            "names": [
              "verbose"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "Get detailed information about in-wallet transaction <txid>\n",
        "name": "gettransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "gettxout": [
      {
        "arguments": [
          {
            "description": "The transaction id",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "vout number",
            "names": [
              "n"
            ],
            "optional": false,
            "type": "numeric, required"
          },
          {
            "description": "Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.",
            "names": [
              "include_mempool"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Returns details about an unspent transaction output.\n",
        "name": "gettxout",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "gettxoutproof": [
      {
        "arguments": [
          {
            "description": "The txids to filter",
            "names": [
              "txids"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "If specified, looks for txid in the block with this hash",
            "names": [
              "blockhash"
            ],
            "optional": true,
            "type": "string, optional"
          }
        ],
        "description": "Returns a hex-encoded proof that \"txid\" was included in a block.\n\nNOTE: By default this function only works sometimes. This is when there is an\nunspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option or\nspecify the block in which the transaction is included manually (by blockhash).\n",
        "name": "gettxoutproof",
        "results": [
          {
            "description": "NOTE: By default this function only works sometimes. This is when there is an",
            "inner": [
              {
                "description": "unspent output in the utxo for this transaction. To make it always work,",
                "inner": [
                  {
                    "description": "you need to maintain a transaction index, using the -txindex command line option or",
                    "inner": [
                      {
                        "description": "specify the block in which the transaction is included manually (by blockhash).",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "gettxoutsetinfo": [
      {
        "arguments": [
          {
            "description": "Which UTXO set hash should be calculated. Options: 'hash_serialized_3' (the legacy algorithm), 'muhash', 'none'.",
            "names": [
              "hash_type"
            ],
            "optional": true,
            "type": "string, optional, default=\"hash_serialized_3\""
          },
          {
            "description": "The block hash or height of the target height (only available with coinstatsindex).",
            "names": [
              "hash_or_height"
            ],
            "optional": true,
            "type": "string or numeric, optional, default=the current best block"
          },
          {
            "description": "Use coinstatsindex, if available.",
            "names": [
              "use_index"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Returns statistics about the unspent transaction output set.\nNote this call may take some time if you are not using coinstatsindex.\n",
        "name": "gettxoutsetinfo",
        "results": [
          {
            "description": "Note this call may take some time if you are not using coinstatsindex.",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "gettxspendingprevout": [
      {
        "arguments": [
          {
            "description": "The transaction outputs that we want to check, and within each, the txid (string) vout (numeric).",
            "names": [
              "outputs"
            ],
            "optional": false,
            "type": "json array, required"
          }
        ],
        "description": "Scans the mempool to find transactions spending any of the given outputs\n",
        "name": "gettxspendingprevout",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "getunconfirmedbalance": [
      {
        "arguments": [],
        "description": "DEPRECATED\nIdentical to getbalances().mine.untrusted_pending\n",
        "name": "getunconfirmedbalance",
        "results": [
          {
            "description": "n     The balance",
            "inner": [],
            "key_name": "",
            "type": "number"
          }
        ]
      }
    ],
    "getwalletinfo": [
      {
        "arguments": [],
        "description": "Returns an object containing various wallet state info.\n",
        "name": "getwalletinfo",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "\"str\",                    the wallet name",
                "inner": [
                  {
                    "description": "n,                     the wallet version",
                    "inner": [
                      {
                        "description": "\"str\",                        the database format (bdb or sqlite)",
                        "inner": [
                          {
                            "description": "n,                           DEPRECATED. Identical to getbalances().mine.trusted",
                            "inner": [
                              {
                                "description": "n,               DEPRECATED. Identical to getbalances().mine.untrusted_pending",
                                "inner": [
                                  {
                                    "description": "n,                  DEPRECATED. Identical to getbalances().mine.immature",
                                    "inner": [
                                      {
                                        "description": "n,                           the total number of transactions in the wallet",
                                        "inner": [
                                          {
                                            "description": "xxx,                  (numeric, optional) the UNIX epoch time of the oldest pre-generated key in the key pool. Legacy wallets only.",
                                            "inner": [
                                              {
                                                "description": "n,                       how many new keys are pre-generated (only counts external keys)",
                                                "inner": [
                                                  {
                                                    "description": "n,          (numeric, optional) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)",
                                                    "inner": [
                                                      {
                                                        "description": "xxx,                 (numeric, optional) the UNIX epoch time until which the wallet is unlocked for transfers, or 0 if the wallet is locked (only present for passphrase-encrypted wallets)",
                                                        "inner": [
                                                          {
                                                            "description": "n,                          the transaction fee configuration, set in BTC/kvB",
                                                            "inner": [
                                                              {
                                                                "description": "\"hex\",                     (string, optional) the Hash160 of the HD seed (only present when HD is enabled)",
                                                                "inner": [
                                                                  {
                                                                    "description": "true|false,     false if privatekeys are disabled for this wallet (enforced watch-only wallet)",
                                                                    "inner": [
                                                                      {
                                                                        "description": "true|false,              whether this wallet tracks clean/dirty coins in terms of reuse",
                                                                        "inner": [
                                                                          {
                                                                            "description": "{                           current scanning details, or false if no scan is in progress",
                                                                            "inner": [
                                                                              {
                                                                                "description": "n,                        elapsed seconds since scan start",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "n                         scanning progress percentage [0.0, 1.0]",
                                                                                    "inner": [],
                                                                                    "key_name": "progress",
                                                                                    "type": "number"
                                                                                  }
                                                                                ],
                                                                                "key_name": "duration",
                                                                                "type": "number"
                                                                              },
                                                                              {
                                                                                "description": "},",
                                                                                "inner": [
                                                                                  {
                                                                                    "description": "true|false,              whether this wallet uses descriptors for output script management",
                                                                                    "inner": [
                                                                                      {
                                                                                        "description": "true|false,          whether this wallet is configured to use an external signer such as a hardware wallet",
                                                                                        "inner": [
                                                                                          {
                                                                                            "description": "true|false,                    Whether this wallet intentionally does not contain any keys, scripts, or descriptors",
                                                                                            "inner": [
                                                                                              {
                                                                                                "description": "xxx,                      (numeric, optional) The start time for blocks scanning. It could be modified by (re)importing any descriptor with an earlier timestamp.",
                                                                                                "inner": [
                                                                                                  {
                                                                                                    "description": "{                 hash and height of the block this information was generated on",
                                                                                                    "inner": [
                                                                                                      {
                                                                                                        "description": "\"hex\",                        hash of the block this information was generated on",
                                                                                                        "inner": [
                                                                                                          {
                                                                                                            "description": "n                           height of the block this information was generated on",
                                                                                                            "inner": [],
                                                                                                            "key_name": "height",
                                                                                                            "type": "number"
                                                                                                          }
                                                                                                        ],
                                                                                                        "key_name": "hash",
                                                                                                        "type": "string"
                                                                                                      },
                                                                                                      {
                                                                                                        "description": "}",
                                                                                                        "inner": [],
                                                                                                        "key_name": "",
                                                                                                        "type": "string"
                                                                                                      }
                                                                                                    ],
                                                                                                    "key_name": "lastprocessedblock",
                                                                                                    "type": "object"
                                                                                                  }
                                                                                                ],
                                                                                                "key_name": "birthtime",
                                                                                                "type": "string"
                                                                                              }
                                                                                            ],
                                                                                            "key_name": "blank",
                                                                                            "type": "boolean"
                                                                                          }
                                                                                        ],
                                                                                        "key_name": "external_signer",
                                                                                        "type": "boolean"
                                                                                      }
                                                                                    ],
                                                                                    "key_name": "descriptors",
                                                                                    "type": "boolean"
                                                                                  }
                                                                                ],
                                                                                "key_name": "",
                                                                                "type": "string"
                                                                              }
                                                                            ],
                                                                            "key_name": "scanning",
                                                                            "type": "object"
                                                                          }
                                                                        ],
                                                                        "key_name": "avoid_reuse",
                                                                        "type": "boolean"
                                                                      }
                                                                    ],
                                                                    "key_name": "private_keys_enabled",
                                                                    "type": "boolean"
                                                                  }
                                                                ],
                                                                "key_name": "hdseedid",
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "key_name": "paytxfee",
                                                            "type": "number"
                                                          }
                                                        ],
                                                        "key_name": "unlocked_until",
                                                        "type": "string"
                                                      }
                                                    ],
                                                    "key_name": "keypoolsize_hd_internal",
                                                    "type": "string"
                                                  }
                                                ],
                                                "key_name": "keypoolsize",
                                                "type": "number"
                                              }
                                            ],
                                            "key_name": "keypoololdest",
                                            "type": "string"
                                          }
                                        ],
                                        "key_name": "txcount",
                                        "type": "number"
                                      }
                                    ],
                                    "key_name": "immature_balance",
                                    "type": "number"
                                  }
                                ],
                                "key_name": "unconfirmed_balance",
                                "type": "number"
                              }
                            ],
                            "key_name": "balance",
                            "type": "number"
                          }
                        ],
                        "key_name": "format",
                        "type": "string"
                      }
                    ],
                    "key_name": "walletversion",
                    "type": "number"
                  }
                ],
                "key_name": "walletname",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "getzmqnotifications": [
      {
        "arguments": [],
        "description": "Returns information about the active ZeroMQ notifications.\n",
        "name": "getzmqnotifications",
        "results": [
          {
            "description": "[                         (json array)",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "\"str\",        Type of notification",
                    "inner": [
                      {
                        "description": "\"str\",     Address of the publisher",
                        "inner": [
                          {
                            "description": "n              Outbound message high water mark",
                            "inner": [],
                            "key_name": "hwm",
                            "type": "number"
                          }
                        ],
                        "key_name": "address",
                        "type": "string"
                      }
                    ],
                    "key_name": "type",
                    "type": "string"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "object"
              },
              {
                "description": "]",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "help": [
      {
        "arguments": [
          {
            "description": "The command to get help on",
            "names": [
              "command"
            ],
            "optional": true,
            "type": "string, optional, default=all commands"
          }
        ],
        "description": "List all commands, or get help for a specified command.\n",
        "name": "help",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "importaddress": [
      {
        "arguments": [
          {
            "description": "The Bitcoin address (or hex-encoded script)",
            "names": [
              "address"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "An optional label",
            "names": [
              "label"
            ],
            "optional": true,
            "type": "string, optional, default=\"\""
          },
          {
            "description": "Scan the chain and mempool for wallet transactions.",
            "names": [
              "rescan"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          },
          {
            "description": "Add the P2SH version of the script as well",
            "names": [
              "p2sh"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\n\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\nmay report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\nThe rescan parameter can be set to false if the key was never used to create transactions. If it is set to false,\nbut the key was used to create transactions, rescanblockchain needs to be called with the appropriate block range.\nIf you have the full public key, you should call importpubkey instead of this.\nHint: use importmulti to import more than one address.\n\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\nas change, and not show up in many RPCs.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nNote: This command is only compatible with legacy wallets. Use \"importdescriptors\" for descriptor wallets.\n",
        "name": "importaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "importdescriptors": [
      {
        "arguments": [
          {
            "description": "Data to be imported",
            "names": [
              "requests"
            ],
            "optional": false,
            "type": "json array, required"
          }
        ],
        "description": "Import descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\nWhen importing descriptors with multipath key expressions, if the multipath specifier contains exactly two elements, the descriptor produced from the second elements will be imported as an internal descriptor.\n\nNote: This call can take over an hour to complete if using an early timestamp; during that time, other rpc calls\nmay report that the imported keys, addresses or scripts exist but related transactions are still missing.\nThe rescan is significantly faster if block filters are available (using startup option \"-blockfilterindex=1\").\n",
        "name": "importdescriptors",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "importmempool": [
      {
        "arguments": [
          {
            "description": "The mempool file",
            "names": [
              "filepath"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "Import a mempool.dat file and attempt to add its contents to the mempool.\nWarning: Importing untrusted files is dangerous, especially if metadata from the file is taken over.\n",
        "name": "importmempool",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "importmulti": [
      {
        "arguments": [
          {
            "description": "Data to be imported",
            "names": [
              "requests"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "Import addresses/scripts (with private or public keys, redeem script (P2SH)), optionally rescanning the blockchain from the earliest creation time of the imported scripts. Requires a new wallet backup.\nIf an address/script is imported without all of the private keys required to spend from that address, it will be watchonly. The 'watchonly' option must be set to true in this case or a warning will be returned.\nConversely, if all the private keys are provided and the address/script is spendable, the watchonly option must be set to false, or a warning will be returned.\n\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\nmay report that the imported keys, addresses or scripts exist but related transactions are still missing.\nThe rescan parameter can be set to false if the key was never used to create transactions. If it is set to false,\nbut the key was used to create transactions, rescanblockchain needs to be called with the appropriate block range.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nNote: This command is only compatible with legacy wallets. Use \"importdescriptors\" for descriptor wallets.\n",
        "name": "importmulti",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "importprivkey": [
      {
        "arguments": [
          {
            "description": "The private key (see dumpprivkey)",
            "names": [
              "privkey"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "An optional label",
            "names": [
              "label"
            ],
            "optional": true,
            "type": "string, optional, default=current label if address exists, otherwise \"\""
          },
          {
            "description": "Scan the chain and mempool for wallet transactions.",
            "names": [
              "rescan"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\nHint: use importmulti to import more than one private key.\n\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\nmay report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\nThe rescan parameter can be set to false if the key was never used to create transactions. If it is set to false,\nbut the key was used to create transactions, rescanblockchain needs to be called with the appropriate block range.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nNote: This command is only compatible with legacy wallets. Use \"importdescriptors\" with \"combo(X)\" for descriptor wallets.\n",
        "name": "importprivkey",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "importprunedfunds": [
      {
        "arguments": [
          {
            "description": "A raw transaction in hex funding an already-existing address in wallet",
            "names": [
              "rawtransaction"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The hex output from gettxoutproof that contains the transaction",
            "names": [
              "txoutproof"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\n",
        "name": "importprunedfunds",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "importpubkey": [
      {
        "arguments": [
          {
            "description": "The hex-encoded public key",
            "names": [
              "pubkey"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "An optional label",
            "names": [
              "label"
            ],
            "optional": true,
            "type": "string, optional, default=\"\""
          },
          {
            "description": "Scan the chain and mempool for wallet transactions.",
            "names": [
              "rescan"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\nHint: use importmulti to import more than one public key.\n\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\nmay report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\nThe rescan parameter can be set to false if the key was never used to create transactions. If it is set to false,\nbut the key was used to create transactions, rescanblockchain needs to be called with the appropriate block range.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nNote: This command is only compatible with legacy wallets. Use \"importdescriptors\" with \"combo(X)\" for descriptor wallets.\n",
        "name": "importpubkey",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "importwallet": [
      {
        "arguments": [
          {
            "description": "The wallet file",
            "names": [
              "filename"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Imports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\nNote: Blockchain and Mempool will be rescanned after a successful import. Use \"getwalletinfo\" to query the scanning progress.\nNote: This command is only compatible with legacy wallets.\n",
        "name": "importwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "joinpsbts": [
      {
        "arguments": [
          {
            "description": "The base64 strings of partially signed transactions",
            "names": [
              "txs"
            ],
            "optional": false,
            "type": "json array, required"
          }
        ],
        "description": "Joins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\nNo input in any of the PSBTs can be in more than one of the PSBTs.\n",
        "name": "joinpsbts",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "keypoolrefill": [
      {
        "arguments": [
          {
            "description": "The new keypool size",
            "names": [
              "newsize"
            ],
            "optional": true,
            "type": "numeric, optional, default=1000, or as set by -keypool"
          }
        ],
        "description": "Fills the keypool.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "name": "keypoolrefill",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "listaddressgroupings": [
      {
        "arguments": [],
        "description": "Lists groups of addresses which have had their common ownership\nmade public by common use as inputs or as the resulting change\nin past transactions\n",
        "name": "listaddressgroupings",
        "results": [
          {
            "description": "[               (json array)",
            "inner": [
              {
                "description": "[             (json array)",
                "inner": [
                  {
                    "description": "[           (json array)",
                    "inner": [
                      {
                        "description": "\"str\",     The bitcoin address",
                        "inner": [
                          {
                            "description": "n,         The amount in BTC",
                            "inner": [
                              {
                                "description": "\"str\"     (string, optional) The label",
                                "inner": [],
                                "key_name": "",
                                "type": "string"
                              }
                            ],
                            "key_name": "",
                            "type": "number"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      },
                      {
                        "description": "],",
                        "inner": [
                          {
                            "description": "...",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  },
                  {
                    "description": "],",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              },
              {
                "description": "]",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listbanned": [
      {
        "arguments": [],
        "description": "List all manually banned IPs/Subnets.\n",
        "name": "listbanned",
        "results": [
          {
            "description": "[                              (json array)",
            "inner": [
              {
                "description": "{",
                "inner": [
                  {
                    "description": "\"str\",          The IP/Subnet of the banned node",
                    "inner": [
                      {
                        "description": "xxx,        The UNIX epoch time the ban was created",
                        "inner": [
                          {
                            "description": "xxx,       The UNIX epoch time the ban expires",
                            "inner": [
                              {
                                "description": "xxx,       The ban duration, in seconds",
                                "inner": [
                                  {
                                    "description": "xxx      The time remaining until the ban expires, in seconds",
                                    "inner": [],
                                    "key_name": "time_remaining",
                                    "type": "number"
                                  }
                                ],
                                "key_name": "ban_duration",
                                "type": "number"
                              }
                            ],
                            "key_name": "banned_until",
                            "type": "number"
                          }
                        ],
                        "key_name": "ban_created",
                        "type": "number"
                      }
                    ],
                    "key_name": "address",
                    "type": "string"
                  },
                  {
                    "description": "},",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "object"
              },
              {
                "description": "]",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listdescriptors": [
      {
        "arguments": [
          {
            "description": "Show private descriptors.",
            "names": [
              "private"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "List descriptors imported into a descriptor-enabled wallet.\n",
        "name": "listdescriptors",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "listlabels": [
      {
        "arguments": [
          {
            "description": "Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.",
            "names": [
              "purpose"
            ],
            "optional": true,
            "type": "string, optional"
          }
        ],
        "description": "Returns the list of all labels, or labels that are assigned to addresses with a specific purpose.\n",
        "name": "listlabels",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "listlockunspent": [
      {
        "arguments": [],
        "description": "Returns list of temporarily unspendable outputs.\nSee the lockunspent call to lock and unlock transactions for spending.\n",
        "name": "listlockunspent",
        "results": [
          {
            "description": "See the lockunspent call to lock and unlock transactions for spending.",
            "inner": [
              {
                "description": "[                      (json array)",
                "inner": [
                  {
                    "description": "{",
                    "inner": [
                      {
                        "description": "\"hex\",     The transaction id locked",
                        "inner": [
                          {
                            "description": "n          The vout value",
                            "inner": [],
                            "key_name": "vout",
                            "type": "number"
                          }
                        ],
                        "key_name": "txid",
                        "type": "string"
                      },
                      {
                        "description": "},",
                        "inner": [
                          {
                            "description": "...",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "object"
                  },
                  {
                    "description": "]",
                    "inner": [],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listreceivedbyaddress": [
      {
        "arguments": [
          {
            "description": "The minimum number of confirmations before payments are included.",
            "names": [
              "minconf"
            ],
            "optional": true,
            "type": "numeric, optional, default=1"
          },
          {
            "description": "Whether to include addresses that haven't received any payments.",
            "names": [
              "include_empty"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          },
          {
            "description": "Whether to include watch-only addresses (see 'importaddress')",
            "names": [
              "include_watchonly"
            ],
            "optional": true,
            "type": "boolean, optional, default=true for watch-only wallets, otherwise false"
          },
          {
            "description": "If present and non-empty, only return information on this address.",
            "names": [
              "address_filter"
            ],
            "optional": true,
            "type": "string, optional"
          },
          {
            "description": "Include immature coinbase transactions.",
            "names": [
              "include_immature_coinbase"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "List balances by receiving address.\n",
        "name": "listreceivedbyaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "listreceivedbylabel": [
      {
        "arguments": [
          {
            "description": "The minimum number of confirmations before payments are included.",
            "names": [
              "minconf"
            ],
            "optional": true,
            "type": "numeric, optional, default=1"
          },
          {
            "description": "Whether to include labels that haven't received any payments.",
            "names": [
              "include_empty"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          },
          {
            "description": "Whether to include watch-only addresses (see 'importaddress')",
            "names": [
              "include_watchonly"
            ],
            "optional": true,
            "type": "boolean, optional, default=true for watch-only wallets, otherwise false"
          },
          {
            "description": "Include immature coinbase transactions.",
            "names": [
              "include_immature_coinbase"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "List received transactions by label.\n",
        "name": "listreceivedbylabel",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "listsinceblock": [
      {
        "arguments": [
          {
            "description": "If set, the block hash to list transactions since, otherwise list all transactions.",
            "names": [
              "blockhash"
            ],
            "optional": true,
            "type": "string, optional"
          },
          {
            "description": "Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value",
            "names": [
              "target_confirmations"
            ],
            "optional": true,
            "type": "numeric, optional, default=1"
          },
          {
            "description": "Include transactions to watch-only addresses (see 'importaddress')",
            "names": [
              "include_watchonly"
            ],
            "optional": true,
            "type": "boolean, optional, default=true for watch-only wallets, otherwise false"
          },
          {
            "description": "Show transactions that were removed due to a reorg in the \"removed\" array",
            "names": [
              "include_removed"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          },
          {
            "description": "Also add entries for change outputs.",
            "names": [
              "include_change"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          },
          {
            "description": "Return only incoming transactions paying to addresses with the specified label.",
            "names": [
              "label"
            ],
            "optional": true,
            "type": "string, optional"
          }
        ],
        "description": "Get all transactions in blocks since block [blockhash], or all transactions if omitted.\nIf \"blockhash\" is no longer a part of the main chain, transactions from the fork point onward are included.\nAdditionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \"removed\" array.\n",
        "name": "listsinceblock",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "listtransactions": [
      {
        "arguments": [
          {
            "description": "If set, should be a valid label name to return only incoming transactions",
            "names": [
              "label"
            ],
            "optional": true,
            "type": "string, optional"
          },
          {
            "description": "The number of transactions to return",
            "names": [
              "count"
            ],
            "optional": true,
            "type": "numeric, optional, default=10"
          },
          {
            "description": "The number of transactions to skip",
            "names": [
              "skip"
            ],
            "optional": true,
            "type": "numeric, optional, default=0"
          },
          {
            "description": "Include transactions to watch-only addresses (see 'importaddress')",
            "names": [
              "include_watchonly"
            ],
            "optional": true,
            "type": "boolean, optional, default=true for watch-only wallets, otherwise false"
          }
        ],
        "description": "If a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\n\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\n",
        "name": "listtransactions",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "listunspent": [
      {
        "arguments": [
          {
            "description": "The minimum confirmations to filter",
            "names": [
              "minconf"
            ],
            "optional": true,
            "type": "numeric, optional, default=1"
          },
          {
            "description": "The maximum confirmations to filter",
            "names": [
              "maxconf"
            ],
            "optional": true,
            "type": "numeric, optional, default=9999999"
          },
          {
            "description": "The bitcoin addresses to filter",
            "names": [
              "addresses"
            ],
            "optional": true,
            "type": "json array, optional, default=[]"
          },
          {
            "description": "Include outputs that are not safe to spend",
            "names": [
              "include_unsafe"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "query_options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "Returns array of unspent transaction outputs\nwith between minconf and maxconf (inclusive) confirmations.\nOptionally filter to only include txouts paid to specified addresses.\n",
        "name": "listunspent",
        "results": [
          {
            "description": "with between minconf and maxconf (inclusive) confirmations.",
            "inner": [
              {
                "description": "Optionally filter to only include txouts paid to specified addresses.",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "listwalletdir": [
      {
        "arguments": [],
        "description": "Returns a list of wallets in the wallet directory.\n",
        "name": "listwalletdir",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "[          (json array)",
                "inner": [
                  {
                    "description": "{",
                    "inner": [
                      {
                        "description": "\"str\"      The wallet name",
                        "inner": [],
                        "key_name": "name",
                        "type": "string"
                      },
                      {
                        "description": "},",
                        "inner": [
                          {
                            "description": "...",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "object"
                  },
                  {
                    "description": "]",
                    "inner": [],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "wallets",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "listwallets": [
      {
        "arguments": [],
        "description": "Returns a list of currently loaded wallets.\nFor full information on the wallet, use \"getwalletinfo\"\n",
        "name": "listwallets",
        "results": [
          {
            "description": "For full information on the wallet, use \"getwalletinfo\"",
            "inner": [
              {
                "description": "[           (json array)",
                "inner": [
                  {
                    "description": "\"str\",     the wallet name",
                    "inner": [
                      {
                        "description": "...",
                        "inner": [],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  },
                  {
                    "description": "]",
                    "inner": [],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "loadtxoutset": [
      {
        "arguments": [
          {
            "description": "path to the snapshot file. If relative, will be prefixed by datadir.",
            "names": [
              "path"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Load the serialized UTXO set from a file.\nOnce this snapshot is loaded, its contents will be deserialized into a second chainstate data structure, which is then used to sync to the network's tip. Meanwhile, the original chainstate will complete the initial block download process in the background, eventually validating up to the block that the snapshot is based upon.\n\nThe result is a usable bitcoind instance that is current with the network tip in a matter of minutes rather than hours. UTXO snapshot are typically obtained from third-party sources (HTTP, torrent, etc.) which is reasonable since their contents are always checked by hash.\n\nYou can find more information on this process in the `assumeutxo` design document (<https://github.com/bitcoin/bitcoin/blob/master/doc/design/assumeutxo.md>).\n",
        "name": "loadtxoutset",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "loadwallet": [
      {
        "arguments": [
          {
            "description": "The path to the directory of the wallet to be loaded, either absolute or relative to the \"wallets\" directory. The \"wallets\" directory is set by the -walletdir option and defaults to the \"wallets\" folder within the data directory.",
            "names": [
              "filename"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.",
            "names": [
              "load_on_startup"
            ],
            "optional": true,
            "type": "boolean, optional"
          }
        ],
        "description": "Loads a wallet from a wallet file or directory.\nNote that all wallet command-line options used when starting bitcoind will be\napplied to the new wallet.\n",
        "name": "loadwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "lockunspent": [
      {
        "arguments": [
          {
            "description": "Whether to unlock (true) or lock (false) the specified transactions",
            "names": [
              "unlock"
            ],
            "optional": false,
            "type": "boolean, required"
          },
          {
            "description": "The transaction outputs and within each, the txid (string) vout (numeric).",
            "names": [
              "transactions"
            ],
            "optional": true,
            "type": "json array, optional, default=[]"
          },
          {
            "description": "Whether to write/erase this lock in the wallet database, or keep the change in memory only. Ignored for unlocking.",
            "names": [
              "persistent"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "Updates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nIf no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\nA locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\nManually selected coins are automatically unlocked.\nLocks are stored in memory only, unless persistent=true, in which case they will be written to the\nwallet database and loaded on node start. Unwritten (persistent=false) locks are always cleared\n(by virtue of process exit) when a node stops or fails. Unlocking will clear both persistent and not.\nAlso see the listunspent call\n",
        "name": "lockunspent",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "logging": [
      {
        "arguments": [
          {
            "description": "The categories to add to debug logging",
            "names": [
              "include"
            ],
            "optional": true,
            "type": "json array, optional"
          },
          {
            "description": "The categories to remove from debug logging",
            "names": [
              "exclude"
            ],
            "optional": true,
            "type": "json array, optional"
          }
        ],
        "description": "Gets and sets the logging configuration.\nWhen called without an argument, returns the list of categories with status that are currently being debug logged or not.\nWhen called with arguments, adds or removes categories from debug logging and return the lists above.\nThe arguments are evaluated in order \"include\", \"exclude\".\nIf an item is both included and excluded, it will thus end up being excluded.\nThe valid logging categories are: addrman, bench, blockstorage, cmpctblock, coindb, estimatefee, http, i2p, ipc, leveldb, libevent, mempool, mempoolrej, net, proxy, prune, qt, rand, reindex, rpc, scan, selectcoins, tor, txpackages, txreconciliation, validation, walletdb, zmq\nIn addition, the following are available as category names with special meanings:\n  - \"all\",  \"1\" : represent all logging categories.\n",
        "name": "logging",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "migratewallet": [
      {
        "arguments": [
          {
            "description": "The name of the wallet to migrate. If provided both here and in the RPC endpoint, the two must be identical.",
            "names": [
              "wallet_name"
            ],
            "optional": true,
            "type": "string, optional, default=the wallet name from the rpc endpoint"
          },
          {
            "description": "The wallet passphrase",
            "names": [
              "passphrase"
            ],
            "optional": true,
            "type": "string, optional"
          }
        ],
        "description": "Migrate the wallet to a descriptor wallet.\nA new wallet backup will need to be made.\n\nThe migration process will create a backup of the wallet before migrating. This backup\nfile will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\nfor this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\nEncrypted wallets must have the passphrase provided as an argument to this call.\n\nThis RPC may take a long time to complete. Increasing the RPC client timeout is recommended.\n",
        "name": "migratewallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "newkeypool": [
      {
        "arguments": [],
        "description": "Entirely clears and refills the keypool.\nWARNING: On non-HD wallets, this will require a new backup immediately, to include the new keys.\nWhen restoring a backup of an HD wallet created before the newkeypool command is run, funds received to\nnew addresses may not appear automatically. They have not been lost, but the wallet may not find them.\nThis can be fixed by running the newkeypool command on the backup and then rescanning, so the wallet\nre-generates the required keys.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "name": "newkeypool",
        "results": [
          {
            "description": "null",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "ping": [
      {
        "arguments": [],
        "description": "Requests that a ping be sent to all other nodes, to measure ping time.\nResults provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\nPing command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\n",
        "name": "ping",
        "results": [
          {
            "description": "Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.",
            "inner": [
              {
                "description": "null",
                "inner": [],
                "key_name": "",
                "type": "none"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "preciousblock": [
      {
        "arguments": [
          {
            "description": "the hash of the block to mark as precious",
            "names": [
              "blockhash"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Treats a block as if it were received before others with the same work.\n\nA later preciousblock call can override the effect of an earlier one.\n\nThe effects of preciousblock are not retained across restarts.\n",
        "name": "preciousblock",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "prioritisetransaction": [
      {
        "arguments": [
          {
            "description": "The transaction id.",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "API-Compatibility for previous API. Must be zero or null.",
            "names": [
              "dummy"
            ],
            "optional": true,
            "type": "numeric, optional"
          },
          {
            "description": "The fee value (in satoshis) to add (or subtract, if negative).",
            "names": [
              "fee_delta"
            ],
            "optional": false,
            "type": "numeric, required"
          }
        ],
        "description": "Accepts the transaction into mined blocks at a higher (or lower) priority\n",
        "name": "prioritisetransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "pruneblockchain": [
      {
        "arguments": [
          {
            "description": "The block height to prune up to. May be set to a discrete height, or to a UNIX epoch time",
            "names": [
              "height"
            ],
            "optional": false,
            "type": "numeric, required"
          }
        ],
        "description": "<no description available>",
        "name": "pruneblockchain",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "psbtbumpfee": [
      {
        "arguments": [
          {
            "description": "The txid to be bumped",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\nReturns a PSBT instead of creating and signing a new transaction.\nAn opt-in RBF transaction with the given txid must be in the wallet.\nThe command will pay the additional fee by reducing change outputs or adding inputs when necessary.\nIt may add a new change output if one does not already exist.\nAll inputs in the original transaction will be included in the replacement transaction.\nThe command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\nBy default, the new fee will be calculated automatically using the estimatesmartfee RPC.\nThe user can specify a confirmation target for estimatesmartfee.\nAlternatively, the user can specify a fee rate in sat/vB for the new transaction.\nAt a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\nreturned by getnetworkinfo) to enter the node's mempool.\n* WARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB. *\n",
        "name": "psbtbumpfee",
        "results": [
          {
            "description": "An opt-in RBF transaction with the given txid must be in the wallet.",
            "inner": [
              {
                "description": "The command will pay the additional fee by reducing change outputs or adding inputs when necessary.",
                "inner": [
                  {
                    "description": "It may add a new change output if one does not already exist.",
                    "inner": [
                      {
                        "description": "All inputs in the original transaction will be included in the replacement transaction.",
                        "inner": [
                          {
                            "description": "The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.",
                            "inner": [
                              {
                                "description": "By default, the new fee will be calculated automatically using the estimatesmartfee RPC.",
                                "inner": [
                                  {
                                    "description": "The user can specify a confirmation target for estimatesmartfee.",
                                    "inner": [
                                      {
                                        "description": "Alternatively, the user can specify a fee rate in sat/vB for the new transaction.",
                                        "inner": [
                                          {
                                            "description": "At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee",
                                            "inner": [
                                              {
                                                "description": "returned by getnetworkinfo) to enter the node's mempool.",
                                                "inner": [
                                                  {
                                                    "description": "* WARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB. *",
                                                    "inner": [],
                                                    "key_name": "",
                                                    "type": "string"
                                                  }
                                                ],
                                                "key_name": "",
                                                "type": "string"
                                              }
                                            ],
                                            "key_name": "",
                                            "type": "string"
                                          }
                                        ],
                                        "key_name": "",
                                        "type": "string"
                                      }
                                    ],
                                    "key_name": "",
                                    "type": "string"
                                  }
                                ],
                                "key_name": "",
                                "type": "string"
                              }
                            ],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "removeprunedfunds": [
      {
        "arguments": [
          {
            "description": "The hex-encoded id of the transaction you are deleting",
            "names": [
              "txid"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\n",
        "name": "removeprunedfunds",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "rescanblockchain": [
      {
        "arguments": [
          {
            "description": "block height where the rescan should start",
            "names": [
              "start_height"
            ],
            "optional": true,
            "type": "numeric, optional, default=0"
          },
          {
            "description": "the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.",
            "names": [
              "stop_height"
            ],
            "optional": true,
            "type": "numeric, optional"
          }
        ],
        "description": "Rescan the local blockchain for wallet related transactions.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nThe rescan is significantly faster when used on a descriptor wallet\nand block filters are available (using startup option \"-blockfilterindex=1\").\n",
        "name": "rescanblockchain",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "restorewallet": [
      {
        "arguments": [
          {
            "description": "The name that will be applied to the restored wallet",
            "names": [
              "wallet_name"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The backup file that will be used to restore the wallet.",
            "names": [
              "backup_file"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.",
            "names": [
              "load_on_startup"
            ],
            "optional": true,
            "type": "boolean, optional"
          }
        ],
        "description": "Restores and loads a wallet from backup.\n\nThe rescan is significantly faster if a descriptor wallet is restored\nand block filters are available (using startup option \"-blockfilterindex=1\").\n",
        "name": "restorewallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "savemempool": [
      {
        "arguments": [],
        "description": "Dumps the mempool to disk. It will fail until the previous dump is fully loaded.\n",
        "name": "savemempool",
        "results": [
          {
            "description": "{",
            "inner": [
              {
                "description": "\"str\"      the directory and file where the mempool was saved",
                "inner": [],
                "key_name": "filename",
                "type": "string"
              },
              {
                "description": "}",
                "inner": [],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "object"
          }
        ]
      }
    ],
    "scanblocks": [
      {
        "arguments": [
          {
            "description": "The action to execute",
            "names": [
              "action"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Array of scan objects. Required for \"start\" action",
            "names": [
              "scanobjects"
            ],
            "optional": true,
            "type": "json array, optional"
          },
          {
            "description": "Height to start to scan from",
            "names": [
              "start_height"
            ],
            "optional": true,
            "type": "numeric, optional, default=0"
          },
          {
            "description": "Height to stop to scan",
            "names": [
              "stop_height"
            ],
            "optional": true,
            "type": "numeric, optional, default=chain tip"
          },
          {
            "description": "The type name of the filter",
            "names": [
              "filtertype"
            ],
            "optional": true,
            "type": "string, optional, default=\"basic\""
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "Return relevant blockhashes for given descriptors (requires blockfilterindex).\nThis call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\n",
        "name": "scanblocks",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "scantxoutset": [
      {
        "arguments": [
          {
            "description": "The action to execute",
            "names": [
              "action"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Array of scan objects. Required for \"start\" action",
            "names": [
              "scanobjects"
            ],
            "optional": true,
            "type": "json array, optional"
          }
        ],
        "description": "Scans the unspent transaction output set for entries that match certain output descriptors.\nExamples of output descriptors are:\n    addr(<address>)                      Outputs whose output script corresponds to the specified address (does not include P2PK)\n    raw(<hex script>)                    Outputs whose output script equals the specified hex-encoded bytes\n    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\n    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\n    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\n    tr(<pubkey>)                         P2TR\n    tr(<pubkey>,{pk(<pubkey>)})          P2TR with single fallback pubkey in tapscript\n    rawtr(<pubkey>)                      P2TR with the specified key as output key rather than inner\n    wsh(and_v(v:pk(<pubkey>),after(2)))  P2WSH miniscript with mandatory pubkey and a timelock\n\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\nor more path elements separated by \"/\", and optionally ending in \"/*\" (unhardened), or \"/*'\" or \"/*h\" (hardened) to specify all\nunhardened or hardened child keys.\nIn the latter case, a range needs to be specified by below if different from 1000.\nFor more information on output descriptors, see the documentation in the doc/descriptors.md file.\n",
        "name": "scantxoutset",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "send": [
      {
        "arguments": [
          {
            "description": "The outputs specified as key-value pairs.",
            "names": [
              "outputs"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "Confirmation target in blocks",
            "names": [
              "conf_target"
            ],
            "optional": true,
            "type": "numeric, optional, default=wallet -txconfirmtarget"
          },
          {
            "description": "The fee estimate mode, must be one of (case insensitive):",
            "names": [
              "estimate_mode"
            ],
            "optional": true,
            "type": "string, optional, default=\"unset\""
          },
          {
            "description": "Specify a fee rate in sat/vB.",
            "names": [
              "fee_rate"
            ],
            "optional": true,
            "type": "numeric or string, optional, default=not set, fall back to wallet fee estimation"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "EXPERIMENTAL warning: this call may be changed in future releases.\n\nSend a transaction.\n",
        "name": "send",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "sendall": [
      {
        "arguments": [
          {
            "description": "The sendall destinations. Each address may only appear once.",
            "names": [
              "recipients"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "Confirmation target in blocks",
            "names": [
              "conf_target"
            ],
            "optional": true,
            "type": "numeric, optional, default=wallet -txconfirmtarget"
          },
          {
            "description": "The fee estimate mode, must be one of (case insensitive):",
            "names": [
              "estimate_mode"
            ],
            "optional": true,
            "type": "string, optional, default=\"unset\""
          },
          {
            "description": "Specify a fee rate in sat/vB.",
            "names": [
              "fee_rate"
            ],
            "optional": true,
            "type": "numeric or string, optional, default=not set, fall back to wallet fee estimation"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "EXPERIMENTAL warning: this call may be changed in future releases.\n\nSpend the value of all (or specific) confirmed UTXOs and unconfirmed change in the wallet to one or more recipients.\nUnconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\nIf your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\n",
        "name": "sendall",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "sendmany": [
      {
        "arguments": [
          {
            "description": "Must be set to \"\" for backwards compatibility.",
            "names": [
              "dummy"
            ],
            "optional": true,
            "type": "string, optional, default=\"\\\"\\\"\""
          },
          {
            "description": "The addresses and amounts",
            "names": [
              "amounts"
            ],
            "optional": false,
            "type": "json object, required"
          },
          {
            "description": "Ignored dummy value",
            "names": [
              "minconf"
            ],
            "optional": true,
            "type": "numeric, optional"
          },
          {
            "description": "A comment",
            "names": [
              "comment"
            ],
            "optional": true,
            "type": "string, optional"
          },
          {
            "description": "The addresses.",
            "names": [
              "subtractfeefrom"
            ],
            "optional": true,
            "type": "json array, optional"
          },
          {
            "description": "Signal that this transaction can be replaced by a transaction (BIP 125)",
            "names": [
              "replaceable"
            ],
            "optional": true,
            "type": "boolean, optional, default=wallet default"
          },
          {
            "description": "Confirmation target in blocks",
            "names": [
              "conf_target"
            ],
            "optional": true,
            "type": "numeric, optional, default=wallet -txconfirmtarget"
          },
          {
            "description": "The fee estimate mode, must be one of (case insensitive):",
            "names": [
              "estimate_mode"
            ],
            "optional": true,
            "type": "string, optional, default=\"unset\""
          },
          {
            "description": "Specify a fee rate in sat/vB.",
            "names": [
              "fee_rate"
            ],
            "optional": true,
            "type": "numeric or string, optional, default=not set, fall back to wallet fee estimation"
          },
          {
            "description": "If true, return extra information about the transaction.",
            "names": [
              "verbose"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "Send multiple times. Amounts are double-precision floating point numbers.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "name": "sendmany",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "sendrawtransaction": [
      {
        "arguments": [
          {
            "description": "The hex string of the raw transaction",
            "names": [
              "hexstring"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Reject transactions whose fee rate is higher than the specified value, expressed in BTC/kvB.",
            "names": [
              "maxfeerate"
            ],
            "optional": true,
            "type": "numeric or string, optional, default=\"0.10\""
          },
          {
            "description": "Reject transactions with provably unspendable outputs (e.g. 'datacarrier' outputs that use the OP_RETURN opcode) greater than the specified value, expressed in BTC.",
            "names": [
              "maxburnamount"
            ],
            "optional": true,
            "type": "numeric or string, optional, default=\"0.00\""
          }
        ],
        "description": "Submit a raw transaction (serialized, hex-encoded) to local node and network.\n\nThe transaction will be sent unconditionally to all peers, so using sendrawtransaction\nfor manual rebroadcast may degrade privacy by leaking the transaction's origin, as\nnodes will normally not rebroadcast non-wallet transactions already in their mempool.\n\nA specific exception, RPC_TRANSACTION_ALREADY_IN_UTXO_SET, may throw if the transaction cannot be added to the mempool.\n\nRelated RPCs: createrawtransaction, signrawtransactionwithkey\n",
        "name": "sendrawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "sendtoaddress": [
      {
        "arguments": [
          {
            "description": "The bitcoin address to send to.",
            "names": [
              "address"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The amount in BTC to send. eg 0.1",
            "names": [
              "amount"
            ],
            "optional": false,
            "type": "numeric or string, required"
          },
          {
            "description": "A comment used to store what the transaction is for.",
            "names": [
              "comment"
            ],
            "optional": true,
            "type": "string, optional"
          },
          {
            "description": "A comment to store the name of the person or organization",
            "names": [
              "comment_to"
            ],
            "optional": true,
            "type": "string, optional"
          },
          {
            "description": "The fee will be deducted from the amount being sent.",
            "names": [
              "subtractfeefromamount"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          },
          {
            "description": "Signal that this transaction can be replaced by a transaction (BIP 125)",
            "names": [
              "replaceable"
            ],
            "optional": true,
            "type": "boolean, optional, default=wallet default"
          },
          {
            "description": "Confirmation target in blocks",
            "names": [
              "conf_target"
            ],
            "optional": true,
            "type": "numeric, optional, default=wallet -txconfirmtarget"
          },
          {
            "description": "The fee estimate mode, must be one of (case insensitive):",
            "names": [
              "estimate_mode"
            ],
            "optional": true,
            "type": "string, optional, default=\"unset\""
          },
          {
            "description": "(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered",
            "names": [
              "avoid_reuse"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          },
          {
            "description": "Specify a fee rate in sat/vB.",
            "names": [
              "fee_rate"
            ],
            "optional": true,
            "type": "numeric or string, optional, default=not set, fall back to wallet fee estimation"
          },
          {
            "description": "If true, return extra information about the transaction.",
            "names": [
              "verbose"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "Send an amount to a given address.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "name": "sendtoaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "setban": [
      {
        "arguments": [
          {
            "description": "The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)",
            "names": [
              "subnet"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list",
            "names": [
              "command"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)",
            "names": [
              "bantime"
            ],
            "optional": true,
            "type": "numeric, optional, default=0"
          },
          {
            "description": "If set, the bantime must be an absolute timestamp expressed in UNIX epoch time",
            "names": [
              "absolute"
            ],
            "optional": true,
            "type": "boolean, optional, default=false"
          }
        ],
        "description": "Attempts to add or remove an IP/Subnet from the banned list.\n",
        "name": "setban",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "sethdseed": [
      {
        "arguments": [
          {
            "description": "Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.",
            "names": [
              "newkeypool"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          },
          {
            "description": "The WIF private key to use as the new HD seed.",
            "names": [
              "seed"
            ],
            "optional": true,
            "type": "string, optional, default=random seed"
          }
        ],
        "description": "Set or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\nHD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\n\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\nNote: This command is only compatible with legacy wallets.\n",
        "name": "sethdseed",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "setlabel": [
      {
        "arguments": [
          {
            "description": "The bitcoin address to be associated with a label.",
            "names": [
              "address"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The label to assign to the address.",
            "names": [
              "label"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Sets the label associated with the given address.\n",
        "name": "setlabel",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "setnetworkactive": [
      {
        "arguments": [
          {
            "description": "true to enable networking, false to disable",
            "names": [
              "state"
            ],
            "optional": false,
            "type": "boolean, required"
          }
        ],
        "description": "Disable/enable all p2p network activity.\n",
        "name": "setnetworkactive",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "settxfee": [
      {
        "arguments": [
          {
            "description": "The transaction fee rate in BTC/kvB",
            "names": [
              "amount"
            ],
            "optional": false,
            "type": "numeric or string, required"
          }
        ],
        "description": "Set the transaction fee rate in BTC/kvB for this wallet. Overrides the global -paytxfee command line parameter.\nCan be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\n",
        "name": "settxfee",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "setwalletflag": [
      {
        "arguments": [
          {
            "description": "The name of the flag to change. Current available flags: avoid_reuse",
            "names": [
              "flag"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The new state.",
            "names": [
              "value"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Change the state of the given wallet flag for a wallet.\n",
        "name": "setwalletflag",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "signmessage": [
      {
        "arguments": [
          {
            "description": "The bitcoin address to use for the private key.",
            "names": [
              "address"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The message to create a signature of.",
            "names": [
              "message"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Sign a message with the private key of an address\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "name": "signmessage",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "signmessagewithprivkey": [
      {
        "arguments": [
          {
            "description": "The private key to sign the message with.",
            "names": [
              "privkey"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The message to create a signature of.",
            "names": [
              "message"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Sign a message with the private key of an address\n",
        "name": "signmessagewithprivkey",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "signrawtransactionwithkey": [
      {
        "arguments": [
          {
            "description": "The transaction hex string",
            "names": [
              "hexstring"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The base58-encoded private keys for signing",
            "names": [
              "privkeys"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "The previous dependent transaction outputs",
            "names": [
              "prevtxs"
            ],
            "optional": true,
            "type": "json array, optional"
          },
          {
            "description": "The signature hash type. Must be one of:",
            "names": [
              "sighashtype"
            ],
            "optional": true,
            "type": "string, optional, default=\"default for taproot, all otherwise\""
          }
        ],
        "description": "Sign inputs for raw transaction (serialized, hex-encoded).\nThe second argument is an array of base58-encoded private\nkeys that will be the only keys used to sign the transaction.\nThe third optional argument (may be null) is an array of previous transaction outputs that\nthis transaction depends on but may not yet be in the block chain.\n",
        "name": "signrawtransactionwithkey",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "signrawtransactionwithwallet": [
      {
        "arguments": [
          {
            "description": "The transaction hex string",
            "names": [
              "hexstring"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The previous dependent transaction outputs",
            "names": [
              "prevtxs"
            ],
            "optional": true,
            "type": "json array, optional"
          },
          {
            "description": "The signature hash type. Must be one of",
            "names": [
              "sighashtype"
            ],
            "optional": true,
            "type": "string, optional, default=\"default for taproot, all otherwise\""
          }
        ],
        "description": "Sign inputs for raw transaction (serialized, hex-encoded).\nThe second optional argument (may be null) is an array of previous transaction outputs that\nthis transaction depends on but may not yet be in the block chain.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "name": "signrawtransactionwithwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "simulaterawtransaction": [
      {
        "arguments": [
          {
            "description": "An array of hex strings of raw transactions.",
            "names": [
              "rawtxs"
            ],
            "optional": true,
            "type": "json array, optional"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          }
        ],
        "description": "Calculate the balance change resulting in the signing and broadcasting of the given transaction(s).\n",
        "name": "simulaterawtransaction",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "stop": [
      {
        "arguments": [],
        "description": "Request a graceful shutdown of Bitcoin Core.\n",
        "name": "stop",
        "results": [
          {
            "description": "\"str\"     A string with the content 'Bitcoin Core stopping'",
            "inner": [],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "submitblock": [
      {
        "arguments": [
          {
            "description": "the hex-encoded block data to submit",
            "names": [
              "hexdata"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "dummy value, for compatibility with BIP22. This value is ignored.",
            "names": [
              "dummy"
            ],
            "optional": true,
            "type": "string, optional, default=ignored"
          }
        ],
        "description": "Attempts to submit new block to network.\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.\n",
        "name": "submitblock",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "submitheader": [
      {
        "arguments": [
          {
            "description": "the hex-encoded block header data",
            "names": [
              "hexdata"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Decode the given hexdata as a header and submit it as a candidate chain tip if valid.\nThrows when the header is invalid.\n",
        "name": "submitheader",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "submitpackage": [
      {
        "arguments": [
          {
            "description": "An array of raw transactions.",
            "names": [
              "package"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "Reject transactions whose fee rate is higher than the specified value, expressed in BTC/kvB.",
            "names": [
              "maxfeerate"
            ],
            "optional": true,
            "type": "numeric or string, optional, default=\"0.10\""
          },
          {
            "description": "Reject transactions with provably unspendable outputs (e.g. 'datacarrier' outputs that use the OP_RETURN opcode) greater than the specified value, expressed in BTC.",
            "names": [
              "maxburnamount"
            ],
            "optional": true,
            "type": "numeric or string, optional, default=\"0.00\""
          }
        ],
        "description": "Submit a package of raw transactions (serialized, hex-encoded) to local node.\nThe package will be validated according to consensus and mempool policy rules. If any transaction passes, it will be accepted to mempool.\nThis RPC is experimental and the interface may be unstable. Refer to doc/policy/packages.md for documentation on package policies.\nWarning: successful submission does not mean the transactions will propagate throughout the network.\n",
        "name": "submitpackage",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "testmempoolaccept": [
      {
        "arguments": [
          {
            "description": "An array of hex strings of raw transactions.",
            "names": [
              "rawtxs"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "Reject transactions whose fee rate is higher than the specified value, expressed in BTC/kvB.",
            "names": [
              "maxfeerate"
            ],
            "optional": true,
            "type": "numeric or string, optional, default=\"0.10\""
          }
        ],
        "description": "Returns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\n\nIf multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.\n\nIf one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).\n\nThe maximum number of transactions allowed is 25.\n\nThis checks if transactions violate the consensus or policy rules.\n\nSee sendrawtransaction call.\n",
        "name": "testmempoolaccept",
        "results": [
          {
            "description": "If multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.",
            "inner": [
              {
                "description": "If one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).",
                "inner": [
                  {
                    "description": "The maximum number of transactions allowed is 25.",
                    "inner": [
                      {
                        "description": "This checks if transactions violate the consensus or policy rules.",
                        "inner": [
                          {
                            "description": "See sendrawtransaction call.",
                            "inner": [],
                            "key_name": "",
                            "type": "string"
                          }
                        ],
                        "key_name": "",
                        "type": "string"
                      }
                    ],
                    "key_name": "",
                    "type": "string"
                  }
                ],
                "key_name": "",
                "type": "string"
              }
            ],
            "key_name": "",
            "type": "string"
          }
        ]
      }
    ],
    "unloadwallet": [
      {
        "arguments": [
          {
            "description": "The name of the wallet to unload. If provided both here and in the RPC endpoint, the two must be identical.",
            "names": [
              "wallet_name"
            ],
            "optional": true,
            "type": "string, optional, default=the wallet name from the rpc endpoint"
          },
          {
            "description": "Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.",
            "names": [
              "load_on_startup"
            ],
            "optional": true,
            "type": "boolean, optional"
          }
        ],
        "description": "Unloads the wallet referenced by the request endpoint, otherwise unloads the wallet specified in the argument.\nSpecifying the wallet name on a wallet endpoint is invalid.\n",
        "name": "unloadwallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "upgradewallet": [
      {
        "arguments": [
          {
            "description": "The version number to upgrade to. Default is the latest wallet version.",
            "names": [
              "version"
            ],
            "optional": true,
            "type": "numeric, optional, default=169900"
          }
        ],
        "description": "Upgrade the wallet. Upgrades to the latest version if no version number is specified.\nNew keys may be generated and a new wallet backup will need to be made.\n",
        "name": "upgradewallet",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "uptime": [
      {
        "arguments": [],
        "description": "Returns the total uptime of the server.\n",
        "name": "uptime",
        "results": [
          {
            "description": "n     The number of seconds that the server has been running",
            "inner": [],
            "key_name": "",
            "type": "number"
          }
        ]
      }
    ],
    "utxoupdatepsbt": [
      {
        "arguments": [
          {
            "description": "A base64 string of a PSBT",
            "names": [
              "psbt"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "An array of either strings or objects",
            "names": [
              "descriptors"
            ],
            "optional": true,
            "type": "json array, optional"
          }
        ],
        "description": "Updates all segwit inputs and outputs in a PSBT with data from output descriptors, the UTXO set, txindex, or the mempool.\n",
        "name": "utxoupdatepsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "validateaddress": [
      {
        "arguments": [
          {
            "description": "The bitcoin address to validate",
            "names": [
              "address"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Return information about the given bitcoin address.\n",
        "name": "validateaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "verifychain": [
      {
        "arguments": [
          {
            "description": "How thorough the block verification is:",
            "names": [
              "checklevel"
            ],
            "optional": true,
            "type": "numeric, optional, default=3, range=0-4"
          },
          {
            "description": "The number of blocks to check.",
            "names": [
              "nblocks"
            ],
            "optional": true,
            "type": "numeric, optional, default=6, 0=all"
          }
        ],
        "description": "Verifies blockchain database.\n",
        "name": "verifychain",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "verifymessage": [
      {
        "arguments": [
          {
            "description": "The bitcoin address to use for the signature.",
            "names": [
              "address"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The signature provided by the signer in base 64 encoding (see signmessage).",
            "names": [
              "signature"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The message that was signed.",
            "names": [
              "message"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Verify a signed message.\n",
        "name": "verifymessage",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "verifytxoutproof": [
      {
        "arguments": [
          {
            "description": "The hex-encoded proof generated by gettxoutproof",
            "names": [
              "proof"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Verifies that a proof points to a transaction in a block, returning the transaction it commits to\nand throwing an RPC error if the block is not in our best chain\n",
        "name": "verifytxoutproof",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "walletcreatefundedpsbt": [
      {
        "arguments": [
          {
            "description": "Leave empty to add inputs automatically. See add_inputs option.",
            "names": [
              "inputs"
            ],
            "optional": true,
            "type": "json array, optional"
          },
          {
            "description": "The outputs specified as key-value pairs.",
            "names": [
              "outputs"
            ],
            "optional": false,
            "type": "json array, required"
          },
          {
            "description": "Raw locktime. Non-0 value also locktime-activates inputs",
            "names": [
              "locktime"
            ],
            "optional": true,
            "type": "numeric, optional, default=0"
          },
          {
            "description": "Options object that can be used to pass named arguments, listed below.",
            "names": [
              "options"
            ],
            "optional": true,
            "type": "json object, optional"
          },
          {
            "description": "Include BIP 32 derivation paths for public keys if we know them",
            "names": [
              "bip32derivs"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Creates and funds a transaction in the Partially Signed Transaction format.\nImplements the Creator and Updater roles.\nAll existing inputs must either have their previous output transaction be in the wallet\nor be in the UTXO set. Solving data must be provided for non-wallet inputs.\n",
        "name": "walletcreatefundedpsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "walletdisplayaddress": [
      {
        "arguments": [
          {
            "description": "bitcoin address to display",
            "names": [
              "address"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Display address on an external signer for verification.\n",
        "name": "walletdisplayaddress",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "walletlock": [
      {
        "arguments": [],
        "description": "Removes the wallet encryption key from memory, locking the wallet.\nAfter calling this method, you will need to call walletpassphrase again\nbefore being able to call any methods which require the wallet to be unlocked.\n",
        "name": "walletlock",
        "results": [
          {
            "description": "null",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "walletpassphrase": [
      {
        "arguments": [
          {
            "description": "The wallet passphrase",
            "names": [
              "passphrase"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The time to keep the decryption key in seconds; capped at 100000000 (~3 years).",
            "names": [
              "timeout"
            ],
            "optional": false,
            "type": "numeric, required"
          }
        ],
        "description": "Stores the wallet decryption key in memory for 'timeout' seconds.\nThis is needed prior to performing transactions related to private keys such as sending bitcoins\n\nNote:\nIssuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\ntime that overrides the old one.\n",
        "name": "walletpassphrase",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "walletpassphrasechange": [
      {
        "arguments": [
          {
            "description": "The current passphrase",
            "names": [
              "oldpassphrase"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "The new passphrase",
            "names": [
              "newpassphrase"
            ],
            "optional": false,
            "type": "string, required"
          }
        ],
        "description": "Changes the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\n",
        "name": "walletpassphrasechange",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ],
    "walletprocesspsbt": [
      {
        "arguments": [
          {
            "description": "The transaction base64 string",
            "names": [
              "psbt"
            ],
            "optional": false,
            "type": "string, required"
          },
          {
            "description": "Also sign the transaction when updating (requires wallet to be unlocked)",
            "names": [
              "sign"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          },
          {
            "description": "The signature hash type to sign with if not specified by the PSBT. Must be one of",
            "names": [
              "sighashtype"
            ],
            "optional": true,
            "type": "string, optional, default=\"default for taproot, all otherwise\""
          },
          {
            "description": "Include BIP 32 derivation paths for public keys if we know them",
            "names": [
              "bip32derivs"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          },
          {
            "description": "Also finalize inputs if possible",
            "names": [
              "finalize"
            ],
            "optional": true,
            "type": "boolean, optional, default=true"
          }
        ],
        "description": "Update a PSBT with input information from our wallet and then sign inputs\nthat we can sign for.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "name": "walletprocesspsbt",
        "results": [
          {
            "description": "",
            "inner": [],
            "key_name": "",
            "type": "none"
          }
        ]
      }
    ]
  }
}
