{
  "commands": {
    "abandontransaction": [
      {
        "name": "abandontransaction",
        "category": "wallet",
        "description": "Mark in-wallet transaction <txid> as abandoned\nThis will mark this transaction and all its in-wallet descendants as abandoned which will allow\nfor their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.\nIt only works on transactions which are not included in a block and are not currently in the mempool.\nIt has no effect on transactions which are already abandoned.\n",
        "examples": "> bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/abandontransaction-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The transaction id",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "txid"
          ],
          "additionalProperties": false
        }
      }
    ],
    "abortrescan": [
      {
        "name": "abortrescan",
        "category": "wallet",
        "description": "Stops current wallet rescan triggered by an RPC call, e.g. by a rescanblockchain call.\nNote: Use \"getwalletinfo\" to query the scanning progress.\n",
        "examples": "\nImport a private key\n> bitcoin-cli rescanblockchain \n\nAbort the running wallet rescan\n> bitcoin-cli abortrescan \n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"abortrescan\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/abortrescan-arguments.json",
          "type": "object"
        }
      }
    ],
    "addconnection": [
      {
        "name": "addconnection",
        "category": "hidden",
        "description": "Open an outbound connection to a specified node. This RPC is for testing only.\n",
        "examples": "> bitcoin-cli addconnection \"192.168.0.6:8333\" \"outbound-full-relay\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"addconnection\", \"params\": [\"192.168.0.6:8333\" \"outbound-full-relay\" true]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/addconnection-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "The IP address and port to attempt connecting to.",
              "type": "string"
            },
            "connection_type": {
              "description": "Type of connection to open (\"outbound-full-relay\", \"block-relay-only\", \"addr-fetch\" or \"feeler\").",
              "type": "string"
            },
            "v2transport": {
              "description": "Attempt to connect using BIP324 v2 transport protocol",
              "type": "boolean"
            }
          },
          "required": [
            "address",
            "connection_type",
            "v2transport"
          ],
          "additionalProperties": false
        }
      }
    ],
    "addnode": [
      {
        "name": "addnode",
        "category": "network",
        "description": "Attempts to add or remove a node from the addnode list.\nOr try a connection to a node once.\nNodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\nfull nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\nAddnode connections are limited to 8 at a time and are counted separately from the -maxconnections limit.\n",
        "examples": "> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\" true]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/addnode-arguments.json",
          "type": "object",
          "properties": {
            "node": {
              "description": "The address of the peer to connect to",
              "type": "string"
            },
            "command": {
              "description": "'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once",
              "type": "string"
            },
            "v2transport": {
              "description": "Attempt to connect using BIP324 v2 transport protocol (ignored for 'remove' command)",
              "type": "boolean"
            }
          },
          "required": [
            "node",
            "command"
          ],
          "additionalProperties": false
        }
      }
    ],
    "addpeeraddress": [
      {
        "name": "addpeeraddress",
        "category": "hidden",
        "description": "Add the address of a potential peer to an address manager table. This RPC is for testing only.",
        "examples": "> bitcoin-cli addpeeraddress \"1.2.3.4\" 8333 true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"addpeeraddress\", \"params\": [\"1.2.3.4\", 8333, true]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/addpeeraddress-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "The IP address of the peer",
              "type": "string"
            },
            "port": {
              "description": "The port of the peer",
              "type": "number"
            },
            "tried": {
              "description": "If true, attempt to add the peer to the tried addresses table",
              "type": "boolean"
            }
          },
          "required": [
            "address",
            "port"
          ],
          "additionalProperties": false
        }
      }
    ],
    "analyzepsbt": [
      {
        "name": "analyzepsbt",
        "category": "rawtransactions",
        "description": "Analyzes and provides information about the current status of a PSBT and its inputs\n",
        "examples": "> bitcoin-cli analyzepsbt \"psbt\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/analyzepsbt-arguments.json",
          "type": "object",
          "properties": {
            "psbt": {
              "description": "A base64 string of a PSBT",
              "type": "string"
            }
          },
          "required": [
            "psbt"
          ],
          "additionalProperties": false
        }
      }
    ],
    "backupwallet": [
      {
        "name": "backupwallet",
        "category": "wallet",
        "description": "Safely copies the current wallet file to the specified destination, which can either be a directory or a path with a filename.\n",
        "examples": "> bitcoin-cli backupwallet \"backup.dat\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/backupwallet-arguments.json",
          "type": "object",
          "properties": {
            "destination": {
              "description": "The destination directory or file",
              "type": "string"
            }
          },
          "required": [
            "destination"
          ],
          "additionalProperties": false
        }
      }
    ],
    "bumpfee": [
      {
        "name": "bumpfee",
        "category": "wallet",
        "description": "Bumps the fee of a transaction T, replacing it with a new transaction B.\nA transaction with the given txid must be in the wallet.\nThe command will pay the additional fee by reducing change outputs or adding inputs when necessary.\nIt may add a new change output if one does not already exist.\nAll inputs in the original transaction will be included in the replacement transaction.\nThe command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\nBy default, the new fee will be calculated automatically using the estimatesmartfee RPC.\nThe user can specify a confirmation target for estimatesmartfee.\nAlternatively, the user can specify a fee rate in sat/vB for the new transaction.\nAt a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\nreturned by getnetworkinfo) to enter the node's mempool.\n* WARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB. *\n",
        "examples": "\nBump the fee, get the new transaction's txid\n> bitcoin-cli bumpfee <txid>\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/bumpfee-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The txid to be bumped",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "conf_target": {
                  "description": "Confirmation target in blocks\n",
                  "type": "number"
                },
                "fee_rate": {
                  "description": "\nSpecify a fee rate in sat/vB instead of relying on the built-in fee estimator.\nMust be at least 1.000 sat/vB higher than the current transaction fee rate.\nWARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB.\n",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "replaceable": {
                  "description": "Whether the new transaction should be\nmarked bip-125 replaceable. If true, the sequence numbers in the transaction will\nbe set to 0xfffffffd. If false, any input sequence numbers in the\ntransaction will be set to 0xfffffffe\nso the new transaction will not be explicitly bip-125 replaceable (though it may\nstill be replaceable in practice, for example if it has unconfirmed ancestors which\nare replaceable).\n",
                  "type": "boolean"
                },
                "estimate_mode": {
                  "description": "The fee estimate mode, must be one of (case insensitive):\nunset, economical, conservative \nunset means no mode set (economical mode is used if the transaction is replaceable;\notherwise, conservative mode is used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
                  "type": "string"
                },
                "outputs": {
                  "description": "The outputs specified as key-value pairs.\nEach key may only appear once, i.e. there can only be one 'data' output, and no address may be duplicated.\nAt least one output of either type must be specified.\nCannot be provided if 'original_change_index' is specified.",
                  "type": "array",
                  "items": [
                    {
                      "type": "object",
                      "additionalProperties": {
                        "description": "A key-value pair. The key (string) is the bitcoin address,\nthe value (float or string) is the amount in BTC",
                        "type": [
                          "number",
                          "string"
                        ]
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "A key-value pair. The key must be \"data\", the value is hex-encoded data that becomes a part of an OP_RETURN output",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "data"
                      ]
                    }
                  ]
                },
                "original_change_index": {
                  "description": "The 0-based index of the change output on the original transaction. The indicated output will be recycled into the new change output on the bumped transaction. The remainder after paying the recipients and fees will be sent to the output script of the original change output. The change output’s amount can increase if bumping the transaction adds new inputs, otherwise it will decrease. Cannot be used in combination with the 'outputs' option.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          },
          "required": [
            "txid"
          ],
          "additionalProperties": false
        }
      }
    ],
    "clearbanned": [
      {
        "name": "clearbanned",
        "category": "network",
        "description": "Clear all banned IPs.\n",
        "examples": "> bitcoin-cli clearbanned \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"clearbanned\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/clearbanned-arguments.json",
          "type": "object"
        }
      }
    ],
    "combinepsbt": [
      {
        "name": "combinepsbt",
        "category": "rawtransactions",
        "description": "Combine multiple partially signed Bitcoin transactions into one transaction.\nImplements the Combiner role.\n",
        "examples": "> bitcoin-cli combinepsbt '[\"mybase64_1\", \"mybase64_2\", \"mybase64_3\"]'\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/combinepsbt-arguments.json",
          "type": "object",
          "properties": {
            "txs": {
              "description": "The base64 strings of partially signed transactions",
              "type": "array",
              "items": [
                {
                  "description": "A base64 string of a PSBT",
                  "type": "string"
                }
              ]
            }
          },
          "required": [
            "txs"
          ],
          "additionalProperties": false
        }
      }
    ],
    "combinerawtransaction": [
      {
        "name": "combinerawtransaction",
        "category": "rawtransactions",
        "description": "Combine multiple partially signed transactions into one transaction.\nThe combined transaction may be another partially signed transaction or a \nfully signed transaction.",
        "examples": "> bitcoin-cli combinerawtransaction '[\"myhex1\", \"myhex2\", \"myhex3\"]'\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/combinerawtransaction-arguments.json",
          "type": "object",
          "properties": {
            "txs": {
              "description": "The hex strings of partially signed transactions",
              "type": "array",
              "items": [
                {
                  "description": "A hex-encoded raw transaction",
                  "type": "string",
                  "pattern": "^([0-9][a-f]{2})+$"
                }
              ]
            }
          },
          "required": [
            "txs"
          ],
          "additionalProperties": false
        }
      }
    ],
    "converttopsbt": [
      {
        "name": "converttopsbt",
        "category": "rawtransactions",
        "description": "Converts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\ncreatepsbt and walletcreatefundedpsbt should be used for new applications.\n",
        "examples": "\nCreate a transaction\n> bitcoin-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"\n\nConvert the transaction to a PSBT\n> bitcoin-cli converttopsbt \"rawtransaction\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/converttopsbt-arguments.json",
          "type": "object",
          "properties": {
            "hexstring": {
              "description": "The hex string of a raw transaction",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "permitsigdata": {
              "description": "If true, any signatures in the input will be discarded and conversion\n                              will continue. If false, RPC will fail if any signatures are present.",
              "type": "boolean"
            },
            "iswitness": {
              "description": "Whether the transaction hex is a serialized witness transaction.\nIf iswitness is not present, heuristic tests will be used in decoding.\nIf true, only witness deserialization will be tried.\nIf false, only non-witness deserialization will be tried.\nThis boolean should reflect whether the transaction has inputs\n(e.g. fully valid, or on-chain transactions), if known by the caller.",
              "type": "boolean"
            }
          },
          "required": [
            "hexstring"
          ],
          "additionalProperties": false
        }
      }
    ],
    "createmultisig": [
      {
        "name": "createmultisig",
        "category": "util",
        "description": "Creates a multi-signature address with n signatures of m keys required.\nIt returns a json object with the address and redeemScript.\n",
        "examples": "\nCreate a multisig address from 2 public keys\n> bitcoin-cli createmultisig 2 \"[\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\",\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\"]\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createmultisig\", \"params\": [2, [\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\",\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/createmultisig-arguments.json",
          "type": "object",
          "properties": {
            "nrequired": {
              "description": "The number of required signatures out of the m keys.",
              "type": "number"
            },
            "keys": {
              "description": "The hex-encoded public keys.",
              "type": "array",
              "items": [
                {
                  "description": "The hex-encoded public key",
                  "type": "string",
                  "pattern": "^([0-9][a-f]{2})+$"
                }
              ]
            },
            "address_type": {
              "description": "The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\".",
              "type": "string"
            }
          },
          "required": [
            "nrequired",
            "keys"
          ],
          "additionalProperties": false
        }
      }
    ],
    "createpsbt": [
      {
        "name": "createpsbt",
        "category": "rawtransactions",
        "description": "Creates a transaction in the Partially Signed Transaction format.\nImplements the Creator role.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.\n",
        "examples": "> bitcoin-cli createpsbt \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"address\\\":0.01}]\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/createpsbt-arguments.json",
          "type": "object",
          "properties": {
            "inputs": {
              "description": "The inputs",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "txid": {
                      "description": "The transaction id",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "vout": {
                      "description": "The output number",
                      "type": "number"
                    },
                    "sequence": {
                      "description": "The sequence number",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "txid",
                    "vout"
                  ]
                }
              ]
            },
            "outputs": {
              "description": "The outputs specified as key-value pairs.\nEach key may only appear once, i.e. there can only be one 'data' output, and no address may be duplicated.\nAt least one output of either type must be specified.\nFor compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\n                             accepted as second parameter.",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC",
                    "type": [
                      "number",
                      "string"
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A key-value pair. The key must be \"data\", the value is hex-encoded data that becomes a part of an OP_RETURN output",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              ]
            },
            "locktime": {
              "description": "Raw locktime. Non-0 value also locktime-activates inputs",
              "type": "number"
            },
            "replaceable": {
              "description": "Marks this transaction as BIP125-replaceable.\nAllows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.",
              "type": "boolean"
            }
          },
          "required": [
            "inputs",
            "outputs"
          ],
          "additionalProperties": false
        }
      }
    ],
    "createrawtransaction": [
      {
        "name": "createrawtransaction",
        "category": "rawtransactions",
        "description": "Create a transaction spending the given inputs and creating new outputs.\nOutputs can be addresses or data.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.\n",
        "examples": "> bitcoin-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"address\\\":0.01}]\"\n> bitcoin-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"[{\\\"address\\\":0.01}]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"[{\\\"data\\\":\\\"00010203\\\"}]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/createrawtransaction-arguments.json",
          "type": "object",
          "properties": {
            "inputs": {
              "description": "The inputs",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "txid": {
                      "description": "The transaction id",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "vout": {
                      "description": "The output number",
                      "type": "number"
                    },
                    "sequence": {
                      "description": "The sequence number",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "txid",
                    "vout"
                  ]
                }
              ]
            },
            "outputs": {
              "description": "The outputs specified as key-value pairs.\nEach key may only appear once, i.e. there can only be one 'data' output, and no address may be duplicated.\nAt least one output of either type must be specified.\nFor compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\n                             accepted as second parameter.",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC",
                    "type": [
                      "number",
                      "string"
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A key-value pair. The key must be \"data\", the value is hex-encoded data that becomes a part of an OP_RETURN output",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              ]
            },
            "locktime": {
              "description": "Raw locktime. Non-0 value also locktime-activates inputs",
              "type": "number"
            },
            "replaceable": {
              "description": "Marks this transaction as BIP125-replaceable.\nAllows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.",
              "type": "boolean"
            }
          },
          "required": [
            "inputs",
            "outputs"
          ],
          "additionalProperties": false
        }
      }
    ],
    "createwallet": [
      {
        "name": "createwallet",
        "category": "wallet",
        "description": "Creates and loads a new wallet.\n",
        "examples": "> bitcoin-cli createwallet \"testwallet\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createwallet\", \"params\": [\"testwallet\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli -named createwallet wallet_name=descriptors avoid_reuse=true load_on_startup=true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createwallet\", \"params\": {\"wallet_name\":\"descriptors\",\"avoid_reuse\":true,\"load_on_startup\":true}}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/createwallet-arguments.json",
          "type": "object",
          "properties": {
            "wallet_name": {
              "description": "The name for the new wallet. If this is a path, the wallet will be created at the path location.",
              "type": "string"
            },
            "disable_private_keys": {
              "description": "Disable the possibility of private keys (only watchonlys are possible in this mode).",
              "type": "boolean"
            },
            "blank": {
              "description": "Create a blank wallet. A blank wallet has no keys.",
              "type": "boolean"
            },
            "passphrase": {
              "description": "Encrypt the wallet with this passphrase.",
              "type": "string"
            },
            "avoid_reuse": {
              "description": "Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.",
              "type": "boolean"
            },
            "descriptors": {
              "description": "If set, must be \"true\"",
              "type": "boolean"
            },
            "load_on_startup": {
              "description": "Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.",
              "type": "boolean"
            },
            "external_signer": {
              "description": "Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.",
              "type": "boolean"
            }
          },
          "required": [
            "wallet_name"
          ],
          "additionalProperties": false
        }
      }
    ],
    "createwalletdescriptor": [
      {
        "name": "createwalletdescriptor",
        "category": "wallet",
        "description": "Creates the wallet's descriptor for the given address type. The address type must be one that the wallet does not already have a descriptor for.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "> bitcoin-cli createwalletdescriptor bech32m\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"createwalletdescriptor\", \"params\": [bech32m]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/createwalletdescriptor-arguments.json",
          "type": "object",
          "properties": {
            "type": {
              "description": "The address type the descriptor will produce. Options are \"legacy\", \"p2sh-segwit\", \"bech32\", and \"bech32m\".",
              "type": "string"
            },
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "internal": {
                  "description": "Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)",
                  "type": "boolean"
                },
                "hdkey": {
                  "description": "The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "required": [
            "type"
          ],
          "additionalProperties": false
        }
      }
    ],
    "decodepsbt": [
      {
        "name": "decodepsbt",
        "category": "rawtransactions",
        "description": "Return a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.",
        "examples": "> bitcoin-cli decodepsbt \"psbt\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/decodepsbt-arguments.json",
          "type": "object",
          "properties": {
            "psbt": {
              "description": "The PSBT base64 string",
              "type": "string"
            }
          },
          "required": [
            "psbt"
          ],
          "additionalProperties": false
        }
      }
    ],
    "decoderawtransaction": [
      {
        "name": "decoderawtransaction",
        "category": "rawtransactions",
        "description": "Return a JSON object representing the serialized, hex-encoded transaction.",
        "examples": "> bitcoin-cli decoderawtransaction \"hexstring\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/decoderawtransaction-arguments.json",
          "type": "object",
          "properties": {
            "hexstring": {
              "description": "The transaction hex string",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "iswitness": {
              "description": "Whether the transaction hex is a serialized witness transaction.\nIf iswitness is not present, heuristic tests will be used in decoding.\nIf true, only witness deserialization will be tried.\nIf false, only non-witness deserialization will be tried.\nThis boolean should reflect whether the transaction has inputs\n(e.g. fully valid, or on-chain transactions), if known by the caller.",
              "type": "boolean"
            }
          },
          "required": [
            "hexstring"
          ],
          "additionalProperties": false
        }
      }
    ],
    "decodescript": [
      {
        "name": "decodescript",
        "category": "rawtransactions",
        "description": "Decode a hex-encoded script.\n",
        "examples": "> bitcoin-cli decodescript \"hexstring\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/decodescript-arguments.json",
          "type": "object",
          "properties": {
            "hexstring": {
              "description": "the hex-encoded script",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "hexstring"
          ],
          "additionalProperties": false
        }
      }
    ],
    "deriveaddresses": [
      {
        "name": "deriveaddresses",
        "category": "util",
        "description": "Derives one or more addresses corresponding to an output descriptor.\nExamples of output descriptors are:\n    pkh(<pubkey>)                                     P2PKH outputs for the given pubkey\n    wpkh(<pubkey>)                                    Native segwit P2PKH outputs for the given pubkey\n    sh(multi(<n>,<pubkey>,<pubkey>,...))              P2SH-multisig outputs for the given threshold and pubkeys\n    raw(<hex script>)                                 Outputs whose output script equals the specified hex-encoded bytes\n    tr(<pubkey>,multi_a(<n>,<pubkey>,<pubkey>,...))   P2TR-multisig outputs for the given threshold and pubkeys\n\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\nor more path elements separated by \"/\", where \"h\" represents a hardened child key.\nFor more information on output descriptors, see the documentation in the doc/descriptors.md file.\n",
        "examples": "First three native segwit receive addresses\n> bitcoin-cli deriveaddresses \"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#cjjspncu\" \"[0,2]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"deriveaddresses\", \"params\": [\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#cjjspncu\", \"[0,2]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/deriveaddresses-arguments.json",
          "type": "object",
          "properties": {
            "descriptor": {
              "description": "The descriptor.",
              "type": "string"
            },
            "range": {
              "description": "If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.",
              "type": [
                "number",
                "array"
              ]
            }
          },
          "required": [
            "descriptor"
          ],
          "additionalProperties": false
        }
      }
    ],
    "descriptorprocesspsbt": [
      {
        "name": "descriptorprocesspsbt",
        "category": "rawtransactions",
        "description": "Update all segwit inputs in a PSBT with information from output descriptors, the UTXO set or the mempool. \nThen, sign the inputs we are able to with information from the output descriptors. ",
        "examples": "> bitcoin-cli descriptorprocesspsbt \"psbt\" \"[\\\"descriptor1\\\", \\\"descriptor2\\\"]\"\n> bitcoin-cli descriptorprocesspsbt \"psbt\" \"[{\\\"desc\\\":\\\"mydescriptor\\\", \\\"range\\\":21}]\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/descriptorprocesspsbt-arguments.json",
          "type": "object",
          "properties": {
            "psbt": {
              "description": "The transaction base64 string",
              "type": "string"
            },
            "descriptors": {
              "description": "An array of either strings or objects",
              "type": "array",
              "items": [
                {
                  "description": "An output descriptor",
                  "type": "string"
                },
                {
                  "description": "An object with an output descriptor and extra information",
                  "type": "object",
                  "properties": {
                    "desc": {
                      "description": "An output descriptor",
                      "type": "string"
                    },
                    "range": {
                      "description": "Up to what index HD chains should be explored (either end or [begin,end])",
                      "type": [
                        "number",
                        "array"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "desc"
                  ]
                }
              ]
            },
            "sighashtype": {
              "description": "The signature hash type to sign with if not specified by the PSBT. Must be one of\n       \"DEFAULT\"\n       \"ALL\"\n       \"NONE\"\n       \"SINGLE\"\n       \"ALL|ANYONECANPAY\"\n       \"NONE|ANYONECANPAY\"\n       \"SINGLE|ANYONECANPAY\"",
              "type": "string"
            },
            "bip32derivs": {
              "description": "Include BIP 32 derivation paths for public keys if we know them",
              "type": "boolean"
            },
            "finalize": {
              "description": "Also finalize inputs if possible",
              "type": "boolean"
            }
          },
          "required": [
            "psbt",
            "descriptors"
          ],
          "additionalProperties": false
        }
      }
    ],
    "disconnectnode": [
      {
        "name": "disconnectnode",
        "category": "network",
        "description": "Immediately disconnects from the specified peer node.\n\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\n\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\n",
        "examples": "> bitcoin-cli disconnectnode \"192.168.0.6:8333\"\n> bitcoin-cli disconnectnode \"\" 1\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"disconnectnode\", \"params\": [\"\", 1]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/disconnectnode-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "The IP address/port of the node",
              "type": "string"
            },
            "nodeid": {
              "description": "The node ID (see getpeerinfo for node IDs)",
              "type": "number"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "dumptxoutset": [
      {
        "name": "dumptxoutset",
        "category": "blockchain",
        "description": "Write the serialized UTXO set to a file. This can be used in loadtxoutset afterwards if this snapshot height is supported in the chainparams as well.\n\nUnless the \"latest\" type is requested, the node will roll back to the requested height and network activity will be suspended during this process. Because of this it is discouraged to interact with the node in any other way during the execution of this call to avoid inconsistent results and race conditions, particularly RPCs that interact with blockstorage.\n\nThis call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)",
        "examples": "> bitcoin-cli -rpcclienttimeout=0 dumptxoutset utxo.dat latest\n> bitcoin-cli -rpcclienttimeout=0 dumptxoutset utxo.dat rollback\n> bitcoin-cli -rpcclienttimeout=0 -named dumptxoutset utxo.dat rollback=853456\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/dumptxoutset-arguments.json",
          "type": "object",
          "properties": {
            "path": {
              "description": "Path to the output file. If relative, will be prefixed by datadir.",
              "type": "string"
            },
            "type": {
              "description": "The type of snapshot to create. Can be \"latest\" to create a snapshot of the current UTXO set or \"rollback\" to temporarily roll back the state of the node to a historical block before creating the snapshot of a historical UTXO set. This parameter can be omitted if a separate \"rollback\" named parameter is specified indicating the height or hash of a specific historical block. If \"rollback\" is specified and separate \"rollback\" named parameter is not specified, this will roll back to the latest valid snapshot block that can currently be loaded with loadtxoutset.",
              "type": "string"
            },
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "rollback": {
                  "description": "Height or hash of the block to roll back to before creating the snapshot. Note: The further this number is from the tip, the longer this process will take. Consider setting a higher -rpcclienttimeout value in this case.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false
        }
      }
    ],
    "echo": [
      {
        "name": "echo",
        "category": "hidden",
        "description": "Simply echo back the input arguments. This command is for testing.\n\nIt will return an internal bug report when arg9='trigger_internal_bug' is passed.\n\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in bitcoin-cli and the GUI. There is no server-side difference.",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/echo-arguments.json",
          "type": "object",
          "properties": {
            "arg0": {
              "type": "string"
            },
            "arg1": {
              "type": "string"
            },
            "arg2": {
              "type": "string"
            },
            "arg3": {
              "type": "string"
            },
            "arg4": {
              "type": "string"
            },
            "arg5": {
              "type": "string"
            },
            "arg6": {
              "type": "string"
            },
            "arg7": {
              "type": "string"
            },
            "arg8": {
              "type": "string"
            },
            "arg9": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "echoipc": [
      {
        "name": "echoipc",
        "category": "hidden",
        "description": "Echo back the input argument, passing it through a spawned process in a multiprocess build.\nThis command is for testing.\n",
        "examples": "> bitcoin-cli echo \"Hello world\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"echo\", \"params\": [\"Hello world\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/echoipc-arguments.json",
          "type": "object",
          "properties": {
            "arg": {
              "description": "The string to echo",
              "type": "string"
            }
          },
          "required": [
            "arg"
          ],
          "additionalProperties": false
        }
      }
    ],
    "echojson": [
      {
        "name": "echojson",
        "category": "hidden",
        "description": "Simply echo back the input arguments. This command is for testing.\n\nIt will return an internal bug report when arg9='trigger_internal_bug' is passed.\n\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in bitcoin-cli and the GUI. There is no server-side difference.",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/echojson-arguments.json",
          "type": "object",
          "properties": {
            "arg0": {
              "type": "string"
            },
            "arg1": {
              "type": "string"
            },
            "arg2": {
              "type": "string"
            },
            "arg3": {
              "type": "string"
            },
            "arg4": {
              "type": "string"
            },
            "arg5": {
              "type": "string"
            },
            "arg6": {
              "type": "string"
            },
            "arg7": {
              "type": "string"
            },
            "arg8": {
              "type": "string"
            },
            "arg9": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "encryptwallet": [
      {
        "name": "encryptwallet",
        "category": "wallet",
        "description": "Encrypts the wallet with 'passphrase'. This is for first time encryption.\nAfter this, any calls that interact with private keys such as sending or signing \nwill require the passphrase to be set prior to making these calls.\nUse the walletpassphrase call for this, and then walletlock call.\nIf the wallet is already encrypted, use the walletpassphrasechange call.\n** IMPORTANT **\nFor security reasons, the encryption process will generate a new HD seed, resulting\nin the creation of a fresh set of active descriptors. Therefore, it is crucial to\nsecurely back up the newly generated wallet file using the backupwallet RPC.\n",
        "examples": "\nEncrypt your wallet\n> bitcoin-cli encryptwallet \"my pass phrase\"\n\nNow set the passphrase to use the wallet, such as for signing or sending bitcoin\n> bitcoin-cli walletpassphrase \"my pass phrase\"\n\nNow we can do something like sign\n> bitcoin-cli signmessage \"address\" \"test message\"\n\nNow lock the wallet again by removing the passphrase\n> bitcoin-cli walletlock \n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/encryptwallet-arguments.json",
          "type": "object",
          "properties": {
            "passphrase": {
              "description": "The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.",
              "type": "string"
            }
          },
          "required": [
            "passphrase"
          ],
          "additionalProperties": false
        }
      }
    ],
    "enumeratesigners": [
      {
        "name": "enumeratesigners",
        "category": "signer",
        "description": "Returns a list of external signers from -signer.",
        "examples": "> bitcoin-cli enumeratesigners \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"enumeratesigners\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/enumeratesigners-arguments.json",
          "type": "object"
        }
      }
    ],
    "estimaterawfee": [
      {
        "name": "estimaterawfee",
        "category": "hidden",
        "description": "WARNING: This interface is unstable and may disappear or change!\n\nWARNING: This is an advanced API call that is tightly coupled to the specific\nimplementation of fee estimation. The parameters it can be called with\nand the results it returns will change if the internal implementation changes.\n\nEstimates the approximate fee per kilobyte needed for a transaction to begin\nconfirmation within conf_target blocks if possible. Uses virtual transaction size as\ndefined in BIP 141 (witness data is discounted).\n",
        "examples": "> bitcoin-cli estimaterawfee 6 0.9\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/estimaterawfee-arguments.json",
          "type": "object",
          "properties": {
            "conf_target": {
              "description": "Confirmation target in blocks (1 - 1008)",
              "type": "number"
            },
            "threshold": {
              "description": "The proportion of transactions in a given feerate range that must have been\nconfirmed within conf_target in order to consider those feerates as high enough and proceed to check\nlower buckets.",
              "type": "number"
            }
          },
          "required": [
            "conf_target"
          ],
          "additionalProperties": false
        }
      }
    ],
    "estimatesmartfee": [
      {
        "name": "estimatesmartfee",
        "category": "util",
        "description": "Estimates the approximate fee per kilobyte needed for a transaction to begin\nconfirmation within conf_target blocks if possible and return the number of blocks\nfor which the estimate is valid. Uses virtual transaction size as defined\nin BIP 141 (witness data is discounted).\n",
        "examples": "> bitcoin-cli estimatesmartfee 6\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"estimatesmartfee\", \"params\": [6]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/estimatesmartfee-arguments.json",
          "type": "object",
          "properties": {
            "conf_target": {
              "description": "Confirmation target in blocks (1 - 1008)",
              "type": "number"
            },
            "estimate_mode": {
              "description": "The fee estimate mode.\nunset, economical, conservative \nunset means no mode set (default mode will be used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
              "type": "string"
            }
          },
          "required": [
            "conf_target"
          ],
          "additionalProperties": false
        }
      }
    ],
    "finalizepsbt": [
      {
        "name": "finalizepsbt",
        "category": "rawtransactions",
        "description": "Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\nnetwork serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\ncreated which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\nImplements the Finalizer and Extractor roles.\n",
        "examples": "> bitcoin-cli finalizepsbt \"psbt\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/finalizepsbt-arguments.json",
          "type": "object",
          "properties": {
            "psbt": {
              "description": "A base64 string of a PSBT",
              "type": "string"
            },
            "extract": {
              "description": "If true and the transaction is complete,\n                             extract and return the complete transaction in normal network serialization instead of the PSBT.",
              "type": "boolean"
            }
          },
          "required": [
            "psbt"
          ],
          "additionalProperties": false
        }
      }
    ],
    "fundrawtransaction": [
      {
        "name": "fundrawtransaction",
        "category": "rawtransactions",
        "description": "If the transaction has no inputs, they will be automatically selected to meet its out value.\nIt will add at most one change output to the outputs.\nNo existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.\nNote that inputs which were signed may need to be resigned after completion since in/outputs have been added.\nThe inputs added will not be signed, use signrawtransactionwithkey\nor signrawtransactionwithwallet for that.\nAll existing inputs must either have their previous output transaction be in the wallet\nor be in the UTXO set. Solving data must be provided for non-wallet inputs.\nNote that all inputs selected must be of standard form and P2SH scripts must be\nin the wallet using importdescriptors (to calculate fees).\nYou can see whether this is the case by checking the \"solvable\" field in the listunspent output.\nOnly pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only.\nNote that if specifying an exact fee rate, the resulting transaction may have a higher fee rate\nif the transaction has unconfirmed inputs. This is because the wallet will attempt to make the\nentire package have the given fee rate, not the resulting transaction.\n",
        "examples": "\nCreate a transaction with no inputs\n> bitcoin-cli createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n\nAdd sufficient unsigned inputs to meet the output value\n> bitcoin-cli fundrawtransaction \"rawtransactionhex\"\n\nSign the transaction\n> bitcoin-cli signrawtransactionwithwallet \"fundedtransactionhex\"\n\nSend the transaction\n> bitcoin-cli sendrawtransaction \"signedtransactionhex\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/fundrawtransaction-arguments.json",
          "type": "object",
          "properties": {
            "hexstring": {
              "description": "The hex string of the raw transaction",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "options": {
              "description": "For backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}",
              "type": "object",
              "format": "named",
              "properties": {
                "add_inputs": {
                  "description": "For a transaction with existing inputs, automatically include more if they are not enough.",
                  "type": "boolean"
                },
                "include_unsafe": {
                  "description": "Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\nWarning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\nIf that happens, you will need to fund the transaction with different inputs and republish it.",
                  "type": "boolean"
                },
                "minconf": {
                  "description": "If add_inputs is specified, require inputs with at least this many confirmations.",
                  "type": "number"
                },
                "maxconf": {
                  "description": "If add_inputs is specified, require inputs with at most this many confirmations.",
                  "type": "number"
                },
                "changeAddress": {
                  "description": "The bitcoin address to receive the change",
                  "type": "string"
                },
                "changePosition": {
                  "description": "The index of the change output",
                  "type": "number"
                },
                "change_type": {
                  "description": "The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", \"bech32\", and \"bech32m\".",
                  "type": "string"
                },
                "includeWatching": {
                  "description": "Also select inputs which are watch only.\nOnly solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\ne.g. with 'importdescriptors'.",
                  "type": "boolean"
                },
                "lockUnspents": {
                  "description": "Lock selected unspent outputs",
                  "type": "boolean"
                },
                "fee_rate": {
                  "description": "Specify a fee rate in sat/vB.",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "feeRate": {
                  "description": "Specify a fee rate in BTC/kvB.",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "subtractFeeFromOutputs": {
                  "description": "The integers.\nThe fee will be equally deducted from the amount of each specified output.\nThose recipients will receive less bitcoins than you enter in their corresponding amount field.\nIf no outputs are specified here, the sender pays the fee.",
                  "type": "array",
                  "items": [
                    {
                      "description": "The zero-based output index, before a change output is added.",
                      "type": "number"
                    }
                  ]
                },
                "input_weights": {
                  "description": "Inputs and their corresponding weights",
                  "type": "array",
                  "items": [
                    {
                      "type": "object",
                      "properties": {
                        "txid": {
                          "description": "The transaction id",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        },
                        "vout": {
                          "description": "The output index",
                          "type": "number"
                        },
                        "weight": {
                          "description": "The maximum weight for this input, including the weight of the outpoint and sequence number. Note that serialized signature sizes are not guaranteed to be consistent, so the maximum DER signatures size of 73 bytes should be used when considering ECDSA signatures.Remember to convert serialized sizes to weight units when necessary.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "txid",
                        "vout",
                        "weight"
                      ]
                    }
                  ]
                },
                "max_tx_weight": {
                  "description": "The maximum acceptable transaction weight.\nTransaction building will fail if this can not be satisfied.",
                  "type": "number"
                },
                "conf_target": {
                  "description": "Confirmation target in blocks",
                  "type": "number"
                },
                "estimate_mode": {
                  "description": "The fee estimate mode, must be one of (case insensitive):\nunset, economical, conservative \nunset means no mode set (economical mode is used if the transaction is replaceable;\notherwise, conservative mode is used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
                  "type": "string"
                },
                "replaceable": {
                  "description": "Marks this transaction as BIP125-replaceable.\nAllows this transaction to be replaced by a transaction with higher fees",
                  "type": "boolean"
                },
                "solving_data": {
                  "description": "Keys and scripts needed for producing a final transaction with a dummy signature.\nUsed for fee estimation during coin selection.",
                  "type": "object",
                  "properties": {
                    "pubkeys": {
                      "description": "Public keys involved in this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A public key",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        }
                      ]
                    },
                    "scripts": {
                      "description": "Scripts involved in this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A script",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        }
                      ]
                    },
                    "descriptors": {
                      "description": "Descriptors that provide solving data for this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A descriptor",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "iswitness": {
              "description": "Whether the transaction hex is a serialized witness transaction.\nIf iswitness is not present, heuristic tests will be used in decoding.\nIf true, only witness deserialization will be tried.\nIf false, only non-witness deserialization will be tried.\nThis boolean should reflect whether the transaction has inputs\n(e.g. fully valid, or on-chain transactions), if known by the caller.",
              "type": "boolean"
            }
          },
          "required": [
            "hexstring"
          ],
          "additionalProperties": false
        }
      }
    ],
    "generate": [
      {
        "name": "generate",
        "category": "hidden",
        "description": "has been replaced by the -generate cli option. Refer to -help for more information.",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/generate-arguments.json",
          "type": "object"
        }
      }
    ],
    "generateblock": [
      {
        "name": "generateblock",
        "category": "hidden",
        "description": "Mine a set of ordered transactions to a specified address or descriptor and return the block hash.",
        "examples": "\nGenerate a block to myaddress, with txs rawtx and mempool_txid\n> bitcoin-cli generateblock \"myaddress\" '[\"rawtx\", \"mempool_txid\"]'\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/generateblock-arguments.json",
          "type": "object",
          "properties": {
            "output": {
              "description": "The address or descriptor to send the newly generated bitcoin to.",
              "type": "string"
            },
            "transactions": {
              "description": "An array of hex strings which are either txids or raw transactions.\nTxids must reference transactions currently in the mempool.\nAll transactions must be valid and in valid order, otherwise the block will be rejected.",
              "type": "array",
              "items": [
                {
                  "type": "string",
                  "pattern": "^([0-9][a-f]{2})+$"
                }
              ]
            },
            "submit": {
              "description": "Whether to submit the block before the RPC call returns or to return it as hex.",
              "type": "boolean"
            }
          },
          "required": [
            "output",
            "transactions"
          ],
          "additionalProperties": false
        }
      }
    ],
    "generatetoaddress": [
      {
        "name": "generatetoaddress",
        "category": "hidden",
        "description": "Mine to a specified address and return the block hashes.",
        "examples": "\nGenerate 11 blocks to myaddress\n> bitcoin-cli generatetoaddress 11 \"myaddress\"\nIf you are using the Bitcoin Core wallet, you can get a new address to send the newly generated bitcoin to with:\n> bitcoin-cli getnewaddress \n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/generatetoaddress-arguments.json",
          "type": "object",
          "properties": {
            "nblocks": {
              "description": "How many blocks are generated.",
              "type": "number"
            },
            "address": {
              "description": "The address to send the newly generated bitcoin to.",
              "type": "string"
            },
            "maxtries": {
              "description": "How many iterations to try.",
              "type": "number"
            }
          },
          "required": [
            "nblocks",
            "address"
          ],
          "additionalProperties": false
        }
      }
    ],
    "generatetodescriptor": [
      {
        "name": "generatetodescriptor",
        "category": "hidden",
        "description": "Mine to a specified descriptor and return the block hashes.",
        "examples": "\nGenerate 11 blocks to mydesc\n> bitcoin-cli generatetodescriptor 11 \"mydesc\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/generatetodescriptor-arguments.json",
          "type": "object",
          "properties": {
            "num_blocks": {
              "description": "How many blocks are generated.",
              "type": "number"
            },
            "descriptor": {
              "description": "The descriptor to send the newly generated bitcoin to.",
              "type": "string"
            },
            "maxtries": {
              "description": "How many iterations to try.",
              "type": "number"
            }
          },
          "required": [
            "num_blocks",
            "descriptor"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getaddednodeinfo": [
      {
        "name": "getaddednodeinfo",
        "category": "network",
        "description": "Returns information about the given added node, or all added nodes\n(note that onetry addnodes are not listed here)\n",
        "examples": "> bitcoin-cli getaddednodeinfo \"192.168.0.201\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [\"192.168.0.201\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getaddednodeinfo-arguments.json",
          "type": "object",
          "properties": {
            "node": {
              "description": "If provided, return information about this specific node, otherwise all nodes are returned.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getaddressesbylabel": [
      {
        "name": "getaddressesbylabel",
        "category": "wallet",
        "description": "Returns the list of addresses assigned the specified label.\n",
        "examples": "> bitcoin-cli getaddressesbylabel \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getaddressesbylabel\", \"params\": [\"tabby\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getaddressesbylabel-arguments.json",
          "type": "object",
          "properties": {
            "label": {
              "description": "The label.",
              "type": "string"
            }
          },
          "required": [
            "label"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getaddressinfo": [
      {
        "name": "getaddressinfo",
        "category": "wallet",
        "description": "Return information about the given bitcoin address.\nSome of the information will only be present if the address is in the active wallet.\n",
        "examples": "> bitcoin-cli getaddressinfo \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getaddressinfo\", \"params\": [\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getaddressinfo-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "The bitcoin address for which to get information.",
              "type": "string"
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getaddrmaninfo": [
      {
        "name": "getaddrmaninfo",
        "category": "network",
        "description": "Provides information about the node's address manager by returning the number of addresses in the `new` and `tried` tables and their sum for all networks.\n",
        "examples": "> bitcoin-cli getaddrmaninfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getaddrmaninfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getaddrmaninfo-arguments.json",
          "type": "object"
        }
      }
    ],
    "getbalance": [
      {
        "name": "getbalance",
        "category": "wallet",
        "description": "Returns the total available balance.\nThe available balance is what the wallet considers currently spendable, and is\nthus affected by options which limit spendability such as -spendzeroconfchange.\n",
        "examples": "\nThe total amount in the wallet with 0 or more confirmations\n> bitcoin-cli getbalance \n\nThe total amount in the wallet with at least 6 confirmations\n> bitcoin-cli getbalance \"*\" 6\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getbalance-arguments.json",
          "type": "object",
          "properties": {
            "dummy": {
              "description": "Remains for backward compatibility. Must be excluded or set to \"*\".",
              "type": "string"
            },
            "minconf": {
              "description": "Only include transactions confirmed at least this many times.",
              "type": "number"
            },
            "include_watchonly": {
              "description": "Also include balance in watch-only addresses (see 'importaddress')",
              "type": "boolean"
            },
            "avoid_reuse": {
              "description": "(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getbalances": [
      {
        "name": "getbalances",
        "category": "wallet",
        "description": "Returns an object with all balances in BTC.\n",
        "examples": "> bitcoin-cli getbalances \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getbalances\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getbalances-arguments.json",
          "type": "object"
        }
      }
    ],
    "getbestblockhash": [
      {
        "name": "getbestblockhash",
        "category": "blockchain",
        "description": "Returns the hash of the best (tip) block in the most-work fully-validated chain.\n",
        "examples": "> bitcoin-cli getbestblockhash \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getbestblockhash\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getbestblockhash-arguments.json",
          "type": "object"
        }
      }
    ],
    "getblock": [
      {
        "name": "getblock",
        "category": "blockchain",
        "description": "If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\nIf verbosity is 1, returns an Object with information about block <hash>.\nIf verbosity is 2, returns an Object with information about block <hash> and information about each transaction.\nIf verbosity is 3, returns an Object with information about block <hash> and information about each transaction, including prevout information for inputs (only for unpruned blocks in the current best chain).\n",
        "examples": "> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getblock-arguments.json",
          "type": "object",
          "properties": {
            "blockhash": {
              "description": "The block hash",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "verbosity": {
              "description": "0 for hex-encoded data, 1 for a JSON object, 2 for JSON object with transaction data, and 3 for JSON object with transaction data including prevout information for inputs",
              "type": "number"
            },
            "verbose": {
              "description": "0 for hex-encoded data, 1 for a JSON object, 2 for JSON object with transaction data, and 3 for JSON object with transaction data including prevout information for inputs",
              "type": "number"
            }
          },
          "required": [
            "blockhash"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getblockchaininfo": [
      {
        "name": "getblockchaininfo",
        "category": "blockchain",
        "description": "Returns an object containing various state info regarding blockchain processing.\n",
        "examples": "> bitcoin-cli getblockchaininfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockchaininfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getblockchaininfo-arguments.json",
          "type": "object"
        }
      }
    ],
    "getblockcount": [
      {
        "name": "getblockcount",
        "category": "blockchain",
        "description": "Returns the height of the most-work fully-validated chain.\nThe genesis block has height 0.\n",
        "examples": "> bitcoin-cli getblockcount \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockcount\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getblockcount-arguments.json",
          "type": "object"
        }
      }
    ],
    "getblockfilter": [
      {
        "name": "getblockfilter",
        "category": "blockchain",
        "description": "Retrieve a BIP 157 content filter for a particular block.\n",
        "examples": "> bitcoin-cli getblockfilter \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\" \"basic\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockfilter\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\", \"basic\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getblockfilter-arguments.json",
          "type": "object",
          "properties": {
            "blockhash": {
              "description": "The hash of the block",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "filtertype": {
              "description": "The type name of the filter",
              "type": "string"
            }
          },
          "required": [
            "blockhash"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getblockfrompeer": [
      {
        "name": "getblockfrompeer",
        "category": "blockchain",
        "description": "Attempt to fetch block from a given peer.\n\nWe must have the header for this block, e.g. using submitheader.\nThe block will not have any undo data which can limit the usage of the block data in a context where the undo data is needed.\nSubsequent calls for the same block may cause the response from the previous peer to be ignored.\nPeers generally ignore requests for a stale block that they never fully verified, or one that is more than a month old.\nWhen a peer does not respond with a block, we will disconnect.\nNote: The block could be re-pruned as soon as it is received.\n\nReturns an empty JSON object if the request was successfully scheduled.",
        "examples": "> bitcoin-cli getblockfrompeer \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\" 0\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockfrompeer\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\" 0]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getblockfrompeer-arguments.json",
          "type": "object",
          "properties": {
            "blockhash": {
              "description": "The block hash to try to fetch",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "peer_id": {
              "description": "The peer to fetch it from (see getpeerinfo for peer IDs)",
              "type": "number"
            }
          },
          "required": [
            "blockhash",
            "peer_id"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getblockhash": [
      {
        "name": "getblockhash",
        "category": "blockchain",
        "description": "Returns hash of block in best-block-chain at height provided.\n",
        "examples": "> bitcoin-cli getblockhash 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockhash\", \"params\": [1000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getblockhash-arguments.json",
          "type": "object",
          "properties": {
            "height": {
              "description": "The height index",
              "type": "number"
            }
          },
          "required": [
            "height"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getblockheader": [
      {
        "name": "getblockheader",
        "category": "blockchain",
        "description": "If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.\n",
        "examples": "> bitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getblockheader-arguments.json",
          "type": "object",
          "properties": {
            "blockhash": {
              "description": "The block hash",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "verbose": {
              "description": "true for a json object, false for the hex-encoded data",
              "type": "boolean"
            }
          },
          "required": [
            "blockhash"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getblockstats": [
      {
        "name": "getblockstats",
        "category": "blockchain",
        "description": "Compute per block statistics for a given window. All amounts are in satoshis.\nIt won't work for some heights with pruning.\n",
        "examples": "> bitcoin-cli getblockstats '\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"' '[\"minfeerate\",\"avgfeerate\"]'\n> bitcoin-cli getblockstats 1000 '[\"minfeerate\",\"avgfeerate\"]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockstats\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\", [\"minfeerate\",\"avgfeerate\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblockstats\", \"params\": [1000, [\"minfeerate\",\"avgfeerate\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getblockstats-arguments.json",
          "type": "object",
          "properties": {
            "hash_or_height": {
              "description": "The block hash or height of the target block",
              "type": "number"
            },
            "stats": {
              "description": "Values to plot (see result below)",
              "type": "array",
              "items": [
                {
                  "description": "Selected statistic",
                  "type": "string"
                },
                {
                  "description": "Selected statistic",
                  "type": "string"
                }
              ]
            }
          },
          "required": [
            "hash_or_height"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getblocktemplate": [
      {
        "name": "getblocktemplate",
        "category": "mining",
        "description": "If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\nIt returns data needed to construct a block to work on.\nFor full specification, see BIPs 22, 23, 9, and 145:\n    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\n    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\n    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\n    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\n",
        "examples": "> bitcoin-cli getblocktemplate '{\"rules\": [\"segwit\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getblocktemplate\", \"params\": [{\"rules\": [\"segwit\"]}]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getblocktemplate-arguments.json",
          "type": "object",
          "properties": {
            "template_request": {
              "description": "Format of the template",
              "type": "object",
              "properties": {
                "mode": {
                  "description": "This must be set to \"template\", \"proposal\" (see BIP 23), or omitted",
                  "type": "string"
                },
                "capabilities": {
                  "description": "A list of strings",
                  "type": "array",
                  "items": [
                    {
                      "description": "client side supported feature, 'longpoll', 'coinbasevalue', 'proposal', 'serverlist', 'workid'",
                      "type": "string"
                    }
                  ]
                },
                "rules": {
                  "description": "A list of strings",
                  "type": "array",
                  "items": [
                    {
                      "description": "(literal) indicates client side segwit support",
                      "type": "string"
                    },
                    {
                      "description": "other client side supported softfork deployment",
                      "type": "string"
                    }
                  ]
                },
                "longpollid": {
                  "description": "delay processing request until the result would vary significantly from the \"longpollid\" of a prior template",
                  "type": "string"
                },
                "data": {
                  "description": "proposed block data to check, encoded in hexadecimal; valid only for mode=\"proposal\"",
                  "type": "string",
                  "pattern": "^([0-9][a-f]{2})+$"
                }
              },
              "additionalProperties": false,
              "required": [
                "rules"
              ]
            }
          },
          "required": [
            "template_request"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getchainstates": [
      {
        "name": "getchainstates",
        "category": "blockchain",
        "description": "Return information about chainstates.\n",
        "examples": "> bitcoin-cli getchainstates \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getchainstates\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getchainstates-arguments.json",
          "type": "object"
        }
      }
    ],
    "getchaintips": [
      {
        "name": "getchaintips",
        "category": "blockchain",
        "description": "Return information about all known tips in the block tree, including the main chain as well as orphaned branches.\n",
        "examples": "> bitcoin-cli getchaintips \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getchaintips\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getchaintips-arguments.json",
          "type": "object"
        }
      }
    ],
    "getchaintxstats": [
      {
        "name": "getchaintxstats",
        "category": "blockchain",
        "description": "Compute statistics about the total number and rate of transactions in the chain.\n",
        "examples": "> bitcoin-cli getchaintxstats \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getchaintxstats-arguments.json",
          "type": "object",
          "properties": {
            "nblocks": {
              "description": "Size of the window in number of blocks",
              "type": "number"
            },
            "blockhash": {
              "description": "The hash of the block that ends the window.",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getconnectioncount": [
      {
        "name": "getconnectioncount",
        "category": "network",
        "description": "Returns the number of connections to other nodes.\n",
        "examples": "> bitcoin-cli getconnectioncount \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getconnectioncount\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getconnectioncount-arguments.json",
          "type": "object"
        }
      }
    ],
    "getdeploymentinfo": [
      {
        "name": "getdeploymentinfo",
        "category": "blockchain",
        "description": "Returns an object containing various state info regarding deployments of consensus changes.",
        "examples": "> bitcoin-cli getdeploymentinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getdeploymentinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getdeploymentinfo-arguments.json",
          "type": "object",
          "properties": {
            "blockhash": {
              "description": "The block hash at which to query deployment state",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getdescriptoractivity": [
      {
        "name": "getdescriptoractivity",
        "category": "blockchain",
        "description": "Get spend and receive activity associated with a set of descriptors for a set of blocks. This command pairs well with the `relevant_blocks` output of `scanblocks()`.\nThis call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)",
        "examples": "> bitcoin-cli getdescriptoractivity '[\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\"]' '[\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\"]'\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getdescriptoractivity-arguments.json",
          "type": "object",
          "properties": {
            "blockhashes": {
              "description": "The list of blockhashes to examine for activity. Order doesn't matter. Must be along main chain or an error is thrown.\n",
              "type": "array",
              "items": [
                {
                  "description": "A valid blockhash",
                  "type": "string",
                  "pattern": "^([0-9][a-f]{2})+$"
                }
              ]
            },
            "scanobjects": {
              "description": "Array of scan objects. Required for \"start\" action\nEvery scan object is either a string descriptor or an object:",
              "type": "array",
              "items": [
                {
                  "description": "An output descriptor",
                  "type": "string"
                },
                {
                  "description": "An object with output descriptor and metadata",
                  "type": "object",
                  "properties": {
                    "desc": {
                      "description": "An output descriptor",
                      "type": "string"
                    },
                    "range": {
                      "description": "The range of HD chain indexes to explore (either end or [begin,end])",
                      "type": [
                        "number",
                        "array"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "desc"
                  ]
                }
              ]
            },
            "include_mempool": {
              "description": "Whether to include unconfirmed activity",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getdescriptorinfo": [
      {
        "name": "getdescriptorinfo",
        "category": "util",
        "description": "Analyses a descriptor.\n",
        "examples": "Analyse a descriptor\n> bitcoin-cli getdescriptorinfo \"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getdescriptorinfo\", \"params\": [\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getdescriptorinfo-arguments.json",
          "type": "object",
          "properties": {
            "descriptor": {
              "description": "The descriptor.",
              "type": "string"
            }
          },
          "required": [
            "descriptor"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getdifficulty": [
      {
        "name": "getdifficulty",
        "category": "blockchain",
        "description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.\n",
        "examples": "> bitcoin-cli getdifficulty \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getdifficulty\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getdifficulty-arguments.json",
          "type": "object"
        }
      }
    ],
    "gethdkeys": [
      {
        "name": "gethdkeys",
        "category": "wallet",
        "description": "List all BIP 32 HD keys in the wallet and which descriptors use them.\n",
        "examples": "> bitcoin-cli gethdkeys \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gethdkeys\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli -named gethdkeys active_only=true private=true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gethdkeys\", \"params\": {\"active_only\":\"true\",\"private\":\"true\"}}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/gethdkeys-arguments.json",
          "type": "object",
          "properties": {
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "active_only": {
                  "description": "Show the keys for only active descriptors",
                  "type": "boolean"
                },
                "private": {
                  "description": "Show private keys",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getindexinfo": [
      {
        "name": "getindexinfo",
        "category": "util",
        "description": "Returns the status of one or all available indices currently running in the node.\n",
        "examples": "> bitcoin-cli getindexinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getindexinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli getindexinfo txindex\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getindexinfo\", \"params\": [txindex]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getindexinfo-arguments.json",
          "type": "object",
          "properties": {
            "index_name": {
              "description": "Filter results for an index with a specific name.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getmemoryinfo": [
      {
        "name": "getmemoryinfo",
        "category": "control",
        "description": "Returns an object containing information about memory usage.\n",
        "examples": "> bitcoin-cli getmemoryinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmemoryinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getmemoryinfo-arguments.json",
          "type": "object",
          "properties": {
            "mode": {
              "description": "determines what kind of information is returned.\n  - \"stats\" returns general statistics about memory usage in the daemon.\n  - \"mallocinfo\" returns an XML string describing low-level heap state (only available if compiled with glibc).",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getmempoolancestors": [
      {
        "name": "getmempoolancestors",
        "category": "blockchain",
        "description": "If txid is in the mempool, returns all in-mempool ancestors.\n",
        "examples": "> bitcoin-cli getmempoolancestors \"mytxid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getmempoolancestors-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The transaction id (must be in mempool)",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "verbose": {
              "description": "True for a json object, false for array of transaction ids",
              "type": "boolean"
            }
          },
          "required": [
            "txid"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getmempooldescendants": [
      {
        "name": "getmempooldescendants",
        "category": "blockchain",
        "description": "If txid is in the mempool, returns all in-mempool descendants.\n",
        "examples": "> bitcoin-cli getmempooldescendants \"mytxid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getmempooldescendants-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The transaction id (must be in mempool)",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "verbose": {
              "description": "True for a json object, false for array of transaction ids",
              "type": "boolean"
            }
          },
          "required": [
            "txid"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getmempoolentry": [
      {
        "name": "getmempoolentry",
        "category": "blockchain",
        "description": "Returns mempool data for given transaction\n",
        "examples": "> bitcoin-cli getmempoolentry \"mytxid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getmempoolentry-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The transaction id (must be in mempool)",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "txid"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getmempoolinfo": [
      {
        "name": "getmempoolinfo",
        "category": "blockchain",
        "description": "Returns details on the active state of the TX memory pool.",
        "examples": "> bitcoin-cli getmempoolinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getmempoolinfo-arguments.json",
          "type": "object"
        }
      }
    ],
    "getmininginfo": [
      {
        "name": "getmininginfo",
        "category": "mining",
        "description": "Returns a json object containing mining-related information.",
        "examples": "> bitcoin-cli getmininginfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getmininginfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getmininginfo-arguments.json",
          "type": "object"
        }
      }
    ],
    "getnettotals": [
      {
        "name": "getnettotals",
        "category": "network",
        "description": "Returns information about network traffic, including bytes in, bytes out,\nand current system time.",
        "examples": "> bitcoin-cli getnettotals \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnettotals\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getnettotals-arguments.json",
          "type": "object"
        }
      }
    ],
    "getnetworkhashps": [
      {
        "name": "getnetworkhashps",
        "category": "mining",
        "description": "Returns the estimated network hashes per second based on the last n blocks.\nPass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\nPass in [height] to estimate the network speed at the time when a certain block was found.\n",
        "examples": "> bitcoin-cli getnetworkhashps \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnetworkhashps\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getnetworkhashps-arguments.json",
          "type": "object",
          "properties": {
            "nblocks": {
              "description": "The number of previous blocks to calculate estimate from, or -1 for blocks since last difficulty change.",
              "type": "number"
            },
            "height": {
              "description": "To estimate at the time of the given height.",
              "type": "number"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getnetworkinfo": [
      {
        "name": "getnetworkinfo",
        "category": "network",
        "description": "Returns an object containing various state info regarding P2P networking.\n",
        "examples": "> bitcoin-cli getnetworkinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnetworkinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getnetworkinfo-arguments.json",
          "type": "object"
        }
      }
    ],
    "getnewaddress": [
      {
        "name": "getnewaddress",
        "category": "wallet",
        "description": "Returns a new Bitcoin address for receiving payments.\nIf 'label' is specified, it is added to the address book \nso payments received with the address will be associated with 'label'.\n",
        "examples": "> bitcoin-cli getnewaddress \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnewaddress\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getnewaddress-arguments.json",
          "type": "object",
          "properties": {
            "label": {
              "description": "The label name for the address to be linked to. It can also be set to the empty string \"\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.",
              "type": "string"
            },
            "address_type": {
              "description": "The address type to use. Options are \"legacy\", \"p2sh-segwit\", \"bech32\", and \"bech32m\".",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getnodeaddresses": [
      {
        "name": "getnodeaddresses",
        "category": "network",
        "description": "Return known addresses, after filtering for quality and recency.\nThese can potentially be used to find new peers in the network.\nThe total number of addresses known to the node may be higher.",
        "examples": "> bitcoin-cli getnodeaddresses 8\n> bitcoin-cli getnodeaddresses 4 \"i2p\"\n> bitcoin-cli -named getnodeaddresses network=onion count=12\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnodeaddresses\", \"params\": [8]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getnodeaddresses\", \"params\": [4, \"i2p\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getnodeaddresses-arguments.json",
          "type": "object",
          "properties": {
            "count": {
              "description": "The maximum number of addresses to return. Specify 0 to return all known addresses.",
              "type": "number"
            },
            "network": {
              "description": "Return only addresses of the specified network. Can be one of: ipv4, ipv6, onion, i2p, cjdns.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getorphantxs": [
      {
        "name": "getorphantxs",
        "category": "hidden",
        "description": "Shows transactions in the tx orphanage.\n\nEXPERIMENTAL warning: this call may be changed in future releases.\n",
        "examples": "> bitcoin-cli getorphantxs 2\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getorphantxs\", \"params\": [2]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getorphantxs-arguments.json",
          "type": "object",
          "properties": {
            "verbosity": {
              "description": "0 for an array of txids (may contain duplicates), 1 for an array of objects with tx details, and 2 for details from (1) and tx hex",
              "type": "number"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getpeerinfo": [
      {
        "name": "getpeerinfo",
        "category": "network",
        "description": "Returns data about each connected network peer as a json array of objects.",
        "examples": "> bitcoin-cli getpeerinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getpeerinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getpeerinfo-arguments.json",
          "type": "object"
        }
      }
    ],
    "getprioritisedtransactions": [
      {
        "name": "getprioritisedtransactions",
        "category": "mining",
        "description": "Returns a map of all user-created (see prioritisetransaction) fee deltas by txid, and whether the tx is present in mempool.",
        "examples": "> bitcoin-cli getprioritisedtransactions \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getprioritisedtransactions\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getprioritisedtransactions-arguments.json",
          "type": "object"
        }
      }
    ],
    "getrawaddrman": [
      {
        "name": "getrawaddrman",
        "category": "hidden",
        "description": "EXPERIMENTAL warning: this call may be changed in future releases.\n\nReturns information on all address manager entries for the new and tried tables.\n",
        "examples": "> bitcoin-cli getrawaddrman \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getrawaddrman\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getrawaddrman-arguments.json",
          "type": "object"
        }
      }
    ],
    "getrawchangeaddress": [
      {
        "name": "getrawchangeaddress",
        "category": "wallet",
        "description": "Returns a new Bitcoin address, for receiving change.\nThis is for use with raw transactions, NOT normal use.\n",
        "examples": "> bitcoin-cli getrawchangeaddress \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getrawchangeaddress\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getrawchangeaddress-arguments.json",
          "type": "object",
          "properties": {
            "address_type": {
              "description": "The address type to use. Options are \"legacy\", \"p2sh-segwit\", \"bech32\", and \"bech32m\".",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getrawmempool": [
      {
        "name": "getrawmempool",
        "category": "blockchain",
        "description": "Returns all transaction ids in memory pool as a json array of string transaction ids.\n\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\n",
        "examples": "> bitcoin-cli getrawmempool true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getrawmempool\", \"params\": [true]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getrawmempool-arguments.json",
          "type": "object",
          "properties": {
            "verbose": {
              "description": "True for a json object, false for array of transaction ids",
              "type": "boolean"
            },
            "mempool_sequence": {
              "description": "If verbose=false, returns a json object with transaction list and mempool sequence number attached.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "getrawtransaction": [
      {
        "name": "getrawtransaction",
        "category": "rawtransactions",
        "description": "By default, this call only returns a transaction if it is in the mempool. If -txindex is enabled\nand no blockhash argument is passed, it will return the transaction if it is in the mempool or any block.\nIf a blockhash argument is passed, it will return the transaction if\nthe specified block is available and the transaction is in that block.\n\nHint: Use gettransaction for wallet transactions.\n\nIf verbosity is 0 or omitted, returns the serialized transaction as a hex-encoded string.\nIf verbosity is 1, returns a JSON Object with information about the transaction.\nIf verbosity is 2, returns a JSON Object with information about the transaction, including fee and prevout information.",
        "examples": "> bitcoin-cli getrawtransaction \"mytxid\"\n> bitcoin-cli getrawtransaction \"mytxid\" 1\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli getrawtransaction \"mytxid\" 0 \"myblockhash\"\n> bitcoin-cli getrawtransaction \"mytxid\" 1 \"myblockhash\"\n> bitcoin-cli getrawtransaction \"mytxid\" 2 \"myblockhash\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getrawtransaction-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The transaction id",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "verbosity": {
              "description": "0 for hex-encoded data, 1 for a JSON object, and 2 for JSON object with fee and prevout",
              "type": "number"
            },
            "verbose": {
              "description": "0 for hex-encoded data, 1 for a JSON object, and 2 for JSON object with fee and prevout",
              "type": "number"
            },
            "blockhash": {
              "description": "The block in which to look for the transaction",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "txid"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getreceivedbyaddress": [
      {
        "name": "getreceivedbyaddress",
        "category": "wallet",
        "description": "Returns the total amount received by the given address in transactions with at least minconf confirmations.\n",
        "examples": "\nThe amount from transactions with at least 1 confirmation\n> bitcoin-cli getreceivedbyaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"\n\nThe amount including unconfirmed transactions, zero confirmations\n> bitcoin-cli getreceivedbyaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 0\n\nThe amount with at least 6 confirmations\n> bitcoin-cli getreceivedbyaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 6\n\nThe amount with at least 6 confirmations including immature coinbase outputs\n> bitcoin-cli getreceivedbyaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 6 true\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\", 6]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getreceivedbyaddress-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "The bitcoin address for transactions.",
              "type": "string"
            },
            "minconf": {
              "description": "Only include transactions confirmed at least this many times.",
              "type": "number"
            },
            "include_immature_coinbase": {
              "description": "Include immature coinbase transactions.",
              "type": "boolean"
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getreceivedbylabel": [
      {
        "name": "getreceivedbylabel",
        "category": "wallet",
        "description": "Returns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\n",
        "examples": "\nAmount received by the default label with at least 1 confirmation\n> bitcoin-cli getreceivedbylabel \"\"\n\nAmount received at the tabby label including unconfirmed amounts with zero confirmations\n> bitcoin-cli getreceivedbylabel \"tabby\" 0\n\nThe amount with at least 6 confirmations\n> bitcoin-cli getreceivedbylabel \"tabby\" 6\n\nThe amount with at least 6 confirmations including immature coinbase outputs\n> bitcoin-cli getreceivedbylabel \"tabby\" 6 true\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getreceivedbylabel\", \"params\": [\"tabby\", 6, true]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getreceivedbylabel-arguments.json",
          "type": "object",
          "properties": {
            "label": {
              "description": "The selected label, may be the default label using \"\".",
              "type": "string"
            },
            "minconf": {
              "description": "Only include transactions confirmed at least this many times.",
              "type": "number"
            },
            "include_immature_coinbase": {
              "description": "Include immature coinbase transactions.",
              "type": "boolean"
            }
          },
          "required": [
            "label"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getrpcinfo": [
      {
        "name": "getrpcinfo",
        "category": "control",
        "description": "Returns details of the RPC server.\n",
        "examples": "> bitcoin-cli getrpcinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getrpcinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getrpcinfo-arguments.json",
          "type": "object"
        }
      }
    ],
    "gettransaction": [
      {
        "name": "gettransaction",
        "category": "wallet",
        "description": "Get detailed information about in-wallet transaction <txid>\n",
        "examples": "> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true\n> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" false true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/gettransaction-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The transaction id",
              "type": "string"
            },
            "include_watchonly": {
              "description": "Whether to include watch-only addresses in balance calculation and details[]",
              "type": "boolean"
            },
            "verbose": {
              "description": "Whether to include a `decoded` field containing the decoded transaction (equivalent to RPC decoderawtransaction)",
              "type": "boolean"
            }
          },
          "required": [
            "txid"
          ],
          "additionalProperties": false
        }
      }
    ],
    "gettxout": [
      {
        "name": "gettxout",
        "category": "blockchain",
        "description": "Returns details about an unspent transaction output.\n",
        "examples": "\nGet unspent transactions\n> bitcoin-cli listunspent \n\nView the details\n> bitcoin-cli gettxout \"txid\" 1\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/gettxout-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The transaction id",
              "type": "string"
            },
            "n": {
              "description": "vout number",
              "type": "number"
            },
            "include_mempool": {
              "description": "Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.",
              "type": "boolean"
            }
          },
          "required": [
            "txid",
            "n"
          ],
          "additionalProperties": false
        }
      }
    ],
    "gettxoutproof": [
      {
        "name": "gettxoutproof",
        "category": "blockchain",
        "description": "Returns a hex-encoded proof that \"txid\" was included in a block.\n\nNOTE: By default this function only works sometimes. This is when there is an\nunspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option or\nspecify the block in which the transaction is included manually (by blockhash).\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/gettxoutproof-arguments.json",
          "type": "object",
          "properties": {
            "txids": {
              "description": "The txids to filter",
              "type": "array",
              "items": [
                {
                  "description": "A transaction hash",
                  "type": "string",
                  "pattern": "^([0-9][a-f]{2})+$"
                }
              ]
            },
            "blockhash": {
              "description": "If specified, looks for txid in the block with this hash",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "txids"
          ],
          "additionalProperties": false
        }
      }
    ],
    "gettxoutsetinfo": [
      {
        "name": "gettxoutsetinfo",
        "category": "blockchain",
        "description": "Returns statistics about the unspent transaction output set.\nNote this call may take some time if you are not using coinstatsindex.\n",
        "examples": "> bitcoin-cli gettxoutsetinfo \n> bitcoin-cli gettxoutsetinfo \"none\"\n> bitcoin-cli gettxoutsetinfo \"none\" 1000\n> bitcoin-cli gettxoutsetinfo \"none\" '\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"'\n> bitcoin-cli -named gettxoutsetinfo hash_type='muhash' use_index='false'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [\"none\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [\"none\", 1000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [\"none\", \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/gettxoutsetinfo-arguments.json",
          "type": "object",
          "properties": {
            "hash_type": {
              "description": "Which UTXO set hash should be calculated. Options: 'hash_serialized_3' (the legacy algorithm), 'muhash', 'none'.",
              "type": "string"
            },
            "hash_or_height": {
              "description": "The block hash or height of the target height (only available with coinstatsindex).",
              "type": "number"
            },
            "use_index": {
              "description": "Use coinstatsindex, if available.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "gettxspendingprevout": [
      {
        "name": "gettxspendingprevout",
        "category": "blockchain",
        "description": "Scans the mempool to find transactions spending any of the given outputs",
        "examples": "> bitcoin-cli gettxspendingprevout \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":3}]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"gettxspendingprevout\", \"params\": [\"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":3}]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/gettxspendingprevout-arguments.json",
          "type": "object",
          "properties": {
            "outputs": {
              "description": "The transaction outputs that we want to check, and within each, the txid (string) vout (numeric).",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "txid": {
                      "description": "The transaction id",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "vout": {
                      "description": "The output number",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "txid",
                    "vout"
                  ]
                }
              ]
            }
          },
          "required": [
            "outputs"
          ],
          "additionalProperties": false
        }
      }
    ],
    "getunconfirmedbalance": [
      {
        "name": "getunconfirmedbalance",
        "category": "wallet",
        "description": "DEPRECATED\nIdentical to getbalances().mine.untrusted_pending\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getunconfirmedbalance-arguments.json",
          "type": "object"
        }
      }
    ],
    "getwalletinfo": [
      {
        "name": "getwalletinfo",
        "category": "wallet",
        "description": "Returns an object containing various wallet state info.\n",
        "examples": "> bitcoin-cli getwalletinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getwalletinfo\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/getwalletinfo-arguments.json",
          "type": "object"
        }
      }
    ],
    "help": [
      {
        "name": "help",
        "category": "control",
        "description": "List all commands, or get help for a specified command.\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/help-arguments.json",
          "type": "object",
          "properties": {
            "command": {
              "description": "The command to get help on",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "importdescriptors": [
      {
        "name": "importdescriptors",
        "category": "wallet",
        "description": "Import descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\nWhen importing descriptors with multipath key expressions, if the multipath specifier contains exactly two elements, the descriptor produced from the second element will be imported as an internal descriptor.\n\nNote: This call can take over an hour to complete if using an early timestamp; during that time, other rpc calls\nmay report that the imported keys, addresses or scripts exist but related transactions are still missing.\nThe rescan is significantly faster if block filters are available (using startup option \"-blockfilterindex=1\").\n",
        "examples": "> bitcoin-cli importdescriptors '[{ \"desc\": \"<my descriptor>\", \"timestamp\":1455191478, \"internal\": true }, { \"desc\": \"<my descriptor 2>\", \"label\": \"example 2\", \"timestamp\": 1455191480 }]'\n> bitcoin-cli importdescriptors '[{ \"desc\": \"<my descriptor>\", \"timestamp\":1455191478, \"active\": true, \"range\": [0,100], \"label\": \"<my bech32 wallet>\" }]'\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/importdescriptors-arguments.json",
          "type": "object",
          "properties": {
            "requests": {
              "description": "Data to be imported",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "desc": {
                      "description": "Descriptor to import.",
                      "type": "string"
                    },
                    "active": {
                      "description": "Set this descriptor to be the active descriptor for the corresponding output type/externality",
                      "type": "boolean"
                    },
                    "range": {
                      "description": "If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import",
                      "type": [
                        "number",
                        "array"
                      ]
                    },
                    "next_index": {
                      "description": "If a ranged descriptor is set to active, this specifies the next index to generate addresses from",
                      "type": "number"
                    },
                    "timestamp": {
                      "description": "Time from which to start rescanning the blockchain for this descriptor, in UNIX epoch time\nUse the string \"now\" to substitute the current synced blockchain time.\n\"now\" can be specified to bypass scanning, for outputs which are known to never have been used, and\n0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest timestamp\nof all descriptors being imported will be scanned as well as the mempool.",
                      "type": "number"
                    },
                    "internal": {
                      "description": "Whether matching outputs should be treated as not incoming payments (e.g. change)",
                      "type": "boolean"
                    },
                    "label": {
                      "description": "Label to assign to the address, only allowed with internal=false. Disabled for ranged descriptors",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "desc",
                    "timestamp"
                  ]
                }
              ]
            }
          },
          "required": [
            "requests"
          ],
          "additionalProperties": false
        }
      }
    ],
    "importmempool": [
      {
        "name": "importmempool",
        "category": "blockchain",
        "description": "Import a mempool.dat file and attempt to add its contents to the mempool.\nWarning: Importing untrusted files is dangerous, especially if metadata from the file is taken over.",
        "examples": "> bitcoin-cli importmempool /path/to/mempool.dat\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"importmempool\", \"params\": [/path/to/mempool.dat]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/importmempool-arguments.json",
          "type": "object",
          "properties": {
            "filepath": {
              "description": "The mempool file",
              "type": "string"
            },
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "use_current_time": {
                  "description": "Whether to use the current system time or use the entry time metadata from the mempool file.\nWarning: Importing untrusted metadata may lead to unexpected issues and undesirable behavior.",
                  "type": "boolean"
                },
                "apply_fee_delta_priority": {
                  "description": "Whether to apply the fee delta metadata from the mempool file.\nIt will be added to any existing fee deltas.\nThe fee delta can be set by the prioritisetransaction RPC.\nWarning: Importing untrusted metadata may lead to unexpected issues and undesirable behavior.\nOnly set this bool if you understand what it does.",
                  "type": "boolean"
                },
                "apply_unbroadcast_set": {
                  "description": "Whether to apply the unbroadcast set metadata from the mempool file.\nWarning: Importing untrusted metadata may lead to unexpected issues and undesirable behavior.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          },
          "required": [
            "filepath"
          ],
          "additionalProperties": false
        }
      }
    ],
    "importprunedfunds": [
      {
        "name": "importprunedfunds",
        "category": "wallet",
        "description": "Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/importprunedfunds-arguments.json",
          "type": "object",
          "properties": {
            "rawtransaction": {
              "description": "A raw transaction in hex funding an already-existing address in wallet",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "txoutproof": {
              "description": "The hex output from gettxoutproof that contains the transaction",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "rawtransaction",
            "txoutproof"
          ],
          "additionalProperties": false
        }
      }
    ],
    "invalidateblock": [
      {
        "name": "invalidateblock",
        "category": "hidden",
        "description": "Permanently marks a block as invalid, as if it violated a consensus rule.\n",
        "examples": "> bitcoin-cli invalidateblock \"blockhash\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"invalidateblock\", \"params\": [\"blockhash\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/invalidateblock-arguments.json",
          "type": "object",
          "properties": {
            "blockhash": {
              "description": "the hash of the block to mark as invalid",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "blockhash"
          ],
          "additionalProperties": false
        }
      }
    ],
    "joinpsbts": [
      {
        "name": "joinpsbts",
        "category": "rawtransactions",
        "description": "Joins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\nNo input in any of the PSBTs can be in more than one of the PSBTs.\n",
        "examples": "> bitcoin-cli joinpsbts \"psbt\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/joinpsbts-arguments.json",
          "type": "object",
          "properties": {
            "txs": {
              "description": "The base64 strings of partially signed transactions",
              "type": "array",
              "items": [
                {
                  "description": "A base64 string of a PSBT",
                  "type": "string"
                }
              ]
            }
          },
          "required": [
            "txs"
          ],
          "additionalProperties": false
        }
      }
    ],
    "keypoolrefill": [
      {
        "name": "keypoolrefill",
        "category": "wallet",
        "description": "Refills each descriptor keypool in the wallet up to the specified number of new keys.\nBy default, descriptor wallets have 4 active ranged descriptors (\"legacy\", \"p2sh-segwit\", \"bech32\", and \"bech32m\"), each with 1000 entries.\n\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "> bitcoin-cli keypoolrefill \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"keypoolrefill\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/keypoolrefill-arguments.json",
          "type": "object",
          "properties": {
            "newsize": {
              "description": "The new keypool size",
              "type": "number"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "listaddressgroupings": [
      {
        "name": "listaddressgroupings",
        "category": "wallet",
        "description": "Lists groups of addresses which have had their common ownership\nmade public by common use as inputs or as the resulting change\nin past transactions\n",
        "examples": "> bitcoin-cli listaddressgroupings \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listaddressgroupings\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listaddressgroupings-arguments.json",
          "type": "object"
        }
      }
    ],
    "listbanned": [
      {
        "name": "listbanned",
        "category": "network",
        "description": "List all manually banned IPs/Subnets.\n",
        "examples": "> bitcoin-cli listbanned \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listbanned\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listbanned-arguments.json",
          "type": "object"
        }
      }
    ],
    "listdescriptors": [
      {
        "name": "listdescriptors",
        "category": "wallet",
        "description": "List all descriptors present in a wallet.\n",
        "examples": "> bitcoin-cli listdescriptors \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listdescriptors\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli listdescriptors true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listdescriptors\", \"params\": [true]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listdescriptors-arguments.json",
          "type": "object",
          "properties": {
            "private": {
              "description": "Show private descriptors.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "listlabels": [
      {
        "name": "listlabels",
        "category": "wallet",
        "description": "Returns the list of all labels, or labels that are assigned to addresses with a specific purpose.\n",
        "examples": "\nList all labels\n> bitcoin-cli listlabels \n\nList labels that have receiving addresses\n> bitcoin-cli listlabels receive\n\nList labels that have sending addresses\n> bitcoin-cli listlabels send\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listlabels\", \"params\": [receive]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listlabels-arguments.json",
          "type": "object",
          "properties": {
            "purpose": {
              "description": "Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "listlockunspent": [
      {
        "name": "listlockunspent",
        "category": "wallet",
        "description": "Returns list of temporarily unspendable outputs.\nSee the lockunspent call to lock and unlock transactions for spending.\n",
        "examples": "\nList the unspent transactions\n> bitcoin-cli listunspent \n\nLock an unspent transaction\n> bitcoin-cli lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nList the locked transactions\n> bitcoin-cli listlockunspent \n\nUnlock the transaction again\n> bitcoin-cli lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listlockunspent\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listlockunspent-arguments.json",
          "type": "object"
        }
      }
    ],
    "listreceivedbyaddress": [
      {
        "name": "listreceivedbyaddress",
        "category": "wallet",
        "description": "List balances by receiving address.\n",
        "examples": "> bitcoin-cli listreceivedbyaddress \n> bitcoin-cli listreceivedbyaddress 6 true\n> bitcoin-cli listreceivedbyaddress 6 true true \"\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true, \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\", true]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listreceivedbyaddress-arguments.json",
          "type": "object",
          "properties": {
            "minconf": {
              "description": "The minimum number of confirmations before payments are included.",
              "type": "number"
            },
            "include_empty": {
              "description": "Whether to include addresses that haven't received any payments.",
              "type": "boolean"
            },
            "include_watchonly": {
              "description": "Whether to include watch-only addresses (see 'importaddress')",
              "type": "boolean"
            },
            "address_filter": {
              "description": "If present and non-empty, only return information on this address.",
              "type": "string"
            },
            "include_immature_coinbase": {
              "description": "Include immature coinbase transactions.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "listreceivedbylabel": [
      {
        "name": "listreceivedbylabel",
        "category": "wallet",
        "description": "List received transactions by label.\n",
        "examples": "> bitcoin-cli listreceivedbylabel \n> bitcoin-cli listreceivedbylabel 6 true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listreceivedbylabel\", \"params\": [6, true, true, true]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listreceivedbylabel-arguments.json",
          "type": "object",
          "properties": {
            "minconf": {
              "description": "The minimum number of confirmations before payments are included.",
              "type": "number"
            },
            "include_empty": {
              "description": "Whether to include labels that haven't received any payments.",
              "type": "boolean"
            },
            "include_watchonly": {
              "description": "Whether to include watch-only addresses (see 'importaddress')",
              "type": "boolean"
            },
            "include_immature_coinbase": {
              "description": "Include immature coinbase transactions.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "listsinceblock": [
      {
        "name": "listsinceblock",
        "category": "wallet",
        "description": "Get all transactions in blocks since block [blockhash], or all transactions if omitted.\nIf \"blockhash\" is no longer a part of the main chain, transactions from the fork point onward are included.\nAdditionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \"removed\" array.\n",
        "examples": "> bitcoin-cli listsinceblock \n> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listsinceblock-arguments.json",
          "type": "object",
          "properties": {
            "blockhash": {
              "description": "If set, the block hash to list transactions since, otherwise list all transactions.",
              "type": "string"
            },
            "target_confirmations": {
              "description": "Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value",
              "type": "number"
            },
            "include_watchonly": {
              "description": "Include transactions to watch-only addresses (see 'importaddress')",
              "type": "boolean"
            },
            "include_removed": {
              "description": "Show transactions that were removed due to a reorg in the \"removed\" array\n(not guaranteed to work on pruned nodes)",
              "type": "boolean"
            },
            "include_change": {
              "description": "Also add entries for change outputs.\n",
              "type": "boolean"
            },
            "label": {
              "description": "Return only incoming transactions paying to addresses with the specified label.\n",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "listtransactions": [
      {
        "name": "listtransactions",
        "category": "wallet",
        "description": "If a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\n\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\n",
        "examples": "\nList the most recent 10 transactions in the systems\n> bitcoin-cli listtransactions \n\nList transactions 100 to 120\n> bitcoin-cli listtransactions \"*\" 20 100\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listtransactions-arguments.json",
          "type": "object",
          "properties": {
            "label": {
              "description": "If set, should be a valid label name to return only incoming transactions\nwith the specified label, or \"*\" to disable filtering and return all transactions.",
              "type": "string"
            },
            "count": {
              "description": "The number of transactions to return",
              "type": "number"
            },
            "skip": {
              "description": "The number of transactions to skip",
              "type": "number"
            },
            "include_watchonly": {
              "description": "Include transactions to watch-only addresses (see 'importaddress')",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "listunspent": [
      {
        "name": "listunspent",
        "category": "wallet",
        "description": "Returns array of unspent transaction outputs\nwith between minconf and maxconf (inclusive) confirmations.\nOptionally filter to only include txouts paid to specified addresses.\n",
        "examples": "> bitcoin-cli listunspent \n> bitcoin-cli listunspent 6 9999999 \"[\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\",\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\",\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\"]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli listunspent 6 9999999 '[]' true '{ \"minimumAmount\": 0.005 }'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999, [] , true, { \"minimumAmount\": 0.005 } ]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listunspent-arguments.json",
          "type": "object",
          "properties": {
            "minconf": {
              "description": "The minimum confirmations to filter",
              "type": "number"
            },
            "maxconf": {
              "description": "The maximum confirmations to filter",
              "type": "number"
            },
            "addresses": {
              "description": "The bitcoin addresses to filter",
              "type": "array",
              "items": [
                {
                  "description": "bitcoin address",
                  "type": "string"
                }
              ]
            },
            "include_unsafe": {
              "description": "Include outputs that are not safe to spend\nSee description of \"safe\" attribute below.",
              "type": "boolean"
            },
            "query_options": {
              "type": "object",
              "format": "named",
              "properties": {
                "minimumAmount": {
                  "description": "Minimum value of each UTXO in BTC",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "maximumAmount": {
                  "description": "Maximum value of each UTXO in BTC",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "maximumCount": {
                  "description": "Maximum number of UTXOs",
                  "type": "number"
                },
                "minimumSumAmount": {
                  "description": "Minimum sum value of all UTXOs in BTC",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "include_immature_coinbase": {
                  "description": "Include immature coinbase UTXOs",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "listwalletdir": [
      {
        "name": "listwalletdir",
        "category": "wallet",
        "description": "Returns a list of wallets in the wallet directory.\n",
        "examples": "> bitcoin-cli listwalletdir \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listwalletdir\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listwalletdir-arguments.json",
          "type": "object"
        }
      }
    ],
    "listwallets": [
      {
        "name": "listwallets",
        "category": "wallet",
        "description": "Returns a list of currently loaded wallets.\nFor full information on the wallet, use \"getwalletinfo\"\n",
        "examples": "> bitcoin-cli listwallets \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"listwallets\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/listwallets-arguments.json",
          "type": "object"
        }
      }
    ],
    "loadtxoutset": [
      {
        "name": "loadtxoutset",
        "category": "blockchain",
        "description": "Load the serialized UTXO set from a file.\nOnce this snapshot is loaded, its contents will be deserialized into a second chainstate data structure, which is then used to sync to the network's tip. Meanwhile, the original chainstate will complete the initial block download process in the background, eventually validating up to the block that the snapshot is based upon.\n\nThe result is a usable bitcoind instance that is current with the network tip in a matter of minutes rather than hours. UTXO snapshot are typically obtained from third-party sources (HTTP, torrent, etc.) which is reasonable since their contents are always checked by hash.\n\nYou can find more information on this process in the `assumeutxo` design document (<https://github.com/bitcoin/bitcoin/blob/master/doc/design/assumeutxo.md>).",
        "examples": "> bitcoin-cli -rpcclienttimeout=0 loadtxoutset utxo.dat\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/loadtxoutset-arguments.json",
          "type": "object",
          "properties": {
            "path": {
              "description": "path to the snapshot file. If relative, will be prefixed by datadir.",
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false
        }
      }
    ],
    "loadwallet": [
      {
        "name": "loadwallet",
        "category": "wallet",
        "description": "Loads a wallet from a wallet file or directory.\nNote that all wallet command-line options used when starting bitcoind will be\napplied to the new wallet.\n",
        "examples": "\nLoad wallet from the wallet dir:\n> bitcoin-cli loadwallet \"walletname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"loadwallet\", \"params\": [\"walletname\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n\nLoad wallet using absolute path (Unix):\n> bitcoin-cli loadwallet \"/path/to/walletname/\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"loadwallet\", \"params\": [\"/path/to/walletname/\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n\nLoad wallet using absolute path (Windows):\n> bitcoin-cli loadwallet \"DriveLetter:\\path\\to\\walletname\\\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"loadwallet\", \"params\": [\"DriveLetter:\\path\\to\\walletname\\\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/loadwallet-arguments.json",
          "type": "object",
          "properties": {
            "filename": {
              "description": "The path to the directory of the wallet to be loaded, either absolute or relative to the \"wallets\" directory. The \"wallets\" directory is set by the -walletdir option and defaults to the \"wallets\" folder within the data directory.",
              "type": "string"
            },
            "load_on_startup": {
              "description": "Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.",
              "type": "boolean"
            }
          },
          "required": [
            "filename"
          ],
          "additionalProperties": false
        }
      }
    ],
    "lockunspent": [
      {
        "name": "lockunspent",
        "category": "wallet",
        "description": "Updates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nIf no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\nA locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\nManually selected coins are automatically unlocked.\nLocks are stored in memory only, unless persistent=true, in which case they will be written to the\nwallet database and loaded on node start. Unwritten (persistent=false) locks are always cleared\n(by virtue of process exit) when a node stops or fails. Unlocking will clear both persistent and not.\nAlso see the listunspent call\n",
        "examples": "\nList the unspent transactions\n> bitcoin-cli listunspent \n\nLock an unspent transaction\n> bitcoin-cli lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nList the locked transactions\n> bitcoin-cli listlockunspent \n\nUnlock the transaction again\n> bitcoin-cli lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nLock the transaction persistently in the wallet database\n> bitcoin-cli lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\" true\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/lockunspent-arguments.json",
          "type": "object",
          "properties": {
            "unlock": {
              "description": "Whether to unlock (true) or lock (false) the specified transactions",
              "type": "boolean"
            },
            "transactions": {
              "description": "The transaction outputs and within each, the txid (string) vout (numeric).",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "txid": {
                      "description": "The transaction id",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "vout": {
                      "description": "The output number",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "txid",
                    "vout"
                  ]
                }
              ]
            },
            "persistent": {
              "description": "Whether to write/erase this lock in the wallet database, or keep the change in memory only. Ignored for unlocking.",
              "type": "boolean"
            }
          },
          "required": [
            "unlock"
          ],
          "additionalProperties": false
        }
      }
    ],
    "logging": [
      {
        "name": "logging",
        "category": "control",
        "description": "Gets and sets the logging configuration.\nWhen called without an argument, returns the list of categories with status that are currently being debug logged or not.\nWhen called with arguments, adds or removes categories from debug logging and return the lists above.\nThe arguments are evaluated in order \"include\", \"exclude\".\nIf an item is both included and excluded, it will thus end up being excluded.\nThe valid logging categories are: addrman, bench, blockstorage, cmpctblock, coindb, estimatefee, http, i2p, ipc, leveldb, libevent, mempool, mempoolrej, net, proxy, prune, qt, rand, reindex, rpc, scan, selectcoins, tor, txpackages, txreconciliation, validation, walletdb, zmq\nIn addition, the following are available as category names with special meanings:\n  - \"all\",  \"1\" : represent all logging categories.\n",
        "examples": "> bitcoin-cli logging \"[\\\"all\\\"]\" \"[\\\"http\\\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"logging\", \"params\": [[\"all\"], [\"libevent\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/logging-arguments.json",
          "type": "object",
          "properties": {
            "include": {
              "description": "The categories to add to debug logging",
              "type": "array",
              "items": [
                {
                  "description": "the valid logging category",
                  "type": "string"
                }
              ]
            },
            "exclude": {
              "description": "The categories to remove from debug logging",
              "type": "array",
              "items": [
                {
                  "description": "the valid logging category",
                  "type": "string"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "migratewallet": [
      {
        "name": "migratewallet",
        "category": "wallet",
        "description": "Migrate the wallet to a descriptor wallet.\nA new wallet backup will need to be made.\n\nThe migration process will create a backup of the wallet before migrating. This backup\nfile will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\nfor this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\nEncrypted wallets must have the passphrase provided as an argument to this call.\n\nThis RPC may take a long time to complete. Increasing the RPC client timeout is recommended.",
        "examples": "> bitcoin-cli migratewallet \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"migratewallet\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/migratewallet-arguments.json",
          "type": "object",
          "properties": {
            "wallet_name": {
              "description": "The name of the wallet to migrate. If provided both here and in the RPC endpoint, the two must be identical.",
              "type": "string"
            },
            "passphrase": {
              "description": "The wallet passphrase",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "mockscheduler": [
      {
        "name": "mockscheduler",
        "category": "hidden",
        "description": "Bump the scheduler into the future (-regtest only)\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/mockscheduler-arguments.json",
          "type": "object",
          "properties": {
            "delta_time": {
              "description": "Number of seconds to forward the scheduler into the future.",
              "type": "number"
            }
          },
          "required": [
            "delta_time"
          ],
          "additionalProperties": false
        }
      }
    ],
    "ping": [
      {
        "name": "ping",
        "category": "network",
        "description": "Requests that a ping be sent to all other nodes, to measure ping time.\nResults provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\nPing command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\n",
        "examples": "> bitcoin-cli ping \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"ping\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/ping-arguments.json",
          "type": "object"
        }
      }
    ],
    "preciousblock": [
      {
        "name": "preciousblock",
        "category": "blockchain",
        "description": "Treats a block as if it were received before others with the same work.\n\nA later preciousblock call can override the effect of an earlier one.\n\nThe effects of preciousblock are not retained across restarts.\n",
        "examples": "> bitcoin-cli preciousblock \"blockhash\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/preciousblock-arguments.json",
          "type": "object",
          "properties": {
            "blockhash": {
              "description": "the hash of the block to mark as precious",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "blockhash"
          ],
          "additionalProperties": false
        }
      }
    ],
    "prioritisetransaction": [
      {
        "name": "prioritisetransaction",
        "category": "mining",
        "description": "Accepts the transaction into mined blocks at a higher (or lower) priority\n",
        "examples": "> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/prioritisetransaction-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The transaction id.",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "dummy": {
              "description": "API-Compatibility for previous API. Must be zero or null.\n                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.",
              "type": "number"
            },
            "fee_delta": {
              "description": "The fee value (in satoshis) to add (or subtract, if negative).\n                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\n                  The fee is not actually paid, only the algorithm for selecting transactions into a block\n                  considers the transaction as it would have paid a higher (or lower) fee.",
              "type": "number"
            }
          },
          "required": [
            "txid",
            "fee_delta"
          ],
          "additionalProperties": false
        }
      }
    ],
    "pruneblockchain": [
      {
        "name": "pruneblockchain",
        "category": "blockchain",
        "description": "Attempts to delete block and undo data up to a specified height or timestamp, if eligible for pruning.\nRequires `-prune` to be enabled at startup. While pruned data may be re-fetched in some cases (e.g., via `getblockfrompeer`), local deletion is irreversible.\n",
        "examples": "> bitcoin-cli pruneblockchain 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/pruneblockchain-arguments.json",
          "type": "object",
          "properties": {
            "height": {
              "description": "The block height to prune up to. May be set to a discrete height, or to a UNIX epoch time\n                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.",
              "type": "number"
            }
          },
          "required": [
            "height"
          ],
          "additionalProperties": false
        }
      }
    ],
    "psbtbumpfee": [
      {
        "name": "psbtbumpfee",
        "category": "wallet",
        "description": "Bumps the fee of a transaction T, replacing it with a new transaction B.\nReturns a PSBT instead of creating and signing a new transaction.\nA transaction with the given txid must be in the wallet.\nThe command will pay the additional fee by reducing change outputs or adding inputs when necessary.\nIt may add a new change output if one does not already exist.\nAll inputs in the original transaction will be included in the replacement transaction.\nThe command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\nBy default, the new fee will be calculated automatically using the estimatesmartfee RPC.\nThe user can specify a confirmation target for estimatesmartfee.\nAlternatively, the user can specify a fee rate in sat/vB for the new transaction.\nAt a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\nreturned by getnetworkinfo) to enter the node's mempool.\n* WARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB. *\n",
        "examples": "\nBump the fee, get the new transaction's psbt\n> bitcoin-cli psbtbumpfee <txid>\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/psbtbumpfee-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The txid to be bumped",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "conf_target": {
                  "description": "Confirmation target in blocks\n",
                  "type": "number"
                },
                "fee_rate": {
                  "description": "\nSpecify a fee rate in sat/vB instead of relying on the built-in fee estimator.\nMust be at least 1.000 sat/vB higher than the current transaction fee rate.\nWARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB.\n",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "replaceable": {
                  "description": "Whether the new transaction should be\nmarked bip-125 replaceable. If true, the sequence numbers in the transaction will\nbe set to 0xfffffffd. If false, any input sequence numbers in the\ntransaction will be set to 0xfffffffe\nso the new transaction will not be explicitly bip-125 replaceable (though it may\nstill be replaceable in practice, for example if it has unconfirmed ancestors which\nare replaceable).\n",
                  "type": "boolean"
                },
                "estimate_mode": {
                  "description": "The fee estimate mode, must be one of (case insensitive):\nunset, economical, conservative \nunset means no mode set (economical mode is used if the transaction is replaceable;\notherwise, conservative mode is used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
                  "type": "string"
                },
                "outputs": {
                  "description": "The outputs specified as key-value pairs.\nEach key may only appear once, i.e. there can only be one 'data' output, and no address may be duplicated.\nAt least one output of either type must be specified.\nCannot be provided if 'original_change_index' is specified.",
                  "type": "array",
                  "items": [
                    {
                      "type": "object",
                      "additionalProperties": {
                        "description": "A key-value pair. The key (string) is the bitcoin address,\nthe value (float or string) is the amount in BTC",
                        "type": [
                          "number",
                          "string"
                        ]
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "A key-value pair. The key must be \"data\", the value is hex-encoded data that becomes a part of an OP_RETURN output",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "data"
                      ]
                    }
                  ]
                },
                "original_change_index": {
                  "description": "The 0-based index of the change output on the original transaction. The indicated output will be recycled into the new change output on the bumped transaction. The remainder after paying the recipients and fees will be sent to the output script of the original change output. The change output’s amount can increase if bumping the transaction adds new inputs, otherwise it will decrease. Cannot be used in combination with the 'outputs' option.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          },
          "required": [
            "txid"
          ],
          "additionalProperties": false
        }
      }
    ],
    "reconsiderblock": [
      {
        "name": "reconsiderblock",
        "category": "hidden",
        "description": "Removes invalidity status of a block, its ancestors and its descendants, reconsider them for activation.\nThis can be used to undo the effects of invalidateblock.\n",
        "examples": "> bitcoin-cli reconsiderblock \"blockhash\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"reconsiderblock\", \"params\": [\"blockhash\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/reconsiderblock-arguments.json",
          "type": "object",
          "properties": {
            "blockhash": {
              "description": "the hash of the block to reconsider",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "blockhash"
          ],
          "additionalProperties": false
        }
      }
    ],
    "removeprunedfunds": [
      {
        "name": "removeprunedfunds",
        "category": "wallet",
        "description": "Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\n",
        "examples": "> bitcoin-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"removeprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/removeprunedfunds-arguments.json",
          "type": "object",
          "properties": {
            "txid": {
              "description": "The hex-encoded id of the transaction you are deleting",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "txid"
          ],
          "additionalProperties": false
        }
      }
    ],
    "rescanblockchain": [
      {
        "name": "rescanblockchain",
        "category": "wallet",
        "description": "Rescan the local blockchain for wallet related transactions.\nNote: Use \"getwalletinfo\" to query the scanning progress.\nThe rescan is significantly faster if block filters are available\n(using startup option \"-blockfilterindex=1\").\n",
        "examples": "> bitcoin-cli rescanblockchain 100000 120000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"rescanblockchain\", \"params\": [100000, 120000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/rescanblockchain-arguments.json",
          "type": "object",
          "properties": {
            "start_height": {
              "description": "block height where the rescan should start",
              "type": "number"
            },
            "stop_height": {
              "description": "the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.",
              "type": "number"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "restorewallet": [
      {
        "name": "restorewallet",
        "category": "wallet",
        "description": "Restores and loads a wallet from backup.\n\nThe rescan is significantly faster if block filters are available\n(using startup option \"-blockfilterindex=1\").\n",
        "examples": "> bitcoin-cli restorewallet \"testwallet\" \"home\\backups\\backup-file.bak\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"restorewallet\", \"params\": [\"testwallet\" \"home\\backups\\backup-file.bak\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli -named restorewallet wallet_name=testwallet backup_file='home\\backups\\backup-file.bak\"' load_on_startup=true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"restorewallet\", \"params\": {\"wallet_name\":\"testwallet\",\"backup_file\":\"home\\\\backups\\\\backup-file.bak\\\"\",\"load_on_startup\":true}}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/restorewallet-arguments.json",
          "type": "object",
          "properties": {
            "wallet_name": {
              "description": "The name that will be applied to the restored wallet",
              "type": "string"
            },
            "backup_file": {
              "description": "The backup file that will be used to restore the wallet.",
              "type": "string"
            },
            "load_on_startup": {
              "description": "Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.",
              "type": "boolean"
            }
          },
          "required": [
            "wallet_name",
            "backup_file"
          ],
          "additionalProperties": false
        }
      }
    ],
    "savemempool": [
      {
        "name": "savemempool",
        "category": "blockchain",
        "description": "Dumps the mempool to disk. It will fail until the previous dump is fully loaded.\n",
        "examples": "> bitcoin-cli savemempool \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"savemempool\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/savemempool-arguments.json",
          "type": "object"
        }
      }
    ],
    "scanblocks": [
      {
        "name": "scanblocks",
        "category": "blockchain",
        "description": "Return relevant blockhashes for given descriptors (requires blockfilterindex).\nThis call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)",
        "examples": "> bitcoin-cli scanblocks start '[\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\"]' 300000\n> bitcoin-cli scanblocks start '[\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\"]' 100 150 basic\n> bitcoin-cli scanblocks status\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scanblocks\", \"params\": [\"start\", [\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\"], 300000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scanblocks\", \"params\": [\"start\", [\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\"], 100, 150, \"basic\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scanblocks\", \"params\": [\"status\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/scanblocks-arguments.json",
          "type": "object",
          "properties": {
            "action": {
              "description": "The action to execute\n\"start\" for starting a scan\n\"abort\" for aborting the current scan (returns true when abort was successful)\n\"status\" for progress report (in %) of the current scan",
              "type": "string"
            },
            "scanobjects": {
              "description": "Array of scan objects. Required for \"start\" action\nEvery scan object is either a string descriptor or an object:",
              "type": "array",
              "items": [
                {
                  "description": "An output descriptor",
                  "type": "string"
                },
                {
                  "description": "An object with output descriptor and metadata",
                  "type": "object",
                  "properties": {
                    "desc": {
                      "description": "An output descriptor",
                      "type": "string"
                    },
                    "range": {
                      "description": "The range of HD chain indexes to explore (either end or [begin,end])",
                      "type": [
                        "number",
                        "array"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "desc"
                  ]
                }
              ]
            },
            "start_height": {
              "description": "Height to start to scan from",
              "type": "number"
            },
            "stop_height": {
              "description": "Height to stop to scan",
              "type": "number"
            },
            "filtertype": {
              "description": "The type name of the filter",
              "type": "string"
            },
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "filter_false_positives": {
                  "description": "Filter false positives (slower and may fail on pruned nodes). Otherwise they may occur at a rate of 1/M",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false
        }
      }
    ],
    "scantxoutset": [
      {
        "name": "scantxoutset",
        "category": "blockchain",
        "description": "Scans the unspent transaction output set for entries that match certain output descriptors.\nExamples of output descriptors are:\n    addr(<address>)                      Outputs whose output script corresponds to the specified address (does not include P2PK)\n    raw(<hex script>)                    Outputs whose output script equals the specified hex-encoded bytes\n    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\n    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\n    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\n    tr(<pubkey>)                         P2TR\n    tr(<pubkey>,{pk(<pubkey>)})          P2TR with single fallback pubkey in tapscript\n    rawtr(<pubkey>)                      P2TR with the specified key as output key rather than inner\n    wsh(and_v(v:pk(<pubkey>),after(2)))  P2WSH miniscript with mandatory pubkey and a timelock\n\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\nor more path elements separated by \"/\", and optionally ending in \"/*\" (unhardened), or \"/*'\" or \"/*h\" (hardened) to specify all\nunhardened or hardened child keys.\nIn the latter case, a range needs to be specified by below if different from 1000.\nFor more information on output descriptors, see the documentation in the doc/descriptors.md file.\n",
        "examples": "> bitcoin-cli scantxoutset start '[\"raw(76a91411b366edfc0a8b66feebae5c2e25a7b6a5d1cf3188ac)#fm24fxxy\"]'\n> bitcoin-cli scantxoutset status\n> bitcoin-cli scantxoutset abort\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scantxoutset\", \"params\": [\"start\", [\"raw(76a91411b366edfc0a8b66feebae5c2e25a7b6a5d1cf3188ac)#fm24fxxy\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scantxoutset\", \"params\": [\"status\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"scantxoutset\", \"params\": [\"abort\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/scantxoutset-arguments.json",
          "type": "object",
          "properties": {
            "action": {
              "description": "The action to execute\n\"start\" for starting a scan\n\"abort\" for aborting the current scan (returns true when abort was successful)\n\"status\" for progress report (in %) of the current scan",
              "type": "string"
            },
            "scanobjects": {
              "description": "Array of scan objects. Required for \"start\" action\nEvery scan object is either a string descriptor or an object:",
              "type": "array",
              "items": [
                {
                  "description": "An output descriptor",
                  "type": "string"
                },
                {
                  "description": "An object with output descriptor and metadata",
                  "type": "object",
                  "properties": {
                    "desc": {
                      "description": "An output descriptor",
                      "type": "string"
                    },
                    "range": {
                      "description": "The range of HD chain indexes to explore (either end or [begin,end])",
                      "type": [
                        "number",
                        "array"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "desc"
                  ]
                }
              ]
            }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false
        }
      }
    ],
    "schema": [
      {
        "name": "schema",
        "category": "control",
        "description": "\nReturn RPC command JSON Schema descriptions.\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/schema-arguments.json",
          "type": "object"
        }
      }
    ],
    "send": [
      {
        "name": "send",
        "category": "wallet",
        "description": "EXPERIMENTAL warning: this call may be changed in future releases.\n\nSend a transaction.\n",
        "examples": "\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode\n> bitcoin-cli send '{\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\": 0.1}' 6 economical\n\nSend 0.2 BTC with a fee rate of 1.1 sat/vB using positional arguments\n> bitcoin-cli send '{\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\": 0.2}' null \"unset\" 1.1\n\nSend 0.2 BTC with a fee rate of 1 sat/vB using the options argument\n> bitcoin-cli send '{\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\": 0.2}' null \"unset\" null '{\"fee_rate\": 1}'\n\nSend 0.3 BTC with a fee rate of 25 sat/vB using named arguments\n> bitcoin-cli -named send outputs='{\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\": 0.3}' fee_rate=25\n\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\n> bitcoin-cli send '{\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\": 0.1}' 1 economical '{\"add_to_wallet\": false, \"inputs\": [{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\", \"vout\":1}]}'\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/send-arguments.json",
          "type": "object",
          "properties": {
            "outputs": {
              "description": "The outputs specified as key-value pairs.\nEach key may only appear once, i.e. there can only be one 'data' output, and no address may be duplicated.\nAt least one output of either type must be specified.\nFor convenience, a dictionary, which holds the key-value pairs directly, is also accepted.",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A key-value pair. The key (string) is the bitcoin address,\nthe value (float or string) is the amount in BTC",
                    "type": [
                      "number",
                      "string"
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A key-value pair. The key must be \"data\", the value is hex-encoded data that becomes a part of an OP_RETURN output",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              ]
            },
            "conf_target": {
              "description": "Confirmation target in blocks",
              "type": "number"
            },
            "estimate_mode": {
              "description": "The fee estimate mode, must be one of (case insensitive):\nunset, economical, conservative \nunset means no mode set (economical mode is used if the transaction is replaceable;\notherwise, conservative mode is used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
              "type": "string"
            },
            "fee_rate": {
              "description": "Specify a fee rate in sat/vB.",
              "type": [
                "number",
                "string"
              ]
            },
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "add_inputs": {
                  "description": "Automatically include coins from the wallet to cover the target amount.\n",
                  "type": "boolean"
                },
                "include_unsafe": {
                  "description": "Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\nWarning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\nIf that happens, you will need to fund the transaction with different inputs and republish it.",
                  "type": "boolean"
                },
                "minconf": {
                  "description": "If add_inputs is specified, require inputs with at least this many confirmations.",
                  "type": "number"
                },
                "maxconf": {
                  "description": "If add_inputs is specified, require inputs with at most this many confirmations.",
                  "type": "number"
                },
                "add_to_wallet": {
                  "description": "When false, returns a serialized transaction which will not be added to the wallet or broadcast",
                  "type": "boolean"
                },
                "change_address": {
                  "description": "The bitcoin address to receive the change",
                  "type": "string"
                },
                "change_position": {
                  "description": "The index of the change output",
                  "type": "number"
                },
                "change_type": {
                  "description": "The output type to use. Only valid if change_address is not specified. Options are \"legacy\", \"p2sh-segwit\", \"bech32\" and \"bech32m\".",
                  "type": "string"
                },
                "fee_rate": {
                  "description": "Specify a fee rate in sat/vB.",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "include_watching": {
                  "description": "Also select inputs which are watch only.\nOnly solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\ne.g. with 'importdescriptors'.",
                  "type": "boolean"
                },
                "inputs": {
                  "description": "Specify inputs instead of adding them automatically.",
                  "type": "array",
                  "items": [
                    {
                      "type": "object",
                      "properties": {
                        "txid": {
                          "description": "The transaction id",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        },
                        "vout": {
                          "description": "The output number",
                          "type": "number"
                        },
                        "sequence": {
                          "description": "The sequence number",
                          "type": "number"
                        },
                        "weight": {
                          "description": "The maximum weight for this input, including the weight of the outpoint and sequence number. Note that signature sizes are not guaranteed to be consistent, so the maximum DER signatures size of 73 bytes should be used when considering ECDSA signatures.Remember to convert serialized sizes to weight units when necessary.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "txid",
                        "vout"
                      ]
                    }
                  ]
                },
                "locktime": {
                  "description": "Raw locktime. Non-0 value also locktime-activates inputs",
                  "type": "number"
                },
                "lock_unspents": {
                  "description": "Lock selected unspent outputs",
                  "type": "boolean"
                },
                "psbt": {
                  "description": "Always return a PSBT, implies add_to_wallet=false.",
                  "type": "boolean"
                },
                "subtract_fee_from_outputs": {
                  "description": "Outputs to subtract the fee from, specified as integer indices.\nThe fee will be equally deducted from the amount of each specified output.\nThose recipients will receive less bitcoins than you enter in their corresponding amount field.\nIf no outputs are specified here, the sender pays the fee.",
                  "type": "array",
                  "items": [
                    {
                      "description": "The zero-based output index, before a change output is added.",
                      "type": "number"
                    }
                  ]
                },
                "max_tx_weight": {
                  "description": "The maximum acceptable transaction weight.\nTransaction building will fail if this can not be satisfied.",
                  "type": "number"
                },
                "conf_target": {
                  "description": "Confirmation target in blocks",
                  "type": "number"
                },
                "estimate_mode": {
                  "description": "The fee estimate mode, must be one of (case insensitive):\nunset, economical, conservative \nunset means no mode set (economical mode is used if the transaction is replaceable;\notherwise, conservative mode is used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
                  "type": "string"
                },
                "replaceable": {
                  "description": "Marks this transaction as BIP125-replaceable.\nAllows this transaction to be replaced by a transaction with higher fees",
                  "type": "boolean"
                },
                "solving_data": {
                  "description": "Keys and scripts needed for producing a final transaction with a dummy signature.\nUsed for fee estimation during coin selection.",
                  "type": "object",
                  "properties": {
                    "pubkeys": {
                      "description": "Public keys involved in this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A public key",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        }
                      ]
                    },
                    "scripts": {
                      "description": "Scripts involved in this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A script",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        }
                      ]
                    },
                    "descriptors": {
                      "description": "Descriptors that provide solving data for this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A descriptor",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "required": [
            "outputs"
          ],
          "additionalProperties": false
        }
      }
    ],
    "sendall": [
      {
        "name": "sendall",
        "category": "wallet",
        "description": "EXPERIMENTAL warning: this call may be changed in future releases.\n\nSpend the value of all (or specific) confirmed UTXOs and unconfirmed change in the wallet to one or more recipients.\nUnconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\nIf your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\n",
        "examples": "\nSpend all UTXOs from the wallet with a fee rate of 1 sat/vB using named arguments\n> bitcoin-cli -named sendall recipients='[\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]' fee_rate=1\n\nSpend all UTXOs with a fee rate of 1.1 sat/vB using positional arguments\n> bitcoin-cli sendall '[\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]' null \"unset\" 1.1\n\nSpend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 sat/vB using the options argument\n> bitcoin-cli sendall '[\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\", \"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\"]' null \"unset\" null '{\"fee_rate\": 1.5}'\n\nLeave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 sat/vB using the options argument\n> bitcoin-cli sendall '[\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]' null \"unset\" null '{\"fee_rate\": 10, \"send_max\": true}'\n\nSpend all UTXOs with a fee rate of 1.3 sat/vB using named arguments and sending a 0.25 BTC to another recipient\n> bitcoin-cli -named sendall recipients='[{\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\": 0.25}, \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]' fee_rate=1.3\n\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/sendall-arguments.json",
          "type": "object",
          "properties": {
            "recipients": {
              "description": "The sendall destinations. Each address may only appear once.\nOptionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\n",
              "type": "array",
              "items": [
                {
                  "description": "A bitcoin address which receives an equal share of the unspecified amount.",
                  "type": "string"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC",
                    "type": [
                      "number",
                      "string"
                    ]
                  }
                }
              ]
            },
            "conf_target": {
              "description": "Confirmation target in blocks",
              "type": "number"
            },
            "estimate_mode": {
              "description": "The fee estimate mode, must be one of (case insensitive):\nunset, economical, conservative \nunset means no mode set (economical mode is used if the transaction is replaceable;\notherwise, conservative mode is used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
              "type": "string"
            },
            "fee_rate": {
              "description": "Specify a fee rate in sat/vB.",
              "type": [
                "number",
                "string"
              ]
            },
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "add_to_wallet": {
                  "description": "When false, returns the serialized transaction without broadcasting or adding it to the wallet",
                  "type": "boolean"
                },
                "fee_rate": {
                  "description": "Specify a fee rate in sat/vB.",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "include_watching": {
                  "description": "Also select inputs which are watch-only.\nOnly solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\ne.g. with 'importdescriptors'.",
                  "type": "boolean"
                },
                "inputs": {
                  "description": "Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with the send_max, minconf, and maxconf options.",
                  "type": "array",
                  "items": [
                    {
                      "type": "object",
                      "properties": {
                        "txid": {
                          "description": "The transaction id",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        },
                        "vout": {
                          "description": "The output number",
                          "type": "number"
                        },
                        "sequence": {
                          "description": "The sequence number",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "txid",
                        "vout"
                      ]
                    }
                  ]
                },
                "locktime": {
                  "description": "Raw locktime. Non-0 value also locktime-activates inputs",
                  "type": "number"
                },
                "lock_unspents": {
                  "description": "Lock selected unspent outputs",
                  "type": "boolean"
                },
                "psbt": {
                  "description": "Always return a PSBT, implies add_to_wallet=false.",
                  "type": "boolean"
                },
                "send_max": {
                  "description": "When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.",
                  "type": "boolean"
                },
                "minconf": {
                  "description": "Require inputs with at least this many confirmations.",
                  "type": "number"
                },
                "maxconf": {
                  "description": "Require inputs with at most this many confirmations.",
                  "type": "number"
                },
                "conf_target": {
                  "description": "Confirmation target in blocks",
                  "type": "number"
                },
                "estimate_mode": {
                  "description": "The fee estimate mode, must be one of (case insensitive):\nunset, economical, conservative \nunset means no mode set (economical mode is used if the transaction is replaceable;\notherwise, conservative mode is used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
                  "type": "string"
                },
                "replaceable": {
                  "description": "Marks this transaction as BIP125-replaceable.\nAllows this transaction to be replaced by a transaction with higher fees",
                  "type": "boolean"
                },
                "solving_data": {
                  "description": "Keys and scripts needed for producing a final transaction with a dummy signature.\nUsed for fee estimation during coin selection.",
                  "type": "object",
                  "properties": {
                    "pubkeys": {
                      "description": "Public keys involved in this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A public key",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        }
                      ]
                    },
                    "scripts": {
                      "description": "Scripts involved in this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A script",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        }
                      ]
                    },
                    "descriptors": {
                      "description": "Descriptors that provide solving data for this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A descriptor",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "required": [
            "recipients"
          ],
          "additionalProperties": false
        }
      }
    ],
    "sendmany": [
      {
        "name": "sendmany",
        "category": "wallet",
        "description": "Send multiple times. Amounts are double-precision floating point numbers.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "\nSend two amounts to two different addresses:\n> bitcoin-cli sendmany \"\" \"{\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\":0.01,\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\":0.02}\"\n\nSend two amounts to two different addresses setting the confirmation and comment:\n> bitcoin-cli sendmany \"\" \"{\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\":0.01,\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\":0.02}\" 6 \"testing\"\n\nSend two amounts to two different addresses, subtract fee from amount:\n> bitcoin-cli sendmany \"\" \"{\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\":0.01,\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\":0.02}\" 1 \"\" \"[\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\",\\\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\\\"]\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"sendmany\", \"params\": [\"\", {\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\":0.01,\"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\":0.02}, 6, \"testing\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/sendmany-arguments.json",
          "type": "object",
          "properties": {
            "dummy": {
              "description": "Must be set to \"\" for backwards compatibility.",
              "type": "string"
            },
            "amounts": {
              "description": "The addresses and amounts",
              "type": "object",
              "additionalProperties": {
                "description": "The bitcoin address is the key, the numeric amount (can be string) in BTC is the value",
                "type": [
                  "number",
                  "string"
                ]
              }
            },
            "minconf": {
              "description": "Ignored dummy value",
              "type": "number"
            },
            "comment": {
              "description": "A comment",
              "type": "string"
            },
            "subtractfeefrom": {
              "description": "The addresses.\nThe fee will be equally deducted from the amount of each selected address.\nThose recipients will receive less bitcoins than you enter in their corresponding amount field.\nIf no addresses are specified here, the sender pays the fee.",
              "type": "array",
              "items": [
                {
                  "description": "Subtract fee from this address",
                  "type": "string"
                }
              ]
            },
            "replaceable": {
              "description": "Signal that this transaction can be replaced by a transaction (BIP 125)",
              "type": "boolean"
            },
            "conf_target": {
              "description": "Confirmation target in blocks",
              "type": "number"
            },
            "estimate_mode": {
              "description": "The fee estimate mode, must be one of (case insensitive):\nunset, economical, conservative \nunset means no mode set (economical mode is used if the transaction is replaceable;\notherwise, conservative mode is used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
              "type": "string"
            },
            "fee_rate": {
              "description": "Specify a fee rate in sat/vB.",
              "type": [
                "number",
                "string"
              ]
            },
            "verbose": {
              "description": "If true, return extra information about the transaction.",
              "type": "boolean"
            }
          },
          "required": [
            "amounts"
          ],
          "additionalProperties": false
        }
      }
    ],
    "sendmsgtopeer": [
      {
        "name": "sendmsgtopeer",
        "category": "hidden",
        "description": "Send a p2p message to a peer specified by id.\nThe message type and body must be provided, the message header will be generated.\nThis RPC is for testing only.",
        "examples": "> bitcoin-cli sendmsgtopeer 0 \"addr\" \"ffffff\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"sendmsgtopeer\", \"params\": [0 \"addr\" \"ffffff\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/sendmsgtopeer-arguments.json",
          "type": "object",
          "properties": {
            "peer_id": {
              "description": "The peer to send the message to.",
              "type": "number"
            },
            "msg_type": {
              "description": "The message type (maximum length 12)",
              "type": "string"
            },
            "msg": {
              "description": "The serialized message body to send, in hex, without a message header",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "peer_id",
            "msg_type",
            "msg"
          ],
          "additionalProperties": false
        }
      }
    ],
    "sendrawtransaction": [
      {
        "name": "sendrawtransaction",
        "category": "rawtransactions",
        "description": "Submit a raw transaction (serialized, hex-encoded) to local node and network.\n\nThe transaction will be sent unconditionally to all peers, so using sendrawtransaction\nfor manual rebroadcast may degrade privacy by leaking the transaction's origin, as\nnodes will normally not rebroadcast non-wallet transactions already in their mempool.\n\nA specific exception, RPC_TRANSACTION_ALREADY_IN_UTXO_SET, may throw if the transaction cannot be added to the mempool.\n\nRelated RPCs: createrawtransaction, signrawtransactionwithkey\n",
        "examples": "\nCreate a transaction\n> bitcoin-cli createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\"\nSign the transaction, and get back the hex\n> bitcoin-cli signrawtransactionwithwallet \"myhex\"\n\nSend the transaction (signed hex)\n> bitcoin-cli sendrawtransaction \"signedhex\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/sendrawtransaction-arguments.json",
          "type": "object",
          "properties": {
            "hexstring": {
              "description": "The hex string of the raw transaction",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "maxfeerate": {
              "description": "Reject transactions whose fee rate is higher than the specified value, expressed in BTC/kvB.\nFee rates larger than 1BTC/kvB are rejected.\nSet to 0 to accept any fee rate.",
              "type": [
                "number",
                "string"
              ]
            },
            "maxburnamount": {
              "description": "Reject transactions with provably unspendable outputs (e.g. 'datacarrier' outputs that use the OP_RETURN opcode) greater than the specified value, expressed in BTC.\nIf burning funds through unspendable outputs is desired, increase this value.\nThis check is based on heuristics and does not guarantee spendability of outputs.\n",
              "type": [
                "number",
                "string"
              ]
            }
          },
          "required": [
            "hexstring"
          ],
          "additionalProperties": false
        }
      }
    ],
    "sendtoaddress": [
      {
        "name": "sendtoaddress",
        "category": "wallet",
        "description": "Send an amount to a given address.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "\nSend 0.1 BTC\n> bitcoin-cli sendtoaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 0.1\n\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode using positional arguments\n> bitcoin-cli sendtoaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 0.1 \"donation\" \"sean's outpost\" false true 6 economical\n\nSend 0.1 BTC with a fee rate of 1.1 sat/vB, subtract fee from amount, BIP125-replaceable, using positional arguments\n> bitcoin-cli sendtoaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 0.1 \"drinks\" \"room77\" true true null \"unset\" null 1.1\n\nSend 0.2 BTC with a confirmation target of 6 blocks in economical fee estimate mode using named arguments\n> bitcoin-cli -named sendtoaddress address=\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" amount=0.2 conf_target=6 estimate_mode=\"economical\"\n\nSend 0.5 BTC with a fee rate of 25 sat/vB using named arguments\n> bitcoin-cli -named sendtoaddress address=\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" amount=0.5 fee_rate=25\n> bitcoin-cli -named sendtoaddress address=\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" amount=0.5 fee_rate=25 subtractfeefromamount=false replaceable=true avoid_reuse=true comment=\"2 pizzas\" comment_to=\"jeremy\" verbose=true\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/sendtoaddress-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "The bitcoin address to send to.",
              "type": "string"
            },
            "amount": {
              "description": "The amount in BTC to send. eg 0.1",
              "type": [
                "number",
                "string"
              ]
            },
            "comment": {
              "description": "A comment used to store what the transaction is for.\nThis is not part of the transaction, just kept in your wallet.",
              "type": "string"
            },
            "comment_to": {
              "description": "A comment to store the name of the person or organization\nto which you're sending the transaction. This is not part of the \ntransaction, just kept in your wallet.",
              "type": "string"
            },
            "subtractfeefromamount": {
              "description": "The fee will be deducted from the amount being sent.\nThe recipient will receive less bitcoins than you enter in the amount field.",
              "type": "boolean"
            },
            "replaceable": {
              "description": "Signal that this transaction can be replaced by a transaction (BIP 125)",
              "type": "boolean"
            },
            "conf_target": {
              "description": "Confirmation target in blocks",
              "type": "number"
            },
            "estimate_mode": {
              "description": "The fee estimate mode, must be one of (case insensitive):\nunset, economical, conservative \nunset means no mode set (economical mode is used if the transaction is replaceable;\notherwise, conservative mode is used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
              "type": "string"
            },
            "avoid_reuse": {
              "description": "(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\ndirty if they have previously been used in a transaction. If true, this also activates avoidpartialspends, grouping outputs by their addresses.",
              "type": "boolean"
            },
            "fee_rate": {
              "description": "Specify a fee rate in sat/vB.",
              "type": [
                "number",
                "string"
              ]
            },
            "verbose": {
              "description": "If true, return extra information about the transaction.",
              "type": "boolean"
            }
          },
          "required": [
            "address",
            "amount"
          ],
          "additionalProperties": false
        }
      }
    ],
    "setban": [
      {
        "name": "setban",
        "category": "network",
        "description": "Attempts to add or remove an IP/Subnet from the banned list.\n",
        "examples": "> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400\n> bitcoin-cli setban \"192.168.0.0/24\" \"add\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/setban-arguments.json",
          "type": "object",
          "properties": {
            "subnet": {
              "description": "The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)",
              "type": "string"
            },
            "command": {
              "description": "'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list",
              "type": "string"
            },
            "bantime": {
              "description": "time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)",
              "type": "number"
            },
            "absolute": {
              "description": "If set, the bantime must be an absolute timestamp expressed in UNIX epoch time",
              "type": "boolean"
            }
          },
          "required": [
            "subnet",
            "command"
          ],
          "additionalProperties": false
        }
      }
    ],
    "setlabel": [
      {
        "name": "setlabel",
        "category": "wallet",
        "description": "Sets the label associated with the given address.\n",
        "examples": "> bitcoin-cli setlabel \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"setlabel\", \"params\": [\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\", \"tabby\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/setlabel-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "The bitcoin address to be associated with a label.",
              "type": "string"
            },
            "label": {
              "description": "The label to assign to the address.",
              "type": "string"
            }
          },
          "required": [
            "address",
            "label"
          ],
          "additionalProperties": false
        }
      }
    ],
    "setmocktime": [
      {
        "name": "setmocktime",
        "category": "hidden",
        "description": "Set the local time to given timestamp (-regtest only)\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/setmocktime-arguments.json",
          "type": "object",
          "properties": {
            "timestamp": {
              "description": "UNIX epoch time\nPass 0 to go back to using the system time.",
              "type": "number"
            }
          },
          "required": [
            "timestamp"
          ],
          "additionalProperties": false
        }
      }
    ],
    "setnetworkactive": [
      {
        "name": "setnetworkactive",
        "category": "network",
        "description": "Disable/enable all p2p network activity.\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/setnetworkactive-arguments.json",
          "type": "object",
          "properties": {
            "state": {
              "description": "true to enable networking, false to disable",
              "type": "boolean"
            }
          },
          "required": [
            "state"
          ],
          "additionalProperties": false
        }
      }
    ],
    "settxfee": [
      {
        "name": "settxfee",
        "category": "wallet",
        "description": "(DEPRECATED) Set the transaction fee rate in BTC/kvB for this wallet. Overrides the global -paytxfee command line parameter.\nCan be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\n",
        "examples": "> bitcoin-cli settxfee 0.00001\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"settxfee\", \"params\": [0.00001]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/settxfee-arguments.json",
          "type": "object",
          "properties": {
            "amount": {
              "description": "The transaction fee rate in BTC/kvB",
              "type": [
                "number",
                "string"
              ]
            }
          },
          "required": [
            "amount"
          ],
          "additionalProperties": false
        }
      }
    ],
    "setwalletflag": [
      {
        "name": "setwalletflag",
        "category": "wallet",
        "description": "Change the state of the given wallet flag for a wallet.\n",
        "examples": "> bitcoin-cli setwalletflag avoid_reuse\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"setwalletflag\", \"params\": [\"avoid_reuse\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/setwalletflag-arguments.json",
          "type": "object",
          "properties": {
            "flag": {
              "description": "The name of the flag to change. Current available flags: avoid_reuse",
              "type": "string"
            },
            "value": {
              "description": "The new state.",
              "type": "boolean"
            }
          },
          "required": [
            "flag"
          ],
          "additionalProperties": false
        }
      }
    ],
    "signmessage": [
      {
        "name": "signmessage",
        "category": "wallet",
        "description": "Sign a message with the private key of an address\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "\nUnlock the wallet for 30 seconds\n> bitcoin-cli walletpassphrase \"mypassphrase\" 30\n\nCreate the signature\n> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"\n\nVerify the signature\n> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"my message\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/signmessage-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "The bitcoin address to use for the private key.",
              "type": "string"
            },
            "message": {
              "description": "The message to create a signature of.",
              "type": "string"
            }
          },
          "required": [
            "address",
            "message"
          ],
          "additionalProperties": false
        }
      }
    ],
    "signmessagewithprivkey": [
      {
        "name": "signmessagewithprivkey",
        "category": "util",
        "description": "Sign a message with the private key of an address\n",
        "examples": "\nCreate the signature\n> bitcoin-cli signmessagewithprivkey \"privkey\" \"my message\"\n\nVerify the signature\n> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/signmessagewithprivkey-arguments.json",
          "type": "object",
          "properties": {
            "privkey": {
              "description": "The private key to sign the message with.",
              "type": "string"
            },
            "message": {
              "description": "The message to create a signature of.",
              "type": "string"
            }
          },
          "required": [
            "privkey",
            "message"
          ],
          "additionalProperties": false
        }
      }
    ],
    "signrawtransactionwithkey": [
      {
        "name": "signrawtransactionwithkey",
        "category": "rawtransactions",
        "description": "Sign inputs for raw transaction (serialized, hex-encoded).\nThe second argument is an array of base58-encoded private\nkeys that will be the only keys used to sign the transaction.\nThe third optional argument (may be null) is an array of previous transaction outputs that\nthis transaction depends on but may not yet be in the block chain.\n",
        "examples": "> bitcoin-cli signrawtransactionwithkey \"myhex\" \"[\\\"key1\\\",\\\"key2\\\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"signrawtransactionwithkey\", \"params\": [\"myhex\", \"[\\\"key1\\\",\\\"key2\\\"]\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/signrawtransactionwithkey-arguments.json",
          "type": "object",
          "properties": {
            "hexstring": {
              "description": "The transaction hex string",
              "type": "string"
            },
            "privkeys": {
              "description": "The base58-encoded private keys for signing",
              "type": "array",
              "items": [
                {
                  "description": "private key in base58-encoding",
                  "type": "string",
                  "pattern": "^([0-9][a-f]{2})+$"
                }
              ]
            },
            "prevtxs": {
              "description": "The previous dependent transaction outputs",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "txid": {
                      "description": "The transaction id",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "vout": {
                      "description": "The output number",
                      "type": "number"
                    },
                    "scriptPubKey": {
                      "description": "output script",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "redeemScript": {
                      "description": "(required for P2SH) redeem script",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "witnessScript": {
                      "description": "(required for P2WSH or P2SH-P2WSH) witness script",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "amount": {
                      "description": "(required for Segwit inputs) the amount spent",
                      "type": [
                        "number",
                        "string"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "txid",
                    "vout",
                    "scriptPubKey"
                  ]
                }
              ]
            },
            "sighashtype": {
              "description": "The signature hash type. Must be one of:\n       \"DEFAULT\"\n       \"ALL\"\n       \"NONE\"\n       \"SINGLE\"\n       \"ALL|ANYONECANPAY\"\n       \"NONE|ANYONECANPAY\"\n       \"SINGLE|ANYONECANPAY\"\n",
              "type": "string"
            }
          },
          "required": [
            "hexstring",
            "privkeys"
          ],
          "additionalProperties": false
        }
      }
    ],
    "signrawtransactionwithwallet": [
      {
        "name": "signrawtransactionwithwallet",
        "category": "wallet",
        "description": "Sign inputs for raw transaction (serialized, hex-encoded).\nThe second optional argument (may be null) is an array of previous transaction outputs that\nthis transaction depends on but may not yet be in the block chain.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "> bitcoin-cli signrawtransactionwithwallet \"myhex\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"signrawtransactionwithwallet\", \"params\": [\"myhex\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/signrawtransactionwithwallet-arguments.json",
          "type": "object",
          "properties": {
            "hexstring": {
              "description": "The transaction hex string",
              "type": "string"
            },
            "prevtxs": {
              "description": "The previous dependent transaction outputs",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "txid": {
                      "description": "The transaction id",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "vout": {
                      "description": "The output number",
                      "type": "number"
                    },
                    "scriptPubKey": {
                      "description": "The output script",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "redeemScript": {
                      "description": "(required for P2SH) redeem script",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "witnessScript": {
                      "description": "(required for P2WSH or P2SH-P2WSH) witness script",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "amount": {
                      "description": "(required for Segwit inputs) the amount spent",
                      "type": [
                        "number",
                        "string"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "txid",
                    "vout",
                    "scriptPubKey"
                  ]
                }
              ]
            },
            "sighashtype": {
              "description": "The signature hash type. Must be one of\n       \"DEFAULT\"\n       \"ALL\"\n       \"NONE\"\n       \"SINGLE\"\n       \"ALL|ANYONECANPAY\"\n       \"NONE|ANYONECANPAY\"\n       \"SINGLE|ANYONECANPAY\"",
              "type": "string"
            }
          },
          "required": [
            "hexstring"
          ],
          "additionalProperties": false
        }
      }
    ],
    "simulaterawtransaction": [
      {
        "name": "simulaterawtransaction",
        "category": "wallet",
        "description": "Calculate the balance change resulting in the signing and broadcasting of the given transaction(s).\n",
        "examples": "> bitcoin-cli simulaterawtransaction [\"myhex\"]\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"simulaterawtransaction\", \"params\": [[\"myhex\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/simulaterawtransaction-arguments.json",
          "type": "object",
          "properties": {
            "rawtxs": {
              "description": "An array of hex strings of raw transactions.\n",
              "type": "array",
              "items": [
                {
                  "type": "string",
                  "pattern": "^([0-9][a-f]{2})+$"
                }
              ]
            },
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "include_watchonly": {
                  "description": "Whether to include watch-only addresses (see RPC importaddress)",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "stop": [
      {
        "name": "stop",
        "category": "control",
        "description": "Request a graceful shutdown of Bitcoin Core.",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/stop-arguments.json",
          "type": "object",
          "properties": {
            "wait": {
              "description": "how long to wait in ms",
              "type": "number"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "submitblock": [
      {
        "name": "submitblock",
        "category": "mining",
        "description": "Attempts to submit new block to network.\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.\n",
        "examples": "> bitcoin-cli submitblock \"mydata\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/submitblock-arguments.json",
          "type": "object",
          "properties": {
            "hexdata": {
              "description": "the hex-encoded block data to submit",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "dummy": {
              "description": "dummy value, for compatibility with BIP22. This value is ignored.",
              "type": "string"
            }
          },
          "required": [
            "hexdata"
          ],
          "additionalProperties": false
        }
      }
    ],
    "submitheader": [
      {
        "name": "submitheader",
        "category": "mining",
        "description": "Decode the given hexdata as a header and submit it as a candidate chain tip if valid.\nThrows when the header is invalid.\n",
        "examples": "> bitcoin-cli submitheader \"aabbcc\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"submitheader\", \"params\": [\"aabbcc\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/submitheader-arguments.json",
          "type": "object",
          "properties": {
            "hexdata": {
              "description": "the hex-encoded block header data",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "hexdata"
          ],
          "additionalProperties": false
        }
      }
    ],
    "submitpackage": [
      {
        "name": "submitpackage",
        "category": "rawtransactions",
        "description": "Submit a package of raw transactions (serialized, hex-encoded) to local node.\nThe package will be validated according to consensus and mempool policy rules. If any transaction passes, it will be accepted to mempool.\nThis RPC is experimental and the interface may be unstable. Refer to doc/policy/packages.md for documentation on package policies.\nWarning: successful submission does not mean the transactions will propagate throughout the network.\n",
        "examples": "> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"submitpackage\", \"params\": [[\"raw-parent-tx-1\", \"raw-parent-tx-2\", \"raw-child-tx\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n> bitcoin-cli submitpackage '[\"raw-tx-without-unconfirmed-parents\"]'\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/submitpackage-arguments.json",
          "type": "object",
          "properties": {
            "package": {
              "description": "An array of raw transactions.\nThe package must solely consist of a child transaction and all of its unconfirmed parents, if any. None of the parents may depend on each other.\nThe package must be topologically sorted, with the child being the last element in the array.",
              "type": "array",
              "items": [
                {
                  "type": "string",
                  "pattern": "^([0-9][a-f]{2})+$"
                }
              ]
            },
            "maxfeerate": {
              "description": "Reject transactions whose fee rate is higher than the specified value, expressed in BTC/kvB.\nFee rates larger than 1BTC/kvB are rejected.\nSet to 0 to accept any fee rate.",
              "type": [
                "number",
                "string"
              ]
            },
            "maxburnamount": {
              "description": "Reject transactions with provably unspendable outputs (e.g. 'datacarrier' outputs that use the OP_RETURN opcode) greater than the specified value, expressed in BTC.\nIf burning funds through unspendable outputs is desired, increase this value.\nThis check is based on heuristics and does not guarantee spendability of outputs.\n",
              "type": [
                "number",
                "string"
              ]
            }
          },
          "required": [
            "package"
          ],
          "additionalProperties": false
        }
      }
    ],
    "syncwithvalidationinterfacequeue": [
      {
        "name": "syncwithvalidationinterfacequeue",
        "category": "hidden",
        "description": "Waits for the validation interface queue to catch up on everything that was there when we entered this function.\n",
        "examples": "> bitcoin-cli syncwithvalidationinterfacequeue \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"syncwithvalidationinterfacequeue\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/syncwithvalidationinterfacequeue-arguments.json",
          "type": "object"
        }
      }
    ],
    "testmempoolaccept": [
      {
        "name": "testmempoolaccept",
        "category": "rawtransactions",
        "description": "Returns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\n\nIf multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.\n\nIf one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).\n\nThe maximum number of transactions allowed is 25.\n\nThis checks if transactions violate the consensus or policy rules.\n\nSee sendrawtransaction call.\n",
        "examples": "\nCreate a transaction\n> bitcoin-cli createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\"\nSign the transaction, and get back the hex\n> bitcoin-cli signrawtransactionwithwallet \"myhex\"\n\nTest acceptance of the transaction (signed hex)\n> bitcoin-cli testmempoolaccept '[\"signedhex\"]'\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"testmempoolaccept\", \"params\": [[\"signedhex\"]]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/testmempoolaccept-arguments.json",
          "type": "object",
          "properties": {
            "rawtxs": {
              "description": "An array of hex strings of raw transactions.",
              "type": "array",
              "items": [
                {
                  "type": "string",
                  "pattern": "^([0-9][a-f]{2})+$"
                }
              ]
            },
            "maxfeerate": {
              "description": "Reject transactions whose fee rate is higher than the specified value, expressed in BTC/kvB.\nFee rates larger than 1BTC/kvB are rejected.\nSet to 0 to accept any fee rate.",
              "type": [
                "number",
                "string"
              ]
            }
          },
          "required": [
            "rawtxs"
          ],
          "additionalProperties": false
        }
      }
    ],
    "unloadwallet": [
      {
        "name": "unloadwallet",
        "category": "wallet",
        "description": "Unloads the wallet referenced by the request endpoint, otherwise unloads the wallet specified in the argument.\nSpecifying the wallet name on a wallet endpoint is invalid.",
        "examples": "> bitcoin-cli unloadwallet wallet_name\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"unloadwallet\", \"params\": [wallet_name]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/unloadwallet-arguments.json",
          "type": "object",
          "properties": {
            "wallet_name": {
              "description": "The name of the wallet to unload. If provided both here and in the RPC endpoint, the two must be identical.",
              "type": "string"
            },
            "load_on_startup": {
              "description": "Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "upgradewallet": [
      {
        "name": "upgradewallet",
        "category": "wallet",
        "description": "Upgrade the wallet. Upgrades to the latest version if no version number is specified.\nNew keys may be generated and a new wallet backup will need to be made.",
        "examples": "> bitcoin-cli upgradewallet 169900\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"upgradewallet\", \"params\": [169900]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/upgradewallet-arguments.json",
          "type": "object",
          "properties": {
            "version": {
              "description": "The version number to upgrade to. Default is the latest wallet version.",
              "type": "number"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "uptime": [
      {
        "name": "uptime",
        "category": "control",
        "description": "Returns the total uptime of the server.\n",
        "examples": "> bitcoin-cli uptime \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"uptime\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/uptime-arguments.json",
          "type": "object"
        }
      }
    ],
    "utxoupdatepsbt": [
      {
        "name": "utxoupdatepsbt",
        "category": "rawtransactions",
        "description": "Updates all segwit inputs and outputs in a PSBT with data from output descriptors, the UTXO set, txindex, or the mempool.\n",
        "examples": "> bitcoin-cli utxoupdatepsbt \"psbt\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/utxoupdatepsbt-arguments.json",
          "type": "object",
          "properties": {
            "psbt": {
              "description": "A base64 string of a PSBT",
              "type": "string"
            },
            "descriptors": {
              "description": "An array of either strings or objects",
              "type": "array",
              "items": [
                {
                  "description": "An output descriptor",
                  "type": "string"
                },
                {
                  "description": "An object with an output descriptor and extra information",
                  "type": "object",
                  "properties": {
                    "desc": {
                      "description": "An output descriptor",
                      "type": "string"
                    },
                    "range": {
                      "description": "Up to what index HD chains should be explored (either end or [begin,end])",
                      "type": [
                        "number",
                        "array"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "desc"
                  ]
                }
              ]
            }
          },
          "required": [
            "psbt"
          ],
          "additionalProperties": false
        }
      }
    ],
    "validateaddress": [
      {
        "name": "validateaddress",
        "category": "util",
        "description": "Return information about the given bitcoin address.\n",
        "examples": "> bitcoin-cli validateaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"validateaddress\", \"params\": [\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/validateaddress-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "The bitcoin address to validate",
              "type": "string"
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    ],
    "verifychain": [
      {
        "name": "verifychain",
        "category": "blockchain",
        "description": "Verifies blockchain database.\n",
        "examples": "> bitcoin-cli verifychain \n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"verifychain\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/verifychain-arguments.json",
          "type": "object",
          "properties": {
            "checklevel": {
              "description": "How thorough the block verification is:\n- level 0 reads the blocks from disk\n- level 1 verifies block validity\n- level 2 verifies undo data\n- level 3 checks disconnection of tip blocks\n- level 4 tries to reconnect the blocks\n- each level includes the checks of the previous levels",
              "type": "number"
            },
            "nblocks": {
              "description": "The number of blocks to check.",
              "type": "number"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "verifymessage": [
      {
        "name": "verifymessage",
        "category": "util",
        "description": "Verify a signed message.",
        "examples": "\nUnlock the wallet for 30 seconds\n> bitcoin-cli walletpassphrase \"mypassphrase\" 30\n\nCreate the signature\n> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"\n\nVerify the signature\n> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/verifymessage-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "The bitcoin address to use for the signature.",
              "type": "string"
            },
            "signature": {
              "description": "The signature provided by the signer in base 64 encoding (see signmessage).",
              "type": "string"
            },
            "message": {
              "description": "The message that was signed.",
              "type": "string"
            }
          },
          "required": [
            "address",
            "signature",
            "message"
          ],
          "additionalProperties": false
        }
      }
    ],
    "verifytxoutproof": [
      {
        "name": "verifytxoutproof",
        "category": "blockchain",
        "description": "Verifies that a proof points to a transaction in a block, returning the transaction it commits to\nand throwing an RPC error if the block is not in our best chain\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/verifytxoutproof-arguments.json",
          "type": "object",
          "properties": {
            "proof": {
              "description": "The hex-encoded proof generated by gettxoutproof",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            }
          },
          "required": [
            "proof"
          ],
          "additionalProperties": false
        }
      }
    ],
    "waitforblock": [
      {
        "name": "waitforblock",
        "category": "hidden",
        "description": "Waits for a specific new block and returns useful info about it.\n\nReturns the current block on timeout or exit.\n\nMake sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)",
        "examples": "> bitcoin-cli waitforblock \"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\" 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"waitforblock\", \"params\": [\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\", 1000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/waitforblock-arguments.json",
          "type": "object",
          "properties": {
            "blockhash": {
              "description": "Block hash to wait for.",
              "type": "string",
              "pattern": "^([0-9][a-f]{2})+$"
            },
            "timeout": {
              "description": "Time in milliseconds to wait for a response. 0 indicates no timeout.",
              "type": "number"
            }
          },
          "required": [
            "blockhash"
          ],
          "additionalProperties": false
        }
      }
    ],
    "waitforblockheight": [
      {
        "name": "waitforblockheight",
        "category": "hidden",
        "description": "Waits for (at least) block height and returns the height and hash\nof the current tip.\n\nReturns the current block on timeout or exit.\n\nMake sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)",
        "examples": "> bitcoin-cli waitforblockheight 100 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"waitforblockheight\", \"params\": [100, 1000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/waitforblockheight-arguments.json",
          "type": "object",
          "properties": {
            "height": {
              "description": "Block height to wait for.",
              "type": "number"
            },
            "timeout": {
              "description": "Time in milliseconds to wait for a response. 0 indicates no timeout.",
              "type": "number"
            }
          },
          "required": [
            "height"
          ],
          "additionalProperties": false
        }
      }
    ],
    "waitfornewblock": [
      {
        "name": "waitfornewblock",
        "category": "hidden",
        "description": "Waits for any new block and returns useful info about it.\n\nReturns the current block on timeout or exit.\n\nMake sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)",
        "examples": "> bitcoin-cli waitfornewblock 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"waitfornewblock\", \"params\": [1000]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/waitfornewblock-arguments.json",
          "type": "object",
          "properties": {
            "timeout": {
              "description": "Time in milliseconds to wait for a response. 0 indicates no timeout.",
              "type": "number"
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "walletcreatefundedpsbt": [
      {
        "name": "walletcreatefundedpsbt",
        "category": "wallet",
        "description": "Creates and funds a transaction in the Partially Signed Transaction format.\nImplements the Creator and Updater roles.\nAll existing inputs must either have their previous output transaction be in the wallet\nor be in the UTXO set. Solving data must be provided for non-wallet inputs.\n",
        "examples": "\nCreate a PSBT with automatically picked inputs that sends 0.5 BTC to an address and has a fee rate of 2 sat/vB:\n> bitcoin-cli walletcreatefundedpsbt \"[]\" \"[{\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\":0.5}]\" 0 \"{\\\"add_inputs\\\":true,\\\"fee_rate\\\":2}\"\n\nCreate the same PSBT as the above one instead using named arguments:\n> bitcoin-cli -named walletcreatefundedpsbt outputs=\"[{\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\":0.5}]\" add_inputs=true fee_rate=2\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/walletcreatefundedpsbt-arguments.json",
          "type": "object",
          "properties": {
            "inputs": {
              "description": "Leave empty to add inputs automatically. See add_inputs option.",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "txid": {
                      "description": "The transaction id",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    },
                    "vout": {
                      "description": "The output number",
                      "type": "number"
                    },
                    "sequence": {
                      "description": "The sequence number",
                      "type": "number"
                    },
                    "weight": {
                      "description": "The maximum weight for this input, including the weight of the outpoint and sequence number. Note that signature sizes are not guaranteed to be consistent, so the maximum DER signatures size of 73 bytes should be used when considering ECDSA signatures.Remember to convert serialized sizes to weight units when necessary.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "txid",
                    "vout"
                  ]
                }
              ]
            },
            "outputs": {
              "description": "The outputs specified as key-value pairs.\nEach key may only appear once, i.e. there can only be one 'data' output, and no address may be duplicated.\nAt least one output of either type must be specified.\nFor compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\naccepted as second parameter.",
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A key-value pair. The key (string) is the bitcoin address,\nthe value (float or string) is the amount in BTC",
                    "type": [
                      "number",
                      "string"
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A key-value pair. The key must be \"data\", the value is hex-encoded data that becomes a part of an OP_RETURN output",
                      "type": "string",
                      "pattern": "^([0-9][a-f]{2})+$"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              ]
            },
            "locktime": {
              "description": "Raw locktime. Non-0 value also locktime-activates inputs",
              "type": "number"
            },
            "options": {
              "type": "object",
              "format": "named",
              "properties": {
                "add_inputs": {
                  "description": "Automatically include coins from the wallet to cover the target amount.\n",
                  "type": "boolean"
                },
                "include_unsafe": {
                  "description": "Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\nWarning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\nIf that happens, you will need to fund the transaction with different inputs and republish it.",
                  "type": "boolean"
                },
                "minconf": {
                  "description": "If add_inputs is specified, require inputs with at least this many confirmations.",
                  "type": "number"
                },
                "maxconf": {
                  "description": "If add_inputs is specified, require inputs with at most this many confirmations.",
                  "type": "number"
                },
                "changeAddress": {
                  "description": "The bitcoin address to receive the change",
                  "type": "string"
                },
                "changePosition": {
                  "description": "The index of the change output",
                  "type": "number"
                },
                "change_type": {
                  "description": "The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", \"bech32\", and \"bech32m\".",
                  "type": "string"
                },
                "includeWatching": {
                  "description": "Also select inputs which are watch only",
                  "type": "boolean"
                },
                "lockUnspents": {
                  "description": "Lock selected unspent outputs",
                  "type": "boolean"
                },
                "fee_rate": {
                  "description": "Specify a fee rate in sat/vB.",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "feeRate": {
                  "description": "Specify a fee rate in BTC/kvB.",
                  "type": [
                    "number",
                    "string"
                  ]
                },
                "subtractFeeFromOutputs": {
                  "description": "The outputs to subtract the fee from.\nThe fee will be equally deducted from the amount of each specified output.\nThose recipients will receive less bitcoins than you enter in their corresponding amount field.\nIf no outputs are specified here, the sender pays the fee.",
                  "type": "array",
                  "items": [
                    {
                      "description": "The zero-based output index, before a change output is added.",
                      "type": "number"
                    }
                  ]
                },
                "max_tx_weight": {
                  "description": "The maximum acceptable transaction weight.\nTransaction building will fail if this can not be satisfied.",
                  "type": "number"
                },
                "conf_target": {
                  "description": "Confirmation target in blocks",
                  "type": "number"
                },
                "estimate_mode": {
                  "description": "The fee estimate mode, must be one of (case insensitive):\nunset, economical, conservative \nunset means no mode set (economical mode is used if the transaction is replaceable;\notherwise, conservative mode is used). \neconomical estimates use a shorter time horizon, making them more\nresponsive to short-term drops in the prevailing fee market. This mode\npotentially returns a lower fee rate estimate.\nconservative estimates use a longer time horizon, making them\nless responsive to short-term drops in the prevailing fee market. This mode\npotentially returns a higher fee rate estimate.\n",
                  "type": "string"
                },
                "replaceable": {
                  "description": "Marks this transaction as BIP125-replaceable.\nAllows this transaction to be replaced by a transaction with higher fees",
                  "type": "boolean"
                },
                "solving_data": {
                  "description": "Keys and scripts needed for producing a final transaction with a dummy signature.\nUsed for fee estimation during coin selection.",
                  "type": "object",
                  "properties": {
                    "pubkeys": {
                      "description": "Public keys involved in this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A public key",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        }
                      ]
                    },
                    "scripts": {
                      "description": "Scripts involved in this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A script",
                          "type": "string",
                          "pattern": "^([0-9][a-f]{2})+$"
                        }
                      ]
                    },
                    "descriptors": {
                      "description": "Descriptors that provide solving data for this transaction.",
                      "type": "array",
                      "items": [
                        {
                          "description": "A descriptor",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "bip32derivs": {
              "description": "Include BIP 32 derivation paths for public keys if we know them",
              "type": "boolean"
            }
          },
          "required": [
            "outputs"
          ],
          "additionalProperties": false
        }
      }
    ],
    "walletdisplayaddress": [
      {
        "name": "walletdisplayaddress",
        "category": "wallet",
        "description": "Display address on an external signer for verification.",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/walletdisplayaddress-arguments.json",
          "type": "object",
          "properties": {
            "address": {
              "description": "bitcoin address to display",
              "type": "string"
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    ],
    "walletlock": [
      {
        "name": "walletlock",
        "category": "wallet",
        "description": "Removes the wallet encryption key from memory, locking the wallet.\nAfter calling this method, you will need to call walletpassphrase again\nbefore being able to call any methods which require the wallet to be unlocked.\n",
        "examples": "\nSet the passphrase for 2 minutes to perform a transaction\n> bitcoin-cli walletpassphrase \"my pass phrase\" 120\n\nPerform a send (requires passphrase set)\n> bitcoin-cli sendtoaddress \"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\" 1.0\n\nClear the passphrase since we are done before 2 minutes is up\n> bitcoin-cli walletlock \n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"walletlock\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/walletlock-arguments.json",
          "type": "object"
        }
      }
    ],
    "walletpassphrase": [
      {
        "name": "walletpassphrase",
        "category": "wallet",
        "description": "Stores the wallet decryption key in memory for 'timeout' seconds.\nThis is needed prior to performing transactions related to private keys such as sending bitcoins\n\nNote:\nIssuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\ntime that overrides the old one.\n",
        "examples": "\nUnlock the wallet for 60 seconds\n> bitcoin-cli walletpassphrase \"my pass phrase\" 60\n\nLock the wallet again (before 60 seconds)\n> bitcoin-cli walletlock \n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"walletpassphrase\", \"params\": [\"my pass phrase\", 60]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/walletpassphrase-arguments.json",
          "type": "object",
          "properties": {
            "passphrase": {
              "description": "The wallet passphrase",
              "type": "string"
            },
            "timeout": {
              "description": "The time to keep the decryption key in seconds; capped at 100000000 (~3 years).",
              "type": "number"
            }
          },
          "required": [
            "passphrase",
            "timeout"
          ],
          "additionalProperties": false
        }
      }
    ],
    "walletpassphrasechange": [
      {
        "name": "walletpassphrasechange",
        "category": "wallet",
        "description": "Changes the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\n",
        "examples": "> bitcoin-cli walletpassphrasechange \"old one\" \"new one\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"walletpassphrasechange\", \"params\": [\"old one\", \"new one\"]}' -H 'content-type: application/json' http://127.0.0.1:8332/\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/walletpassphrasechange-arguments.json",
          "type": "object",
          "properties": {
            "oldpassphrase": {
              "description": "The current passphrase",
              "type": "string"
            },
            "newpassphrase": {
              "description": "The new passphrase",
              "type": "string"
            }
          },
          "required": [
            "oldpassphrase",
            "newpassphrase"
          ],
          "additionalProperties": false
        }
      }
    ],
    "walletprocesspsbt": [
      {
        "name": "walletprocesspsbt",
        "category": "wallet",
        "description": "Update a PSBT with input information from our wallet and then sign inputs\nthat we can sign for.\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\n",
        "examples": "> bitcoin-cli walletprocesspsbt \"psbt\"\n",
        "arguments": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "https://bitcoincore.org/walletprocesspsbt-arguments.json",
          "type": "object",
          "properties": {
            "psbt": {
              "description": "The transaction base64 string",
              "type": "string"
            },
            "sign": {
              "description": "Also sign the transaction when updating (requires wallet to be unlocked)",
              "type": "boolean"
            },
            "sighashtype": {
              "description": "The signature hash type to sign with if not specified by the PSBT. Must be one of\n       \"DEFAULT\"\n       \"ALL\"\n       \"NONE\"\n       \"SINGLE\"\n       \"ALL|ANYONECANPAY\"\n       \"NONE|ANYONECANPAY\"\n       \"SINGLE|ANYONECANPAY\"",
              "type": "string"
            },
            "bip32derivs": {
              "description": "Include BIP 32 derivation paths for public keys if we know them",
              "type": "boolean"
            },
            "finalize": {
              "description": "Also finalize inputs if possible",
              "type": "boolean"
            }
          },
          "required": [
            "psbt"
          ],
          "additionalProperties": false
        }
      }
    ]
  }
}
