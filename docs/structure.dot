digraph BitcoinRpcCodegen {
  graph [rankdir=LR, splines=ortho];

  // ───────────── Legend ─────────────
  subgraph cluster_legend {
    label="Legend"; fontsize=12;
    node [shape=box style=filled];
    legend_rpc_api   [label="RPC-API\n(types, errors, versions)" fillcolor="#ffffff" color="#888888"];
    legend_parser    [label="Parser" fillcolor="#ccffcc" color="#888888"];
    legend_schema    [label="Schema\n(norm & val)" fillcolor="#ccccff" color="#888888"];
    legend_codegen   [label="Codegen" fillcolor="#ffcccc" color="#888888"];
    legend_transport [label="Transport\n(JSON-RPC HTTP)" fillcolor="#ffffcc" color="#888888"];
    legend_client    [label="Client\n(RpcClient)" fillcolor="#ccffff" color="#888888"];
    legend_node_mgr  [label="Node Manager\n(bitcoind spawn & control)" fillcolor="#ccffff" color="#888888"];
    legend_cross     [label="Cross-cutting Crates" fillcolor="#ffffff" color="#888888"];
    legend_tests     [label="Testing Harnesses" fillcolor="#ffcc80" color="#888888"];
  }

  // ───────────── RPC-API crate ─────────────
  subgraph cluster_rpc_api {
    label="rpc_api"; style=filled; fillcolor="#f0f0f0"; color="#888888";
    node [shape=box style=filled fillcolor="#ffffff" color="#000000"];
    rpc_api [label="RPC-API\n(types, errors, versions)"];
  }

  // ───────────── Parser crate ─────────────
  subgraph cluster_parser {
    label="parser"; style=filled; fillcolor="#ccffcc"; color="#669966";
    parser [label="parser\n(HelpParser)"];
  }

  // ───────────── Schema crate ─────────────
  subgraph cluster_schema {
    label="schema"; style=filled; fillcolor="#ccccff"; color="#6666CC";
    schema_norm [label="schema_normalizer"];
    schema_val  [label="schema_validator"];
  }

  // ───────────── Codegen crate ─────────────
  subgraph cluster_codegen {
    label="codegen"; style=filled; fillcolor="#ffcccc"; color="#CC6666";
    codegen [label="codegen"];
  }

  // ───────────── Transport crate ─────────────
  subgraph cluster_transport {
    label="transport"; style=filled; fillcolor="#ffffcc"; color="#CCCC66";
    transport [label="transport\n(JSON-RPC HTTP)"];
  }

  // ───────────── Client crate ─────────────
  subgraph cluster_client {
    label="client"; style=filled; fillcolor="#ccffff"; color="#66CCCC";
    client [label="client\n(RpcClient)"];
  }

  // ───────────── Node Manager crate ─────────────
  subgraph cluster_node_mgr {
    label="node"; style=filled; fillcolor="#ccffff"; color="#339999";
    node_mgr [label="node\n(NodeManager)"];
  }

  // ───────────── Pipeline crate ─────────────
  subgraph cluster_rpc_cli {
    label="pipeline"; style=filled; fillcolor="#ffccff"; color="#CC66CC";
    pipeline [label="pipeline\n(Code Generation)"];
  }

  // ───────────── Cross-cutting crates ─────────────
  config      [label="config"      shape=box style=filled fillcolor="#ffffff"];
  logging     [label="logging"     shape=box style=filled fillcolor="#ffffff"];
  rpc_metrics [label="rpc_metrics" shape=box style=filled fillcolor="#ffffff"];

  // ───────────── Testing harnesses ─────────────
  integration_test [label="integration-test" shape=box style=filled fillcolor="#ffcc80"];
  fuzz             [label="fuzz"             shape=box style=filled fillcolor="#ffcc80"];
  verify           [label="verify"           shape=box style=filled fillcolor="#ffcc80"];

  // ───────────── Dependencies ─────────────
  parser      -> rpc_api;
  schema_norm -> parser;
  schema_norm -> rpc_api;
  schema_val  -> schema_norm;
  codegen     -> schema_norm;
  codegen     -> transport;
  pipeline    -> parser;
  pipeline    -> rpc_api;
  pipeline    -> schema_norm;
  pipeline    -> schema_val;
  pipeline    -> codegen;
}